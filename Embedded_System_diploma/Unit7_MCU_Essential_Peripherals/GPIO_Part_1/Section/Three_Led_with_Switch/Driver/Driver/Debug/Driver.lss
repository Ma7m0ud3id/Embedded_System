
Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000442  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  00800060  00800060  000004b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001174  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000982  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e2  00000000  00000000  00002162  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000454  00000000  00000000  00002b44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000711  00000000  00000000  00002f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a71  00000000  00000000  000036a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000411a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__vector_1>
   8:	0c 94 35 01 	jmp	0x26a	; 0x26a <__vector_2>
   c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__vector_3>
  10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_4>
  14:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 83 01 	jmp	0x306	; 0x306 <__vector_10>
  2c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 38       	cpi	r26, 0x8B	; 139
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 1f 02 	jmp	0x43e	; 0x43e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "Timer.h"
#include <util/delay.h>
unsigned char counter=0;
int main(void)
{
	DIR_PIN(DDRD,PIN0,INPUT);
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	81 e3       	ldi	r24, 0x31	; 49
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 ce 00 	call	0x19c	; 0x19c <DIR_PIN>
	DIR_PIN(DDRD,PIN5,OUTPUT);
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	65 e0       	ldi	r22, 0x05	; 5
  a2:	81 e3       	ldi	r24, 0x31	; 49
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 ce 00 	call	0x19c	; 0x19c <DIR_PIN>
	DIR_PIN(DDRD,PIN6,OUTPUT);
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	66 e0       	ldi	r22, 0x06	; 6
  ae:	81 e3       	ldi	r24, 0x31	; 49
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 ce 00 	call	0x19c	; 0x19c <DIR_PIN>
	DIR_PIN(DDRD,PIN7,OUTPUT);
  b6:	41 e0       	ldi	r20, 0x01	; 1
  b8:	67 e0       	ldi	r22, 0x07	; 7
  ba:	81 e3       	ldi	r24, 0x31	; 49
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 ce 00 	call	0x19c	; 0x19c <DIR_PIN>
	Reset_PIN(PORTD,PIN5);
  c2:	65 e0       	ldi	r22, 0x05	; 5
  c4:	82 e3       	ldi	r24, 0x32	; 50
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 01 01 	call	0x202	; 0x202 <Reset_PIN>
	Reset_PIN(PORTD,PIN6);
  cc:	66 e0       	ldi	r22, 0x06	; 6
  ce:	82 e3       	ldi	r24, 0x32	; 50
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 01 01 	call	0x202	; 0x202 <Reset_PIN>
	Reset_PIN(PORTD,PIN7);
  d6:	67 e0       	ldi	r22, 0x07	; 7
  d8:	82 e3       	ldi	r24, 0x32	; 50
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 01 01 	call	0x202	; 0x202 <Reset_PIN>
	
	while(1){
		if (READ_PIN(PIND,PIN0))
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	80 e3       	ldi	r24, 0x30	; 48
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <READ_PIN>
  ea:	88 23       	and	r24, r24
  ec:	c9 f3       	breq	.-14     	; 0xe0 <main+0x4e>
		{
			if (counter==0)
  ee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f2:	81 11       	cpse	r24, r1
  f4:	19 c0       	rjmp	.+50     	; 0x128 <main+0x96>
			{
				Set_PIN(PORTD,PIN5);
  f6:	65 e0       	ldi	r22, 0x05	; 5
  f8:	82 e3       	ldi	r24, 0x32	; 50
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <Set_PIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	2f e3       	ldi	r18, 0x3F	; 63
 102:	8d e0       	ldi	r24, 0x0D	; 13
 104:	93 e0       	ldi	r25, 0x03	; 3
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x74>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x7e>
 110:	00 00       	nop
				_delay_ms(1000);
				Reset_PIN(PORTD,PIN5);
 112:	65 e0       	ldi	r22, 0x05	; 5
 114:	82 e3       	ldi	r24, 0x32	; 50
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 01 01 	call	0x202	; 0x202 <Reset_PIN>
				counter++;
 11c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 126:	32 c0       	rjmp	.+100    	; 0x18c <main+0xfa>
			} 
			else if(counter==1)
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	c9 f4       	brne	.+50     	; 0x15e <main+0xcc>
			{
				Set_PIN(PORTD,PIN6);
 12c:	66 e0       	ldi	r22, 0x06	; 6
 12e:	82 e3       	ldi	r24, 0x32	; 50
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 f5 00 	call	0x1ea	; 0x1ea <Set_PIN>
 136:	2f e3       	ldi	r18, 0x3F	; 63
 138:	8d e0       	ldi	r24, 0x0D	; 13
 13a:	93 e0       	ldi	r25, 0x03	; 3
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0xaa>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0xb4>
 146:	00 00       	nop
				_delay_ms(1000);
				Reset_PIN(PORTD,PIN6);
 148:	66 e0       	ldi	r22, 0x06	; 6
 14a:	82 e3       	ldi	r24, 0x32	; 50
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 01 01 	call	0x202	; 0x202 <Reset_PIN>
				counter++;
 152:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 156:	8f 5f       	subi	r24, 0xFF	; 255
 158:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 15c:	17 c0       	rjmp	.+46     	; 0x18c <main+0xfa>
			}else if (counter==2)
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	a9 f4       	brne	.+42     	; 0x18c <main+0xfa>
			{
				Set_PIN(PORTD,PIN7);
 162:	67 e0       	ldi	r22, 0x07	; 7
 164:	82 e3       	ldi	r24, 0x32	; 50
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 f5 00 	call	0x1ea	; 0x1ea <Set_PIN>
 16c:	2f e3       	ldi	r18, 0x3F	; 63
 16e:	8d e0       	ldi	r24, 0x0D	; 13
 170:	93 e0       	ldi	r25, 0x03	; 3
 172:	21 50       	subi	r18, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <main+0xe0>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0xea>
 17c:	00 00       	nop
				_delay_ms(1000);
				Reset_PIN(PORTD,PIN7);
 17e:	67 e0       	ldi	r22, 0x07	; 7
 180:	82 e3       	ldi	r24, 0x32	; 50
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 01 01 	call	0x202	; 0x202 <Reset_PIN>
				counter=0;
 188:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			while(READ_PIN(PIND,PIN0));
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	80 e3       	ldi	r24, 0x30	; 48
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <READ_PIN>
 196:	81 11       	cpse	r24, r1
 198:	f9 cf       	rjmp	.-14     	; 0x18c <main+0xfa>
 19a:	a2 cf       	rjmp	.-188    	; 0xe0 <main+0x4e>

0000019c <DIR_PIN>:
void Toggel_PIN(uint8_t *PORTx,uint8_t pin){
	*PORTx^=(1<<pin);
}

void Reset_Port(uint8_t *PORTx){
	*PORTx&=~(uint8_t)(0xff);
 19c:	41 30       	cpi	r20, 0x01	; 1
 19e:	61 f4       	brne	.+24     	; 0x1b8 <DIR_PIN+0x1c>
 1a0:	21 e0       	ldi	r18, 0x01	; 1
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <DIR_PIN+0xe>
 1a6:	22 0f       	add	r18, r18
 1a8:	33 1f       	adc	r19, r19
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <DIR_PIN+0xa>
 1ae:	fc 01       	movw	r30, r24
 1b0:	30 81       	ld	r19, Z
 1b2:	23 2b       	or	r18, r19
 1b4:	20 83       	st	Z, r18
 1b6:	08 95       	ret
 1b8:	41 11       	cpse	r20, r1
 1ba:	0c c0       	rjmp	.+24     	; 0x1d4 <DIR_PIN+0x38>
 1bc:	21 e0       	ldi	r18, 0x01	; 1
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIR_PIN+0x2a>
 1c2:	22 0f       	add	r18, r18
 1c4:	33 1f       	adc	r19, r19
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIR_PIN+0x26>
 1ca:	20 95       	com	r18
 1cc:	fc 01       	movw	r30, r24
 1ce:	30 81       	ld	r19, Z
 1d0:	23 23       	and	r18, r19
 1d2:	20 83       	st	Z, r18
 1d4:	08 95       	ret

000001d6 <READ_PIN>:
 1d6:	fc 01       	movw	r30, r24
 1d8:	80 81       	ld	r24, Z
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <READ_PIN+0xc>
 1de:	95 95       	asr	r25
 1e0:	87 95       	ror	r24
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <READ_PIN+0x8>
 1e6:	81 70       	andi	r24, 0x01	; 1
 1e8:	08 95       	ret

000001ea <Set_PIN>:
 1ea:	21 e0       	ldi	r18, 0x01	; 1
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <Set_PIN+0xa>
 1f0:	22 0f       	add	r18, r18
 1f2:	33 1f       	adc	r19, r19
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <Set_PIN+0x6>
 1f8:	fc 01       	movw	r30, r24
 1fa:	30 81       	ld	r19, Z
 1fc:	23 2b       	or	r18, r19
 1fe:	20 83       	st	Z, r18
 200:	08 95       	ret

00000202 <Reset_PIN>:
}
void Reset_PIN(uint8_t *PORTx,uint8_t pin){
	 *PORTx&=~(uint8_t)(1<<pin);
 202:	21 e0       	ldi	r18, 0x01	; 1
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <Reset_PIN+0xa>
 208:	22 0f       	add	r18, r18
 20a:	33 1f       	adc	r19, r19
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <Reset_PIN+0x6>
 210:	20 95       	com	r18
 212:	fc 01       	movw	r30, r24
 214:	30 81       	ld	r19, Z
 216:	23 23       	and	r18, r19
 218:	20 83       	st	Z, r18
 21a:	08 95       	ret

0000021c <__vector_1>:
	
	EXTI_config[index].EXTI_Function();
	
}*/
void  __vector_1 (void) __attribute__((signal));
void __vector_1 (void){
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
 226:	2f 93       	push	r18
 228:	3f 93       	push	r19
 22a:	4f 93       	push	r20
 22c:	5f 93       	push	r21
 22e:	6f 93       	push	r22
 230:	7f 93       	push	r23
 232:	8f 93       	push	r24
 234:	9f 93       	push	r25
 236:	af 93       	push	r26
 238:	bf 93       	push	r27
 23a:	ef 93       	push	r30
 23c:	ff 93       	push	r31
	EXTI_config[(uint8_t)0].EXTI_Function();
 23e:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <EXTI_config+0x2>
 242:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <EXTI_config+0x3>
 246:	09 95       	icall
}
 248:	ff 91       	pop	r31
 24a:	ef 91       	pop	r30
 24c:	bf 91       	pop	r27
 24e:	af 91       	pop	r26
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	7f 91       	pop	r23
 256:	6f 91       	pop	r22
 258:	5f 91       	pop	r21
 25a:	4f 91       	pop	r20
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <__vector_2>:

void  __vector_2 (void) __attribute__((signal));
void __vector_2 (void){
 26a:	1f 92       	push	r1
 26c:	0f 92       	push	r0
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
 274:	2f 93       	push	r18
 276:	3f 93       	push	r19
 278:	4f 93       	push	r20
 27a:	5f 93       	push	r21
 27c:	6f 93       	push	r22
 27e:	7f 93       	push	r23
 280:	8f 93       	push	r24
 282:	9f 93       	push	r25
 284:	af 93       	push	r26
 286:	bf 93       	push	r27
 288:	ef 93       	push	r30
 28a:	ff 93       	push	r31
	EXTI_config[(uint8_t)1].EXTI_Function();
 28c:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <EXTI_config+0x6>
 290:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <EXTI_config+0x7>
 294:	09 95       	icall
}
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	bf 91       	pop	r27
 29c:	af 91       	pop	r26
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	7f 91       	pop	r23
 2a4:	6f 91       	pop	r22
 2a6:	5f 91       	pop	r21
 2a8:	4f 91       	pop	r20
 2aa:	3f 91       	pop	r19
 2ac:	2f 91       	pop	r18
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <__vector_3>:

void  __vector_3 (void) __attribute__((signal));
void __vector_3 (void){
 2b8:	1f 92       	push	r1
 2ba:	0f 92       	push	r0
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	0f 92       	push	r0
 2c0:	11 24       	eor	r1, r1
 2c2:	2f 93       	push	r18
 2c4:	3f 93       	push	r19
 2c6:	4f 93       	push	r20
 2c8:	5f 93       	push	r21
 2ca:	6f 93       	push	r22
 2cc:	7f 93       	push	r23
 2ce:	8f 93       	push	r24
 2d0:	9f 93       	push	r25
 2d2:	af 93       	push	r26
 2d4:	bf 93       	push	r27
 2d6:	ef 93       	push	r30
 2d8:	ff 93       	push	r31
	EXTI_config[(uint8_t)2].EXTI_Function();
 2da:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <EXTI_config+0xa>
 2de:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <EXTI_config+0xb>
 2e2:	09 95       	icall
}
 2e4:	ff 91       	pop	r31
 2e6:	ef 91       	pop	r30
 2e8:	bf 91       	pop	r27
 2ea:	af 91       	pop	r26
 2ec:	9f 91       	pop	r25
 2ee:	8f 91       	pop	r24
 2f0:	7f 91       	pop	r23
 2f2:	6f 91       	pop	r22
 2f4:	5f 91       	pop	r21
 2f6:	4f 91       	pop	r20
 2f8:	3f 91       	pop	r19
 2fa:	2f 91       	pop	r18
 2fc:	0f 90       	pop	r0
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	0f 90       	pop	r0
 302:	1f 90       	pop	r1
 304:	18 95       	reti

00000306 <__vector_10>:
		 *TCNT2 =Reminder_output_compare;
		 
		 
		select_Timer=TIMER2;
		Timer_2_Mask_overflow();
		Global_Interrupt();
 306:	1f 92       	push	r1
 308:	0f 92       	push	r0
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	0f 92       	push	r0
 30e:	11 24       	eor	r1, r1
 310:	2f 93       	push	r18
 312:	3f 93       	push	r19
 314:	4f 93       	push	r20
 316:	5f 93       	push	r21
 318:	6f 93       	push	r22
 31a:	7f 93       	push	r23
 31c:	8f 93       	push	r24
 31e:	9f 93       	push	r25
 320:	af 93       	push	r26
 322:	bf 93       	push	r27
 324:	ef 93       	push	r30
 326:	ff 93       	push	r31
		
 328:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <Time_con+0x6>
 32c:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <Time_con+0x7>
 330:	09 95       	icall
        //Timer_2_NON_Mask_Compere();
 332:	ff 91       	pop	r31
 334:	ef 91       	pop	r30
 336:	bf 91       	pop	r27
 338:	af 91       	pop	r26
 33a:	9f 91       	pop	r25
 33c:	8f 91       	pop	r24
 33e:	7f 91       	pop	r23
 340:	6f 91       	pop	r22
 342:	5f 91       	pop	r21
 344:	4f 91       	pop	r20
 346:	3f 91       	pop	r19
 348:	2f 91       	pop	r18
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <__vector_11>:
		
	}
	
	
	
 354:	1f 92       	push	r1
 356:	0f 92       	push	r0
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	0f 92       	push	r0
 35c:	11 24       	eor	r1, r1
 35e:	2f 93       	push	r18
 360:	3f 93       	push	r19
 362:	4f 93       	push	r20
 364:	5f 93       	push	r21
 366:	6f 93       	push	r22
 368:	7f 93       	push	r23
 36a:	8f 93       	push	r24
 36c:	9f 93       	push	r25
 36e:	af 93       	push	r26
 370:	bf 93       	push	r27
 372:	ef 93       	push	r30
 374:	ff 93       	push	r31
}
 376:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <Time_con+0x8>
 37a:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <Time_con+0x9>
 37e:	09 95       	icall

 380:	ff 91       	pop	r31
 382:	ef 91       	pop	r30
 384:	bf 91       	pop	r27
 386:	af 91       	pop	r26
 388:	9f 91       	pop	r25
 38a:	8f 91       	pop	r24
 38c:	7f 91       	pop	r23
 38e:	6f 91       	pop	r22
 390:	5f 91       	pop	r21
 392:	4f 91       	pop	r20
 394:	3f 91       	pop	r19
 396:	2f 91       	pop	r18
 398:	0f 90       	pop	r0
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	0f 90       	pop	r0
 39e:	1f 90       	pop	r1
 3a0:	18 95       	reti

000003a2 <__vector_4>:
void Timer_PWM(Timer_Configration *Timer_config,uint8_t value){
	
	
}

 3a2:	1f 92       	push	r1
 3a4:	0f 92       	push	r0
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	0f 92       	push	r0
 3aa:	11 24       	eor	r1, r1
 3ac:	2f 93       	push	r18
 3ae:	3f 93       	push	r19
 3b0:	4f 93       	push	r20
 3b2:	5f 93       	push	r21
 3b4:	6f 93       	push	r22
 3b6:	7f 93       	push	r23
 3b8:	8f 93       	push	r24
 3ba:	9f 93       	push	r25
 3bc:	af 93       	push	r26
 3be:	bf 93       	push	r27
 3c0:	ef 93       	push	r30
 3c2:	ff 93       	push	r31
void Timer_Servo(Timer_Configration *Timer_config,uint8_t Phase){
 3c4:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <Time_con+0x1a>
 3c8:	f0 91 88 00 	lds	r31, 0x0088	; 0x800088 <Time_con+0x1b>
 3cc:	09 95       	icall
	
 3ce:	ff 91       	pop	r31
 3d0:	ef 91       	pop	r30
 3d2:	bf 91       	pop	r27
 3d4:	af 91       	pop	r26
 3d6:	9f 91       	pop	r25
 3d8:	8f 91       	pop	r24
 3da:	7f 91       	pop	r23
 3dc:	6f 91       	pop	r22
 3de:	5f 91       	pop	r21
 3e0:	4f 91       	pop	r20
 3e2:	3f 91       	pop	r19
 3e4:	2f 91       	pop	r18
 3e6:	0f 90       	pop	r0
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	0f 90       	pop	r0
 3ec:	1f 90       	pop	r1
 3ee:	18 95       	reti

000003f0 <__vector_5>:
}


//****************************************************************
                      //Interrupt FUNCTION
 3f0:	1f 92       	push	r1
 3f2:	0f 92       	push	r0
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	0f 92       	push	r0
 3f8:	11 24       	eor	r1, r1
 3fa:	2f 93       	push	r18
 3fc:	3f 93       	push	r19
 3fe:	4f 93       	push	r20
 400:	5f 93       	push	r21
 402:	6f 93       	push	r22
 404:	7f 93       	push	r23
 406:	8f 93       	push	r24
 408:	9f 93       	push	r25
 40a:	af 93       	push	r26
 40c:	bf 93       	push	r27
 40e:	ef 93       	push	r30
 410:	ff 93       	push	r31
//****************************************************************
 412:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <Time_con+0x1c>
 416:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <Time_con+0x1d>
 41a:	09 95       	icall

 41c:	ff 91       	pop	r31
 41e:	ef 91       	pop	r30
 420:	bf 91       	pop	r27
 422:	af 91       	pop	r26
 424:	9f 91       	pop	r25
 426:	8f 91       	pop	r24
 428:	7f 91       	pop	r23
 42a:	6f 91       	pop	r22
 42c:	5f 91       	pop	r21
 42e:	4f 91       	pop	r20
 430:	3f 91       	pop	r19
 432:	2f 91       	pop	r18
 434:	0f 90       	pop	r0
 436:	0f be       	out	0x3f, r0	; 63
 438:	0f 90       	pop	r0
 43a:	1f 90       	pop	r1
 43c:	18 95       	reti

0000043e <_exit>:
 43e:	f8 94       	cli

00000440 <__stop_program>:
 440:	ff cf       	rjmp	.-2      	; 0x440 <__stop_program>
