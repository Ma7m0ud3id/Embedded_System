
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000680  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007b0  080007b8  000107b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007b0  080007b0  000107b8  2**0
                  CONTENTS
  4 .ARM          00000000  080007b0  080007b0  000107b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007b0  080007b8  000107b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007b0  080007b0  000107b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007b4  080007b4  000107b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000107b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  080007b8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  080007b8  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000107b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000043d8  00000000  00000000  000107e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000aac  00000000  00000000  00014bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000cfc  00000000  00000000  00015665  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000208  00000000  00000000  00016368  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001b0  00000000  00000000  00016570  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000014d1  00000000  00000000  00016720  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000023e7  00000000  00000000  00017bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000bbe3  00000000  00000000  00019fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00025bbb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006b0  00000000  00000000  00025c38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000798 	.word	0x08000798

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000798 	.word	0x08000798

08000170 <Clock_Init>:
#include "Stm32f103x8_USART_drivers.h"
#include "Stm32f103x8_SPI_drivers.h"
#include "Lcd.h"

void Clock_Init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//open clock of GPIOA
	RCC_GPIOA_CLK_EN();
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <Clock_Init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <Clock_Init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]

	//open clock of GPIOB
	RCC_GPIOB_CLK_EN();
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <Clock_Init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <Clock_Init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <GPIO_Init>:


void GPIO_Init()
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
	     GPIO_Pinconfige_t pin_config ;

		//PA1: (Mode >> Input mode(00)) (CNF >>  Floating input(01))
		pin_config.Pin_Number = GPIO_PIN_1;
 800019e:	2302      	movs	r3, #2
 80001a0:	80bb      	strh	r3, [r7, #4]
		pin_config.Mode = GPIO_MODE_INPUT_FLO;
 80001a2:	2301      	movs	r3, #1
 80001a4:	71bb      	strb	r3, [r7, #6]
		GPIOx_init(GPIOA, &pin_config);
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4619      	mov	r1, r3
 80001aa:	4814      	ldr	r0, [pc, #80]	; (80001fc <GPIO_Init+0x64>)
 80001ac:	f000 f9ee 	bl	800058c <GPIOx_init>

		//PA13: (Mode >> Input mode(00)) (CNF >>  Floating input(01))
		pin_config.Pin_Number = GPIO_PIN_13;
 80001b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001b4:	80bb      	strh	r3, [r7, #4]
		pin_config.Mode = GPIO_MODE_INPUT_FLO;
 80001b6:	2301      	movs	r3, #1
 80001b8:	71bb      	strb	r3, [r7, #6]
		GPIOx_init(GPIOA, &pin_config);
 80001ba:	1d3b      	adds	r3, r7, #4
 80001bc:	4619      	mov	r1, r3
 80001be:	480f      	ldr	r0, [pc, #60]	; (80001fc <GPIO_Init+0x64>)
 80001c0:	f000 f9e4 	bl	800058c <GPIOx_init>

		//PB1: (Mode >> Output mode, max speed 10 MHz(01)) (CNF >> General purpose output push-pull(00))

		pin_config.Pin_Number = GPIO_PIN_1;
 80001c4:	2302      	movs	r3, #2
 80001c6:	80bb      	strh	r3, [r7, #4]
		pin_config.Mode = GPIO_MODE_OUTPUT_PP;
 80001c8:	2304      	movs	r3, #4
 80001ca:	71bb      	strb	r3, [r7, #6]
		pin_config.Speed = GPIO_MODE_speed_10_MHz;
 80001cc:	2301      	movs	r3, #1
 80001ce:	71fb      	strb	r3, [r7, #7]
		GPIOx_init(GPIOB, &pin_config);
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	4619      	mov	r1, r3
 80001d4:	480a      	ldr	r0, [pc, #40]	; (8000200 <GPIO_Init+0x68>)
 80001d6:	f000 f9d9 	bl	800058c <GPIOx_init>

		//Pin13: (Mode >> Output mode, max speed 10 MHz(01)) (CNF >> General purpose output push-pull(00))
		pin_config.Pin_Number = GPIO_PIN_13;
 80001da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001de:	80bb      	strh	r3, [r7, #4]
		pin_config.Mode = GPIO_MODE_OUTPUT_PP;
 80001e0:	2304      	movs	r3, #4
 80001e2:	71bb      	strb	r3, [r7, #6]
		pin_config.Speed = GPIO_MODE_speed_10_MHz;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
		GPIOx_init(GPIOB, &pin_config);
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	4619      	mov	r1, r3
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <GPIO_Init+0x68>)
 80001ee:	f000 f9cd 	bl	800058c <GPIOx_init>
}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40010800 	.word	0x40010800
 8000200:	40010c00 	.word	0x40010c00

08000204 <__delay__>:

void __delay__(uint32_t x)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	uint32_t i, j;

	for(i = 0; i < x; i++)
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
 8000210:	e00b      	b.n	800022a <__delay__+0x26>
		for(j = 0; j < 255; j++);
 8000212:	2300      	movs	r3, #0
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	e002      	b.n	800021e <__delay__+0x1a>
 8000218:	68bb      	ldr	r3, [r7, #8]
 800021a:	3301      	adds	r3, #1
 800021c:	60bb      	str	r3, [r7, #8]
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	2bfe      	cmp	r3, #254	; 0xfe
 8000222:	d9f9      	bls.n	8000218 <__delay__+0x14>
	for(i = 0; i < x; i++)
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	3301      	adds	r3, #1
 8000228:	60fb      	str	r3, [r7, #12]
 800022a:	68fa      	ldr	r2, [r7, #12]
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	429a      	cmp	r2, r3
 8000230:	d3ef      	bcc.n	8000212 <__delay__+0xe>
}
 8000232:	bf00      	nop
 8000234:	3714      	adds	r7, #20
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr

0800023c <main>:


int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	Clock_Init();
 8000240:	f7ff ff96 	bl	8000170 <Clock_Init>
	GPIO_Init();
 8000244:	f7ff ffa8 	bl	8000198 <GPIO_Init>

	while(1){
		if(GPIOx_READ_PIN(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)
 8000248:	2102      	movs	r1, #2
 800024a:	4811      	ldr	r0, [pc, #68]	; (8000290 <main+0x54>)
 800024c:	f000 fa1c 	bl	8000688 <GPIOx_READ_PIN>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d10b      	bne.n	800026e <main+0x32>
		{
			GPIOx_TOGGELE_PIN(GPIOB, GPIO_PIN_1);
 8000256:	2102      	movs	r1, #2
 8000258:	480e      	ldr	r0, [pc, #56]	; (8000294 <main+0x58>)
 800025a:	f000 fa2c 	bl	80006b6 <GPIOx_TOGGELE_PIN>
			while(GPIOx_READ_PIN(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET); //single press
 800025e:	bf00      	nop
 8000260:	2102      	movs	r1, #2
 8000262:	480b      	ldr	r0, [pc, #44]	; (8000290 <main+0x54>)
 8000264:	f000 fa10 	bl	8000688 <GPIOx_READ_PIN>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d0f8      	beq.n	8000260 <main+0x24>
		}

		if(GPIOx_READ_PIN(GPIOA, GPIO_PIN_13) == 1)
 800026e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000272:	4807      	ldr	r0, [pc, #28]	; (8000290 <main+0x54>)
 8000274:	f000 fa08 	bl	8000688 <GPIOx_READ_PIN>
 8000278:	4603      	mov	r3, r0
 800027a:	2b01      	cmp	r3, #1
 800027c:	d104      	bne.n	8000288 <main+0x4c>
		{
			GPIOx_TOGGELE_PIN(GPIOB, GPIO_PIN_13);	//multi press
 800027e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000282:	4804      	ldr	r0, [pc, #16]	; (8000294 <main+0x58>)
 8000284:	f000 fa17 	bl	80006b6 <GPIOx_TOGGELE_PIN>
		}

		__delay__(1);
 8000288:	2001      	movs	r0, #1
 800028a:	f7ff ffbb 	bl	8000204 <__delay__>
		if(GPIOx_READ_PIN(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)
 800028e:	e7db      	b.n	8000248 <main+0xc>
 8000290:	40010800 	.word	0x40010800
 8000294:	40010c00 	.word	0x40010c00

08000298 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000298:	480d      	ldr	r0, [pc, #52]	; (80002d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800029a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800029c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a0:	480c      	ldr	r0, [pc, #48]	; (80002d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002a2:	490d      	ldr	r1, [pc, #52]	; (80002d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a4:	4a0d      	ldr	r2, [pc, #52]	; (80002dc <LoopForever+0xe>)
  movs r3, #0
 80002a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a8:	e002      	b.n	80002b0 <LoopCopyDataInit>

080002aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ae:	3304      	adds	r3, #4

080002b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b4:	d3f9      	bcc.n	80002aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002b6:	4a0a      	ldr	r2, [pc, #40]	; (80002e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b8:	4c0a      	ldr	r4, [pc, #40]	; (80002e4 <LoopForever+0x16>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002bc:	e001      	b.n	80002c2 <LoopFillZerobss>

080002be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c0:	3204      	adds	r2, #4

080002c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c4:	d3fb      	bcc.n	80002be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002c6:	f000 fa43 	bl	8000750 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ca:	f7ff ffb7 	bl	800023c <main>

080002ce <LoopForever>:

LoopForever:
    b LoopForever
 80002ce:	e7fe      	b.n	80002ce <LoopForever>
  ldr   r0, =_estack
 80002d0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002dc:	080007b8 	.word	0x080007b8
  ldr r2, =_sbss
 80002e0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002e4:	20000060 	.word	0x20000060

080002e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e8:	e7fe      	b.n	80002e8 <ADC1_2_IRQHandler>
	...

080002ec <EXTI0_IRQHandler>:

	Updata(P_EXTI_Confige);
}
//=========================================ISR==============================================
void EXTI0_IRQHandler(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	//write 1 to clear pending bit,to stop sending interrupt again
	EXTI->PR = 1<<0;
 80002f0:	4b03      	ldr	r3, [pc, #12]	; (8000300 <EXTI0_IRQHandler+0x14>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	615a      	str	r2, [r3, #20]
	//callback
	Gp_call_back_func[0]();
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <EXTI0_IRQHandler+0x18>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4798      	blx	r3
}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	40010400 	.word	0x40010400
 8000304:	20000024 	.word	0x20000024

08000308 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<1;
 800030c:	4b03      	ldr	r3, [pc, #12]	; (800031c <EXTI1_IRQHandler+0x14>)
 800030e:	2202      	movs	r2, #2
 8000310:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[1]();
 8000312:	4b03      	ldr	r3, [pc, #12]	; (8000320 <EXTI1_IRQHandler+0x18>)
 8000314:	685b      	ldr	r3, [r3, #4]
 8000316:	4798      	blx	r3
}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}
 800031c:	40010400 	.word	0x40010400
 8000320:	20000024 	.word	0x20000024

08000324 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<2;
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <EXTI2_IRQHandler+0x14>)
 800032a:	2204      	movs	r2, #4
 800032c:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[2]();
 800032e:	4b03      	ldr	r3, [pc, #12]	; (800033c <EXTI2_IRQHandler+0x18>)
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	4798      	blx	r3
}
 8000334:	bf00      	nop
 8000336:	bd80      	pop	{r7, pc}
 8000338:	40010400 	.word	0x40010400
 800033c:	20000024 	.word	0x20000024

08000340 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<3;
 8000344:	4b03      	ldr	r3, [pc, #12]	; (8000354 <EXTI3_IRQHandler+0x14>)
 8000346:	2208      	movs	r2, #8
 8000348:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[3]();
 800034a:	4b03      	ldr	r3, [pc, #12]	; (8000358 <EXTI3_IRQHandler+0x18>)
 800034c:	68db      	ldr	r3, [r3, #12]
 800034e:	4798      	blx	r3
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	40010400 	.word	0x40010400
 8000358:	20000024 	.word	0x20000024

0800035c <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<4;
 8000360:	4b03      	ldr	r3, [pc, #12]	; (8000370 <EXTI4_IRQHandler+0x14>)
 8000362:	2210      	movs	r2, #16
 8000364:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[4]();
 8000366:	4b03      	ldr	r3, [pc, #12]	; (8000374 <EXTI4_IRQHandler+0x18>)
 8000368:	691b      	ldr	r3, [r3, #16]
 800036a:	4798      	blx	r3
}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}
 8000370:	40010400 	.word	0x40010400
 8000374:	20000024 	.word	0x20000024

08000378 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
    /* here i check which interrupt is that, cause all interrupts from
	 5---9  arrived on same pin at NVIC
	so we will know which interrupt for ,by checking PR register if its one so its
	and then we write 1 on PR reg to disable interrupt  */
	if(EXTI->PR & 1<<5) { EXTI->PR  = 1<<5;   Gp_call_back_func[5](); }
 800037c:	4b1f      	ldr	r3, [pc, #124]	; (80003fc <EXTI9_5_IRQHandler+0x84>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	f003 0320 	and.w	r3, r3, #32
 8000384:	2b00      	cmp	r3, #0
 8000386:	d005      	beq.n	8000394 <EXTI9_5_IRQHandler+0x1c>
 8000388:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <EXTI9_5_IRQHandler+0x84>)
 800038a:	2220      	movs	r2, #32
 800038c:	615a      	str	r2, [r3, #20]
 800038e:	4b1c      	ldr	r3, [pc, #112]	; (8000400 <EXTI9_5_IRQHandler+0x88>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR  = 1<<6;   Gp_call_back_func[6](); }
 8000394:	4b19      	ldr	r3, [pc, #100]	; (80003fc <EXTI9_5_IRQHandler+0x84>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800039c:	2b00      	cmp	r3, #0
 800039e:	d005      	beq.n	80003ac <EXTI9_5_IRQHandler+0x34>
 80003a0:	4b16      	ldr	r3, [pc, #88]	; (80003fc <EXTI9_5_IRQHandler+0x84>)
 80003a2:	2240      	movs	r2, #64	; 0x40
 80003a4:	615a      	str	r2, [r3, #20]
 80003a6:	4b16      	ldr	r3, [pc, #88]	; (8000400 <EXTI9_5_IRQHandler+0x88>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR  = 1<<7;   Gp_call_back_func[7](); }
 80003ac:	4b13      	ldr	r3, [pc, #76]	; (80003fc <EXTI9_5_IRQHandler+0x84>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d005      	beq.n	80003c4 <EXTI9_5_IRQHandler+0x4c>
 80003b8:	4b10      	ldr	r3, [pc, #64]	; (80003fc <EXTI9_5_IRQHandler+0x84>)
 80003ba:	2280      	movs	r2, #128	; 0x80
 80003bc:	615a      	str	r2, [r3, #20]
 80003be:	4b10      	ldr	r3, [pc, #64]	; (8000400 <EXTI9_5_IRQHandler+0x88>)
 80003c0:	69db      	ldr	r3, [r3, #28]
 80003c2:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR  = 1<<8;   Gp_call_back_func[8](); }
 80003c4:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <EXTI9_5_IRQHandler+0x84>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d006      	beq.n	80003de <EXTI9_5_IRQHandler+0x66>
 80003d0:	4b0a      	ldr	r3, [pc, #40]	; (80003fc <EXTI9_5_IRQHandler+0x84>)
 80003d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003d6:	615a      	str	r2, [r3, #20]
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <EXTI9_5_IRQHandler+0x88>)
 80003da:	6a1b      	ldr	r3, [r3, #32]
 80003dc:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR  = 1<<9;   Gp_call_back_func[9](); }
 80003de:	4b07      	ldr	r3, [pc, #28]	; (80003fc <EXTI9_5_IRQHandler+0x84>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d006      	beq.n	80003f8 <EXTI9_5_IRQHandler+0x80>
 80003ea:	4b04      	ldr	r3, [pc, #16]	; (80003fc <EXTI9_5_IRQHandler+0x84>)
 80003ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003f0:	615a      	str	r2, [r3, #20]
 80003f2:	4b03      	ldr	r3, [pc, #12]	; (8000400 <EXTI9_5_IRQHandler+0x88>)
 80003f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f6:	4798      	blx	r3
}
 80003f8:	bf00      	nop
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	40010400 	.word	0x40010400
 8000400:	20000024 	.word	0x20000024

08000404 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void){
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0

	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10; Gp_call_back_func[10](); }
 8000408:	4b2d      	ldr	r3, [pc, #180]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 800040a:	695b      	ldr	r3, [r3, #20]
 800040c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000410:	2b00      	cmp	r3, #0
 8000412:	d008      	beq.n	8000426 <EXTI15_10_IRQHandler+0x22>
 8000414:	4b2a      	ldr	r3, [pc, #168]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	4a29      	ldr	r2, [pc, #164]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 800041a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800041e:	6153      	str	r3, [r2, #20]
 8000420:	4b28      	ldr	r3, [pc, #160]	; (80004c4 <EXTI15_10_IRQHandler+0xc0>)
 8000422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000424:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11; Gp_call_back_func[11](); }
 8000426:	4b26      	ldr	r3, [pc, #152]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800042e:	2b00      	cmp	r3, #0
 8000430:	d008      	beq.n	8000444 <EXTI15_10_IRQHandler+0x40>
 8000432:	4b23      	ldr	r3, [pc, #140]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a22      	ldr	r2, [pc, #136]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000438:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b21      	ldr	r3, [pc, #132]	; (80004c4 <EXTI15_10_IRQHandler+0xc0>)
 8000440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000442:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12; Gp_call_back_func[12](); }
 8000444:	4b1e      	ldr	r3, [pc, #120]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800044c:	2b00      	cmp	r3, #0
 800044e:	d008      	beq.n	8000462 <EXTI15_10_IRQHandler+0x5e>
 8000450:	4b1b      	ldr	r3, [pc, #108]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	4a1a      	ldr	r2, [pc, #104]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000456:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800045a:	6153      	str	r3, [r2, #20]
 800045c:	4b19      	ldr	r3, [pc, #100]	; (80004c4 <EXTI15_10_IRQHandler+0xc0>)
 800045e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000460:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13; Gp_call_back_func[13](); }
 8000462:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800046a:	2b00      	cmp	r3, #0
 800046c:	d008      	beq.n	8000480 <EXTI15_10_IRQHandler+0x7c>
 800046e:	4b14      	ldr	r3, [pc, #80]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a13      	ldr	r2, [pc, #76]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000474:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000478:	6153      	str	r3, [r2, #20]
 800047a:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <EXTI15_10_IRQHandler+0xc0>)
 800047c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800047e:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14; Gp_call_back_func[14](); }
 8000480:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000488:	2b00      	cmp	r3, #0
 800048a:	d008      	beq.n	800049e <EXTI15_10_IRQHandler+0x9a>
 800048c:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 800048e:	695b      	ldr	r3, [r3, #20]
 8000490:	4a0b      	ldr	r2, [pc, #44]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000496:	6153      	str	r3, [r2, #20]
 8000498:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <EXTI15_10_IRQHandler+0xc0>)
 800049a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800049c:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<15; Gp_call_back_func[15](); }
 800049e:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d008      	beq.n	80004bc <EXTI15_10_IRQHandler+0xb8>
 80004aa:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 80004b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004b4:	6153      	str	r3, [r2, #20]
 80004b6:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <EXTI15_10_IRQHandler+0xc0>)
 80004b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004ba:	4798      	blx	r3
}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40010400 	.word	0x40010400
 80004c4:	20000024 	.word	0x20000024

080004c8 <get_pin>:
//----------------------------
//include
//-----------------------------
#include "Stm32f103x8_gpio_drivers.h"
//-----------------------------
uint8_t get_pin(uint16_t Pin_Number){
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
	switch (Pin_Number)
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	2b80      	cmp	r3, #128	; 0x80
 80004d6:	d042      	beq.n	800055e <get_pin+0x96>
 80004d8:	2b80      	cmp	r3, #128	; 0x80
 80004da:	dc11      	bgt.n	8000500 <get_pin+0x38>
 80004dc:	2b08      	cmp	r3, #8
 80004de:	d036      	beq.n	800054e <get_pin+0x86>
 80004e0:	2b08      	cmp	r3, #8
 80004e2:	dc06      	bgt.n	80004f2 <get_pin+0x2a>
 80004e4:	2b02      	cmp	r3, #2
 80004e6:	d02e      	beq.n	8000546 <get_pin+0x7e>
 80004e8:	2b04      	cmp	r3, #4
 80004ea:	d02e      	beq.n	800054a <get_pin+0x82>
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d028      	beq.n	8000542 <get_pin+0x7a>
 80004f0:	e047      	b.n	8000582 <get_pin+0xba>
 80004f2:	2b20      	cmp	r3, #32
 80004f4:	d02f      	beq.n	8000556 <get_pin+0x8e>
 80004f6:	2b40      	cmp	r3, #64	; 0x40
 80004f8:	d02f      	beq.n	800055a <get_pin+0x92>
 80004fa:	2b10      	cmp	r3, #16
 80004fc:	d029      	beq.n	8000552 <get_pin+0x8a>
 80004fe:	e040      	b.n	8000582 <get_pin+0xba>
 8000500:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000504:	d033      	beq.n	800056e <get_pin+0xa6>
 8000506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800050a:	dc09      	bgt.n	8000520 <get_pin+0x58>
 800050c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000510:	d029      	beq.n	8000566 <get_pin+0x9e>
 8000512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000516:	d028      	beq.n	800056a <get_pin+0xa2>
 8000518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800051c:	d021      	beq.n	8000562 <get_pin+0x9a>
 800051e:	e030      	b.n	8000582 <get_pin+0xba>
 8000520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000524:	d027      	beq.n	8000576 <get_pin+0xae>
 8000526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800052a:	dc03      	bgt.n	8000534 <get_pin+0x6c>
 800052c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000530:	d01f      	beq.n	8000572 <get_pin+0xaa>
 8000532:	e026      	b.n	8000582 <get_pin+0xba>
 8000534:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000538:	d01f      	beq.n	800057a <get_pin+0xb2>
 800053a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800053e:	d01e      	beq.n	800057e <get_pin+0xb6>
 8000540:	e01f      	b.n	8000582 <get_pin+0xba>
		{
		//from pin 0 t0 7 CRL
		case GPIO_PIN_0:
			return 0 ;
 8000542:	2300      	movs	r3, #0
 8000544:	e01d      	b.n	8000582 <get_pin+0xba>
			break ;
		case GPIO_PIN_1:
			return 4 ;
 8000546:	2304      	movs	r3, #4
 8000548:	e01b      	b.n	8000582 <get_pin+0xba>
			break ;
		case GPIO_PIN_2:
			return 8 ;
 800054a:	2308      	movs	r3, #8
 800054c:	e019      	b.n	8000582 <get_pin+0xba>
			break ;
		case GPIO_PIN_3:
			return 12 ;
 800054e:	230c      	movs	r3, #12
 8000550:	e017      	b.n	8000582 <get_pin+0xba>
			break ;

		case GPIO_PIN_4:
			return 16 ;
 8000552:	2310      	movs	r3, #16
 8000554:	e015      	b.n	8000582 <get_pin+0xba>
			break ;

		case GPIO_PIN_5:
			return 20 ;
 8000556:	2314      	movs	r3, #20
 8000558:	e013      	b.n	8000582 <get_pin+0xba>
			break ;

		case GPIO_PIN_6:
			return 24 ;
 800055a:	2318      	movs	r3, #24
 800055c:	e011      	b.n	8000582 <get_pin+0xba>
			break ;

		case GPIO_PIN_7:
			return 28 ;
 800055e:	231c      	movs	r3, #28
 8000560:	e00f      	b.n	8000582 <get_pin+0xba>
			break ;

			//from pin 8 t0 15 CRH
		case GPIO_PIN_8:
			return 0 ;
 8000562:	2300      	movs	r3, #0
 8000564:	e00d      	b.n	8000582 <get_pin+0xba>
			break ;
		case GPIO_PIN_9:
			return 4 ;
 8000566:	2304      	movs	r3, #4
 8000568:	e00b      	b.n	8000582 <get_pin+0xba>
			break ;

		case GPIO_PIN_10:
			return 8 ;
 800056a:	2308      	movs	r3, #8
 800056c:	e009      	b.n	8000582 <get_pin+0xba>
			break ;

		case GPIO_PIN_11:
			return 12 ;
 800056e:	230c      	movs	r3, #12
 8000570:	e007      	b.n	8000582 <get_pin+0xba>
			break ;

		case GPIO_PIN_12:
			return 16 ;
 8000572:	2310      	movs	r3, #16
 8000574:	e005      	b.n	8000582 <get_pin+0xba>
			break ;


		case GPIO_PIN_13:
			return 20 ;
 8000576:	2314      	movs	r3, #20
 8000578:	e003      	b.n	8000582 <get_pin+0xba>
			break ;

		case GPIO_PIN_14:
			return 24 ;
 800057a:	2318      	movs	r3, #24
 800057c:	e001      	b.n	8000582 <get_pin+0xba>
			break ;

		case GPIO_PIN_15:
			return 28 ;
 800057e:	231c      	movs	r3, #28
 8000580:	e7ff      	b.n	8000582 <get_pin+0xba>



		}

}
 8000582:	4618      	mov	r0, r3
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <GPIOx_init>:
* @param [in]    -GPIOx: where x can be (A..E depending on device used) to select the GPIO peripheral
* @param [out]   -GPIO_conf pointer to a GPIO PinConfig t structure that contains the configuration information for the specified GPIO PIN
* @retval        -non
* Note           -Stm32F103C6 MCU has GPIO A, B, C,D, E Modules But LQFP48 Package has only GPIO A, B, PART of C/D exported as external PINS from MCU
*/
void GPIOx_init (typedef_GPIO* GPIOx,GPIO_Pinconfige_t* GPIO_conf){
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
	uint32_t* config=NULL;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
	config=(GPIO_conf->Pin_Number)>GPIO_PIN_8?&GPIOx->CRH:&GPIOx->CRL;
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80005a2:	d902      	bls.n	80005aa <GPIOx_init+0x1e>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3304      	adds	r3, #4
 80005a8:	e000      	b.n	80005ac <GPIOx_init+0x20>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	60bb      	str	r3, [r7, #8]
	uint8_t pinVal =0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	73fb      	strb	r3, [r7, #15]
	*(config) &= (~(0xf <<get_pin(GPIO_conf->Pin_Number)));
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	881b      	ldrh	r3, [r3, #0]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f7ff ff86 	bl	80004c8 <get_pin>
 80005bc:	4603      	mov	r3, r0
 80005be:	461a      	mov	r2, r3
 80005c0:	230f      	movs	r3, #15
 80005c2:	4093      	lsls	r3, r2
 80005c4:	43da      	mvns	r2, r3
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	401a      	ands	r2, r3
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	601a      	str	r2, [r3, #0]



	if(GPIO_conf->Mode==GPIO_MODE_OUTPUT_PP||GPIO_conf->Mode==GPIO_MODE_OUTPUT_OD||GPIO_conf->Mode==GPIO_MODE_OUTPUT_AF_PP||GPIO_conf->Mode==GPIO_MODE_OUTPUT_AF_OD){
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	789b      	ldrb	r3, [r3, #2]
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	d00b      	beq.n	80005f0 <GPIOx_init+0x64>
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	789b      	ldrb	r3, [r3, #2]
 80005dc:	2b05      	cmp	r3, #5
 80005de:	d007      	beq.n	80005f0 <GPIOx_init+0x64>
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	789b      	ldrb	r3, [r3, #2]
 80005e4:	2b06      	cmp	r3, #6
 80005e6:	d003      	beq.n	80005f0 <GPIOx_init+0x64>
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	789b      	ldrb	r3, [r3, #2]
 80005ec:	2b07      	cmp	r3, #7
 80005ee:	d10e      	bne.n	800060e <GPIOx_init+0x82>
		pinVal= (((GPIO_conf->Mode -4)<<2) | (GPIO_conf->Speed) & 0x0f);
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	789b      	ldrb	r3, [r3, #2]
 80005f4:	3b04      	subs	r3, #4
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	b25a      	sxtb	r2, r3
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	78db      	ldrb	r3, [r3, #3]
 80005fe:	b25b      	sxtb	r3, r3
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	b25b      	sxtb	r3, r3
 8000606:	4313      	orrs	r3, r2
 8000608:	b25b      	sxtb	r3, r3
 800060a:	73fb      	strb	r3, [r7, #15]
 800060c:	e02a      	b.n	8000664 <GPIOx_init+0xd8>


	}else{


		if(GPIO_conf->Mode==GPIO_MODE_ANALOG||GPIO_conf->Mode==GPIO_MODE_INPUT_FLO){
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	789b      	ldrb	r3, [r3, #2]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d003      	beq.n	800061e <GPIOx_init+0x92>
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	789b      	ldrb	r3, [r3, #2]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d107      	bne.n	800062e <GPIOx_init+0xa2>
			pinVal=(((GPIO_conf->Mode<<2)|0x00)& 0x0f);
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	789b      	ldrb	r3, [r3, #2]
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	b2db      	uxtb	r3, r3
 8000626:	f003 030f 	and.w	r3, r3, #15
 800062a:	73fb      	strb	r3, [r7, #15]
 800062c:	e01a      	b.n	8000664 <GPIOx_init+0xd8>



		}
		else if (GPIO_conf->Mode == GPIO_MODE_AF_INPUT) // consider it floating input
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	789b      	ldrb	r3, [r3, #2]
 8000632:	2b08      	cmp	r3, #8
 8000634:	d102      	bne.n	800063c <GPIOx_init+0xb0>
		{
			pinVal = ((((GPIO_MODE_INPUT_FLO)<<2) | 0x0) & 0xf );
 8000636:	2304      	movs	r3, #4
 8000638:	73fb      	strb	r3, [r7, #15]
 800063a:	e013      	b.n	8000664 <GPIOx_init+0xd8>
		}

		//in case of PULL UP & PULL DOWN
		else
		{
			pinVal = ((((GPIO_MODE_INPUT_PU)<<2) | 0x0) & 0xf );
 800063c:	2308      	movs	r3, #8
 800063e:	73fb      	strb	r3, [r7, #15]
			if(GPIO_conf->Mode == GPIO_MODE_INPUT_PU)
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	789b      	ldrb	r3, [r3, #2]
 8000644:	2b02      	cmp	r3, #2
 8000646:	d105      	bne.n	8000654 <GPIOx_init+0xc8>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR = GPIO_conf->Pin_Number;
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	e007      	b.n	8000664 <GPIOx_init+0xd8>

			}
			else
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR &= ~(GPIO_conf->Pin_Number);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	683a      	ldr	r2, [r7, #0]
 800065a:	8812      	ldrh	r2, [r2, #0]
 800065c:	43d2      	mvns	r2, r2
 800065e:	401a      	ands	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	60da      	str	r2, [r3, #12]
			}

		}
	}
	(*config) |= ((pinVal)<< get_pin(GPIO_conf->Pin_Number));
 8000664:	7bfc      	ldrb	r4, [r7, #15]
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff ff2c 	bl	80004c8 <get_pin>
 8000670:	4603      	mov	r3, r0
 8000672:	fa04 f203 	lsl.w	r2, r4, r3
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	431a      	orrs	r2, r3
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	601a      	str	r2, [r3, #0]

}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	bd90      	pop	{r4, r7, pc}

08000688 <GPIOx_READ_PIN>:
 * @retval 		    -the input pin value (two values based on @ref GPIO_PIN_state )
 * Note			    -none
 */

//READ
uint8_t GPIOx_READ_PIN (typedef_GPIO* GPIOx,uint16_t PIN_NUM){
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	807b      	strh	r3, [r7, #2]

	  uint8_t BitStatus;

		if ((GPIOx->IDR & PIN_NUM) != (uint32_t)GPIO_PIN_RESET)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	689a      	ldr	r2, [r3, #8]
 8000698:	887b      	ldrh	r3, [r7, #2]
 800069a:	4013      	ands	r3, r2
 800069c:	2b00      	cmp	r3, #0
 800069e:	d002      	beq.n	80006a6 <GPIOx_READ_PIN+0x1e>
		{
			BitStatus = GPIO_PIN_SET;
 80006a0:	2301      	movs	r3, #1
 80006a2:	73fb      	strb	r3, [r7, #15]
 80006a4:	e001      	b.n	80006aa <GPIOx_READ_PIN+0x22>
		}
		else
		{
			BitStatus = GPIO_PIN_RESET;
 80006a6:	2300      	movs	r3, #0
 80006a8:	73fb      	strb	r3, [r7, #15]
		}
		return BitStatus;
 80006aa:	7bfb      	ldrb	r3, [r7, #15]

}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr

080006b6 <GPIOx_TOGGELE_PIN>:
 * @param [in] 			-GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @param [in] 			-PinNumber: specifies the port bit to read. Set by @ref GPIO_PINS_define
 * @retval 			    -none
 * Note				    -none
*/
void GPIOx_TOGGELE_PIN (typedef_GPIO* GPIOx,uint16_t PIN_NUM){
 80006b6:	b480      	push	{r7}
 80006b8:	b083      	sub	sp, #12
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
 80006be:	460b      	mov	r3, r1
 80006c0:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR^=(PIN_NUM);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	68da      	ldr	r2, [r3, #12]
 80006c6:	887b      	ldrh	r3, [r7, #2]
 80006c8:	405a      	eors	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	60da      	str	r2, [r3, #12]

}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr

080006d8 <SPI1_IRQHandler>:
	*DATA=SPIx->SPI_DR;
}


/* SPI1 global interrupt                          */
void SPI1_IRQHandler (void){
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	/*struct S_IRQ_Source irq_src;
	irq_src.TXE = ((SPI1->SR >> 1) & 1);
	irq_src.RXNE = ((SPI1->SR >> 2) & 1);
	irq_src.ERRI = ((SPI1->SR >> 5) & 1);*/
	SPI_confige->SPI_IRQ_FUNCTION();
 80006dc:	4b02      	ldr	r3, [pc, #8]	; (80006e8 <SPI1_IRQHandler+0x10>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	4798      	blx	r3

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	2000001c 	.word	0x2000001c

080006ec <SPI2_IRQHandler>:
/* SPI2 global interrupt                          */
void SPI2_IRQHandler (void){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	/*struct S_IRQ_Source irq_src;
	irq_src.TXE = ((SPI1->SR >> 1) & 1);
	irq_src.RXNE = ((SPI1->SR >> 2) & 1);
	irq_src.ERRI = ((SPI1->SR >> 5) & 1);*/
	SPI_confige->SPI_IRQ_FUNCTION();
 80006f0:	4b02      	ldr	r3, [pc, #8]	; (80006fc <SPI2_IRQHandler+0x10>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	68db      	ldr	r3, [r3, #12]
 80006f6:	4798      	blx	r3

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	2000001c 	.word	0x2000001c

08000700 <SPI3_IRQHandler>:
/* SPI3 global interrupt                          */
void SPI3_IRQHandler(void){
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	/*struct S_IRQ_Source irq_src;
	irq_src.TXE = ((SPI1->SR >> 1) & 1);
	irq_src.RXNE = ((SPI1->SR >> 2) & 1);
	irq_src.ERRI = ((SPI1->SR >> 5) & 1);*/
	SPI_confige->SPI_IRQ_FUNCTION();
 8000704:	4b02      	ldr	r3, [pc, #8]	; (8000710 <SPI3_IRQHandler+0x10>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	4798      	blx	r3

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	2000001c 	.word	0x2000001c

08000714 <USART1_IRQHandler>:
}



/* USART1 global interrupt                          */
void USART1_IRQHandler (void){
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	USART_confige->IRQ_FUNCTION();
 8000718:	4b02      	ldr	r3, [pc, #8]	; (8000724 <USART1_IRQHandler+0x10>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	691b      	ldr	r3, [r3, #16]
 800071e:	4798      	blx	r3

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000020 	.word	0x20000020

08000728 <USART2_IRQHandler>:
/* USART2 global interrupt                          */
void USART2_IRQHandler (void){
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	USART_confige->IRQ_FUNCTION();
 800072c:	4b02      	ldr	r3, [pc, #8]	; (8000738 <USART2_IRQHandler+0x10>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	691b      	ldr	r3, [r3, #16]
 8000732:	4798      	blx	r3

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000020 	.word	0x20000020

0800073c <USART3_IRQHandler>:
/* USART3 global interrupt                          */
void USART3_IRQHandler(void){
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	USART_confige->IRQ_FUNCTION();
 8000740:	4b02      	ldr	r3, [pc, #8]	; (800074c <USART3_IRQHandler+0x10>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	691b      	ldr	r3, [r3, #16]
 8000746:	4798      	blx	r3

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000020 	.word	0x20000020

08000750 <__libc_init_array>:
 8000750:	b570      	push	{r4, r5, r6, lr}
 8000752:	2500      	movs	r5, #0
 8000754:	4e0c      	ldr	r6, [pc, #48]	; (8000788 <__libc_init_array+0x38>)
 8000756:	4c0d      	ldr	r4, [pc, #52]	; (800078c <__libc_init_array+0x3c>)
 8000758:	1ba4      	subs	r4, r4, r6
 800075a:	10a4      	asrs	r4, r4, #2
 800075c:	42a5      	cmp	r5, r4
 800075e:	d109      	bne.n	8000774 <__libc_init_array+0x24>
 8000760:	f000 f81a 	bl	8000798 <_init>
 8000764:	2500      	movs	r5, #0
 8000766:	4e0a      	ldr	r6, [pc, #40]	; (8000790 <__libc_init_array+0x40>)
 8000768:	4c0a      	ldr	r4, [pc, #40]	; (8000794 <__libc_init_array+0x44>)
 800076a:	1ba4      	subs	r4, r4, r6
 800076c:	10a4      	asrs	r4, r4, #2
 800076e:	42a5      	cmp	r5, r4
 8000770:	d105      	bne.n	800077e <__libc_init_array+0x2e>
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000778:	4798      	blx	r3
 800077a:	3501      	adds	r5, #1
 800077c:	e7ee      	b.n	800075c <__libc_init_array+0xc>
 800077e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000782:	4798      	blx	r3
 8000784:	3501      	adds	r5, #1
 8000786:	e7f2      	b.n	800076e <__libc_init_array+0x1e>
 8000788:	080007b0 	.word	0x080007b0
 800078c:	080007b0 	.word	0x080007b0
 8000790:	080007b0 	.word	0x080007b0
 8000794:	080007b4 	.word	0x080007b4

08000798 <_init>:
 8000798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800079a:	bf00      	nop
 800079c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800079e:	bc08      	pop	{r3}
 80007a0:	469e      	mov	lr, r3
 80007a2:	4770      	bx	lr

080007a4 <_fini>:
 80007a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007a6:	bf00      	nop
 80007a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007aa:	bc08      	pop	{r3}
 80007ac:	469e      	mov	lr, r3
 80007ae:	4770      	bx	lr
