
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e98  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000fc8  08000fc8  00010fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fd8  08000fd8  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000fd8  08000fd8  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fd8  08000fd8  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fd8  08000fd8  00010fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fdc  08000fdc  00010fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000020  08001000  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08001000  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005abb  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000e71  00000000  00000000  00025b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000f80  00000000  00000000  00026975  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000288  00000000  00000000  000278f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000210  00000000  00000000  00027b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00003372  00000000  00000000  00027d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000031d2  00000000  00000000  0002b102  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000bd74  00000000  00000000  0002e2d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003a048  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000081c  00000000  00000000  0003a0c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000fb0 	.word	0x08000fb0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000fb0 	.word	0x08000fb0

08000170 <Keypad_Init>:
#include "../include/Keypad.h"
int Row []={R0,R1,R2,R3};
int Culom []={C0,C1,C2,C3};
GPIO_Pinconfige_t keypad_confg;

void Keypad_Init (void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	keypad_confg.Pin_Number=R0;
 8000174:	4b31      	ldr	r3, [pc, #196]	; (800023c <Keypad_Init+0xcc>)
 8000176:	2201      	movs	r2, #1
 8000178:	801a      	strh	r2, [r3, #0]
	keypad_confg.Mode=GPIO_MODE_INPUT_PU;
 800017a:	4b30      	ldr	r3, [pc, #192]	; (800023c <Keypad_Init+0xcc>)
 800017c:	2202      	movs	r2, #2
 800017e:	709a      	strb	r2, [r3, #2]
	//keypad_confg.Speed=GPIO_MODE_speed_10_MHz;
	GPIOx_init(Keypad, &keypad_confg);
 8000180:	492e      	ldr	r1, [pc, #184]	; (800023c <Keypad_Init+0xcc>)
 8000182:	482f      	ldr	r0, [pc, #188]	; (8000240 <Keypad_Init+0xd0>)
 8000184:	f000 fdf2 	bl	8000d6c <GPIOx_init>
	//************************************
	keypad_confg.Pin_Number=R1;
 8000188:	4b2c      	ldr	r3, [pc, #176]	; (800023c <Keypad_Init+0xcc>)
 800018a:	2202      	movs	r2, #2
 800018c:	801a      	strh	r2, [r3, #0]
	keypad_confg.Mode=GPIO_MODE_INPUT_PU;
 800018e:	4b2b      	ldr	r3, [pc, #172]	; (800023c <Keypad_Init+0xcc>)
 8000190:	2202      	movs	r2, #2
 8000192:	709a      	strb	r2, [r3, #2]
    //keypad_confg.Speed=GPIO_MODE_speed_10_MHz;
	GPIOx_init(Keypad, &keypad_confg);
 8000194:	4929      	ldr	r1, [pc, #164]	; (800023c <Keypad_Init+0xcc>)
 8000196:	482a      	ldr	r0, [pc, #168]	; (8000240 <Keypad_Init+0xd0>)
 8000198:	f000 fde8 	bl	8000d6c <GPIOx_init>
	//************************************
	keypad_confg.Pin_Number=R2;
 800019c:	4b27      	ldr	r3, [pc, #156]	; (800023c <Keypad_Init+0xcc>)
 800019e:	2208      	movs	r2, #8
 80001a0:	801a      	strh	r2, [r3, #0]
	keypad_confg.Mode=GPIO_MODE_INPUT_PU;
 80001a2:	4b26      	ldr	r3, [pc, #152]	; (800023c <Keypad_Init+0xcc>)
 80001a4:	2202      	movs	r2, #2
 80001a6:	709a      	strb	r2, [r3, #2]
	//keypad_confg.Speed=GPIO_MODE_speed_10_MHz;
	GPIOx_init(Keypad, &keypad_confg);
 80001a8:	4924      	ldr	r1, [pc, #144]	; (800023c <Keypad_Init+0xcc>)
 80001aa:	4825      	ldr	r0, [pc, #148]	; (8000240 <Keypad_Init+0xd0>)
 80001ac:	f000 fdde 	bl	8000d6c <GPIOx_init>
	//************************************
	keypad_confg.Pin_Number=R3;
 80001b0:	4b22      	ldr	r3, [pc, #136]	; (800023c <Keypad_Init+0xcc>)
 80001b2:	2210      	movs	r2, #16
 80001b4:	801a      	strh	r2, [r3, #0]
	keypad_confg.Mode=GPIO_MODE_INPUT_PU;
 80001b6:	4b21      	ldr	r3, [pc, #132]	; (800023c <Keypad_Init+0xcc>)
 80001b8:	2202      	movs	r2, #2
 80001ba:	709a      	strb	r2, [r3, #2]
	//keypad_confg.Speed=GPIO_MODE_speed_10_MHz;
	GPIOx_init(Keypad, &keypad_confg);
 80001bc:	491f      	ldr	r1, [pc, #124]	; (800023c <Keypad_Init+0xcc>)
 80001be:	4820      	ldr	r0, [pc, #128]	; (8000240 <Keypad_Init+0xd0>)
 80001c0:	f000 fdd4 	bl	8000d6c <GPIOx_init>
	//************************************

	//Keypad_control &= ~((1<<R0)|(1<<R1)|(1<<R2)|(1<<R3));
	keypad_confg.Pin_Number=C0;
 80001c4:	4b1d      	ldr	r3, [pc, #116]	; (800023c <Keypad_Init+0xcc>)
 80001c6:	2220      	movs	r2, #32
 80001c8:	801a      	strh	r2, [r3, #0]
	keypad_confg.Mode=GPIO_MODE_OUTPUT_PP;
 80001ca:	4b1c      	ldr	r3, [pc, #112]	; (800023c <Keypad_Init+0xcc>)
 80001cc:	2204      	movs	r2, #4
 80001ce:	709a      	strb	r2, [r3, #2]
	keypad_confg.Speed=GPIO_MODE_speed_10_MHz;
 80001d0:	4b1a      	ldr	r3, [pc, #104]	; (800023c <Keypad_Init+0xcc>)
 80001d2:	2201      	movs	r2, #1
 80001d4:	70da      	strb	r2, [r3, #3]
	GPIOx_init(Keypad, &keypad_confg);
 80001d6:	4919      	ldr	r1, [pc, #100]	; (800023c <Keypad_Init+0xcc>)
 80001d8:	4819      	ldr	r0, [pc, #100]	; (8000240 <Keypad_Init+0xd0>)
 80001da:	f000 fdc7 	bl	8000d6c <GPIOx_init>
	//************************************
	keypad_confg.Pin_Number=C1;
 80001de:	4b17      	ldr	r3, [pc, #92]	; (800023c <Keypad_Init+0xcc>)
 80001e0:	2240      	movs	r2, #64	; 0x40
 80001e2:	801a      	strh	r2, [r3, #0]
	keypad_confg.Mode=GPIO_MODE_OUTPUT_PP;
 80001e4:	4b15      	ldr	r3, [pc, #84]	; (800023c <Keypad_Init+0xcc>)
 80001e6:	2204      	movs	r2, #4
 80001e8:	709a      	strb	r2, [r3, #2]
	keypad_confg.Speed=GPIO_MODE_speed_10_MHz;
 80001ea:	4b14      	ldr	r3, [pc, #80]	; (800023c <Keypad_Init+0xcc>)
 80001ec:	2201      	movs	r2, #1
 80001ee:	70da      	strb	r2, [r3, #3]
	GPIOx_init(Keypad, &keypad_confg);
 80001f0:	4912      	ldr	r1, [pc, #72]	; (800023c <Keypad_Init+0xcc>)
 80001f2:	4813      	ldr	r0, [pc, #76]	; (8000240 <Keypad_Init+0xd0>)
 80001f4:	f000 fdba 	bl	8000d6c <GPIOx_init>
	//************************************
	keypad_confg.Pin_Number=C2;
 80001f8:	4b10      	ldr	r3, [pc, #64]	; (800023c <Keypad_Init+0xcc>)
 80001fa:	2280      	movs	r2, #128	; 0x80
 80001fc:	801a      	strh	r2, [r3, #0]
	keypad_confg.Mode=GPIO_MODE_OUTPUT_PP;
 80001fe:	4b0f      	ldr	r3, [pc, #60]	; (800023c <Keypad_Init+0xcc>)
 8000200:	2204      	movs	r2, #4
 8000202:	709a      	strb	r2, [r3, #2]
	keypad_confg.Speed=GPIO_MODE_speed_10_MHz;
 8000204:	4b0d      	ldr	r3, [pc, #52]	; (800023c <Keypad_Init+0xcc>)
 8000206:	2201      	movs	r2, #1
 8000208:	70da      	strb	r2, [r3, #3]
	GPIOx_init(Keypad, &keypad_confg);
 800020a:	490c      	ldr	r1, [pc, #48]	; (800023c <Keypad_Init+0xcc>)
 800020c:	480c      	ldr	r0, [pc, #48]	; (8000240 <Keypad_Init+0xd0>)
 800020e:	f000 fdad 	bl	8000d6c <GPIOx_init>
	//************************************
	keypad_confg.Pin_Number=C3;
 8000212:	4b0a      	ldr	r3, [pc, #40]	; (800023c <Keypad_Init+0xcc>)
 8000214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000218:	801a      	strh	r2, [r3, #0]
	keypad_confg.Mode=GPIO_MODE_OUTPUT_PP;
 800021a:	4b08      	ldr	r3, [pc, #32]	; (800023c <Keypad_Init+0xcc>)
 800021c:	2204      	movs	r2, #4
 800021e:	709a      	strb	r2, [r3, #2]
	keypad_confg.Speed=GPIO_MODE_speed_10_MHz;
 8000220:	4b06      	ldr	r3, [pc, #24]	; (800023c <Keypad_Init+0xcc>)
 8000222:	2201      	movs	r2, #1
 8000224:	70da      	strb	r2, [r3, #3]
	GPIOx_init(Keypad, &keypad_confg);
 8000226:	4905      	ldr	r1, [pc, #20]	; (800023c <Keypad_Init+0xcc>)
 8000228:	4805      	ldr	r0, [pc, #20]	; (8000240 <Keypad_Init+0xd0>)
 800022a:	f000 fd9f 	bl	8000d6c <GPIOx_init>
	GPIOx_WRITE_PIN(Keypad, R3, GPIO_PIN_SET);
	GPIOx_WRITE_PIN(Keypad, C0, GPIO_PIN_SET);
	GPIOx_WRITE_PIN(Keypad, C1, GPIO_PIN_SET);
	GPIOx_WRITE_PIN(Keypad, C2, GPIO_PIN_SET);
	GPIOx_WRITE_PIN(Keypad, C3, GPIO_PIN_SET);*/
	GPIOx_WRITE_PORT(Keypad, 0xFF);
 800022e:	21ff      	movs	r1, #255	; 0xff
 8000230:	4803      	ldr	r0, [pc, #12]	; (8000240 <Keypad_Init+0xd0>)
 8000232:	f000 fe3d 	bl	8000eb0 <GPIOx_WRITE_PORT>
	//Keypad=0xFF;
}
 8000236:	bf00      	nop
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	20000044 	.word	0x20000044
 8000240:	40010c00 	.word	0x40010c00

08000244 <Keypad_Result>:
unsigned char Keypad_Result (void){
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0

	int i,j;
	for (i=0;i<4;i++)
 800024a:	2300      	movs	r3, #0
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	e0fe      	b.n	800044e <Keypad_Result+0x20a>
	{
		GPIOx_WRITE_PIN(Keypad, Culom[0], GPIO_PIN_SET);
 8000250:	4b83      	ldr	r3, [pc, #524]	; (8000460 <Keypad_Result+0x21c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	b29b      	uxth	r3, r3
 8000256:	2201      	movs	r2, #1
 8000258:	4619      	mov	r1, r3
 800025a:	4882      	ldr	r0, [pc, #520]	; (8000464 <Keypad_Result+0x220>)
 800025c:	f000 fe11 	bl	8000e82 <GPIOx_WRITE_PIN>
		GPIOx_WRITE_PIN(Keypad, Culom[1], GPIO_PIN_SET);
 8000260:	4b7f      	ldr	r3, [pc, #508]	; (8000460 <Keypad_Result+0x21c>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	b29b      	uxth	r3, r3
 8000266:	2201      	movs	r2, #1
 8000268:	4619      	mov	r1, r3
 800026a:	487e      	ldr	r0, [pc, #504]	; (8000464 <Keypad_Result+0x220>)
 800026c:	f000 fe09 	bl	8000e82 <GPIOx_WRITE_PIN>
		GPIOx_WRITE_PIN(Keypad, Culom[2], GPIO_PIN_SET);
 8000270:	4b7b      	ldr	r3, [pc, #492]	; (8000460 <Keypad_Result+0x21c>)
 8000272:	689b      	ldr	r3, [r3, #8]
 8000274:	b29b      	uxth	r3, r3
 8000276:	2201      	movs	r2, #1
 8000278:	4619      	mov	r1, r3
 800027a:	487a      	ldr	r0, [pc, #488]	; (8000464 <Keypad_Result+0x220>)
 800027c:	f000 fe01 	bl	8000e82 <GPIOx_WRITE_PIN>
		GPIOx_WRITE_PIN(Keypad, Culom[3], GPIO_PIN_SET);
 8000280:	4b77      	ldr	r3, [pc, #476]	; (8000460 <Keypad_Result+0x21c>)
 8000282:	68db      	ldr	r3, [r3, #12]
 8000284:	b29b      	uxth	r3, r3
 8000286:	2201      	movs	r2, #1
 8000288:	4619      	mov	r1, r3
 800028a:	4876      	ldr	r0, [pc, #472]	; (8000464 <Keypad_Result+0x220>)
 800028c:	f000 fdf9 	bl	8000e82 <GPIOx_WRITE_PIN>
		//Keypad |= ((1<<Culom[0]) | (1<<Culom[1]) | (1<<Culom[2]) | (1<<Culom[3]));
		GPIOx_WRITE_PIN(Keypad,Culom[i], GPIO_PIN_RESET);
 8000290:	4a73      	ldr	r2, [pc, #460]	; (8000460 <Keypad_Result+0x21c>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000298:	b29b      	uxth	r3, r3
 800029a:	2200      	movs	r2, #0
 800029c:	4619      	mov	r1, r3
 800029e:	4871      	ldr	r0, [pc, #452]	; (8000464 <Keypad_Result+0x220>)
 80002a0:	f000 fdef 	bl	8000e82 <GPIOx_WRITE_PIN>
		//GPIOx_WRITE_PORT(Keypad, Culom[i]);
		//Keypad &=~(1<<Culom[i]);
		//!(GPIOx_READ_PORT(Keypad)& Row[j])___condetion
		for(j = 0; j < 4; j++){
 80002a4:	2300      	movs	r3, #0
 80002a6:	603b      	str	r3, [r7, #0]
 80002a8:	e0ca      	b.n	8000440 <Keypad_Result+0x1fc>

			       // UNder is option becouse protous has problem
			        GPIOx_WRITE_PIN(Keypad, Culom[0], GPIO_PIN_SET);
 80002aa:	4b6d      	ldr	r3, [pc, #436]	; (8000460 <Keypad_Result+0x21c>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	b29b      	uxth	r3, r3
 80002b0:	2201      	movs	r2, #1
 80002b2:	4619      	mov	r1, r3
 80002b4:	486b      	ldr	r0, [pc, #428]	; (8000464 <Keypad_Result+0x220>)
 80002b6:	f000 fde4 	bl	8000e82 <GPIOx_WRITE_PIN>
					GPIOx_WRITE_PIN(Keypad, Culom[1], GPIO_PIN_SET);
 80002ba:	4b69      	ldr	r3, [pc, #420]	; (8000460 <Keypad_Result+0x21c>)
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	b29b      	uxth	r3, r3
 80002c0:	2201      	movs	r2, #1
 80002c2:	4619      	mov	r1, r3
 80002c4:	4867      	ldr	r0, [pc, #412]	; (8000464 <Keypad_Result+0x220>)
 80002c6:	f000 fddc 	bl	8000e82 <GPIOx_WRITE_PIN>
					GPIOx_WRITE_PIN(Keypad, Culom[2], GPIO_PIN_SET);
 80002ca:	4b65      	ldr	r3, [pc, #404]	; (8000460 <Keypad_Result+0x21c>)
 80002cc:	689b      	ldr	r3, [r3, #8]
 80002ce:	b29b      	uxth	r3, r3
 80002d0:	2201      	movs	r2, #1
 80002d2:	4619      	mov	r1, r3
 80002d4:	4863      	ldr	r0, [pc, #396]	; (8000464 <Keypad_Result+0x220>)
 80002d6:	f000 fdd4 	bl	8000e82 <GPIOx_WRITE_PIN>
					GPIOx_WRITE_PIN(Keypad, Culom[3], GPIO_PIN_SET);
 80002da:	4b61      	ldr	r3, [pc, #388]	; (8000460 <Keypad_Result+0x21c>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	b29b      	uxth	r3, r3
 80002e0:	2201      	movs	r2, #1
 80002e2:	4619      	mov	r1, r3
 80002e4:	485f      	ldr	r0, [pc, #380]	; (8000464 <Keypad_Result+0x220>)
 80002e6:	f000 fdcc 	bl	8000e82 <GPIOx_WRITE_PIN>
					GPIOx_WRITE_PIN(Keypad, Row[0], GPIO_PIN_SET);
 80002ea:	4b5f      	ldr	r3, [pc, #380]	; (8000468 <Keypad_Result+0x224>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	b29b      	uxth	r3, r3
 80002f0:	2201      	movs	r2, #1
 80002f2:	4619      	mov	r1, r3
 80002f4:	485b      	ldr	r0, [pc, #364]	; (8000464 <Keypad_Result+0x220>)
 80002f6:	f000 fdc4 	bl	8000e82 <GPIOx_WRITE_PIN>
					GPIOx_WRITE_PIN(Keypad, Row[1], GPIO_PIN_SET);
 80002fa:	4b5b      	ldr	r3, [pc, #364]	; (8000468 <Keypad_Result+0x224>)
 80002fc:	685b      	ldr	r3, [r3, #4]
 80002fe:	b29b      	uxth	r3, r3
 8000300:	2201      	movs	r2, #1
 8000302:	4619      	mov	r1, r3
 8000304:	4857      	ldr	r0, [pc, #348]	; (8000464 <Keypad_Result+0x220>)
 8000306:	f000 fdbc 	bl	8000e82 <GPIOx_WRITE_PIN>
					GPIOx_WRITE_PIN(Keypad, Row[2], GPIO_PIN_SET);
 800030a:	4b57      	ldr	r3, [pc, #348]	; (8000468 <Keypad_Result+0x224>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	b29b      	uxth	r3, r3
 8000310:	2201      	movs	r2, #1
 8000312:	4619      	mov	r1, r3
 8000314:	4853      	ldr	r0, [pc, #332]	; (8000464 <Keypad_Result+0x220>)
 8000316:	f000 fdb4 	bl	8000e82 <GPIOx_WRITE_PIN>
					GPIOx_WRITE_PIN(Keypad, Row[3], GPIO_PIN_SET);
 800031a:	4b53      	ldr	r3, [pc, #332]	; (8000468 <Keypad_Result+0x224>)
 800031c:	68db      	ldr	r3, [r3, #12]
 800031e:	b29b      	uxth	r3, r3
 8000320:	2201      	movs	r2, #1
 8000322:	4619      	mov	r1, r3
 8000324:	484f      	ldr	r0, [pc, #316]	; (8000464 <Keypad_Result+0x220>)
 8000326:	f000 fdac 	bl	8000e82 <GPIOx_WRITE_PIN>
					//***************************************************
					//Keypad |= ((1<<Culom[0]) | (1<<Culom[1]) | (1<<Culom[2]) | (1<<Culom[3]));
					GPIOx_WRITE_PIN(Keypad,Culom[i], GPIO_PIN_RESET);
 800032a:	4a4d      	ldr	r2, [pc, #308]	; (8000460 <Keypad_Result+0x21c>)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000332:	b29b      	uxth	r3, r3
 8000334:	2200      	movs	r2, #0
 8000336:	4619      	mov	r1, r3
 8000338:	484a      	ldr	r0, [pc, #296]	; (8000464 <Keypad_Result+0x220>)
 800033a:	f000 fda2 	bl	8000e82 <GPIOx_WRITE_PIN>
			if (!(GPIOx_READ_PORT(Keypad)& (Row[j])))
 800033e:	4849      	ldr	r0, [pc, #292]	; (8000464 <Keypad_Result+0x220>)
 8000340:	f000 fd92 	bl	8000e68 <GPIOx_READ_PORT>
 8000344:	4603      	mov	r3, r0
 8000346:	4619      	mov	r1, r3
 8000348:	4a47      	ldr	r2, [pc, #284]	; (8000468 <Keypad_Result+0x224>)
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000350:	400b      	ands	r3, r1
 8000352:	2b00      	cmp	r3, #0
 8000354:	d171      	bne.n	800043a <Keypad_Result+0x1f6>
			{
				while(!(GPIOx_READ_PORT(Keypad)& (Row[j])));
 8000356:	bf00      	nop
 8000358:	4842      	ldr	r0, [pc, #264]	; (8000464 <Keypad_Result+0x220>)
 800035a:	f000 fd85 	bl	8000e68 <GPIOx_READ_PORT>
 800035e:	4603      	mov	r3, r0
 8000360:	4619      	mov	r1, r3
 8000362:	4a41      	ldr	r2, [pc, #260]	; (8000468 <Keypad_Result+0x224>)
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800036a:	400b      	ands	r3, r1
 800036c:	2b00      	cmp	r3, #0
 800036e:	d0f3      	beq.n	8000358 <Keypad_Result+0x114>
				switch(i){
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2b03      	cmp	r3, #3
 8000374:	d861      	bhi.n	800043a <Keypad_Result+0x1f6>
 8000376:	a201      	add	r2, pc, #4	; (adr r2, 800037c <Keypad_Result+0x138>)
 8000378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800037c:	0800038d 	.word	0x0800038d
 8000380:	080003b5 	.word	0x080003b5
 8000384:	080003dd 	.word	0x080003dd
 8000388:	08000405 	.word	0x08000405
				case (0):
											if (j == 0) return '7';
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d101      	bne.n	8000396 <Keypad_Result+0x152>
 8000392:	2337      	movs	r3, #55	; 0x37
 8000394:	e060      	b.n	8000458 <Keypad_Result+0x214>
											else if (j == 1) return '4';
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	2b01      	cmp	r3, #1
 800039a:	d101      	bne.n	80003a0 <Keypad_Result+0x15c>
 800039c:	2334      	movs	r3, #52	; 0x34
 800039e:	e05b      	b.n	8000458 <Keypad_Result+0x214>
											else if (j == 2) return '1';
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	2b02      	cmp	r3, #2
 80003a4:	d101      	bne.n	80003aa <Keypad_Result+0x166>
 80003a6:	2331      	movs	r3, #49	; 0x31
 80003a8:	e056      	b.n	8000458 <Keypad_Result+0x214>
											else if (j == 3) return '?';
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	2b03      	cmp	r3, #3
 80003ae:	d13d      	bne.n	800042c <Keypad_Result+0x1e8>
 80003b0:	233f      	movs	r3, #63	; 0x3f
 80003b2:	e051      	b.n	8000458 <Keypad_Result+0x214>
				break;
				case (1):
											if (j == 0) return '8';
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d101      	bne.n	80003be <Keypad_Result+0x17a>
 80003ba:	2338      	movs	r3, #56	; 0x38
 80003bc:	e04c      	b.n	8000458 <Keypad_Result+0x214>
											else if (j == 1) return '5';
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d101      	bne.n	80003c8 <Keypad_Result+0x184>
 80003c4:	2335      	movs	r3, #53	; 0x35
 80003c6:	e047      	b.n	8000458 <Keypad_Result+0x214>
											else if (j == 2) return '2';
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	2b02      	cmp	r3, #2
 80003cc:	d101      	bne.n	80003d2 <Keypad_Result+0x18e>
 80003ce:	2332      	movs	r3, #50	; 0x32
 80003d0:	e042      	b.n	8000458 <Keypad_Result+0x214>
											else if (j == 3) return '0';
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	2b03      	cmp	r3, #3
 80003d6:	d12b      	bne.n	8000430 <Keypad_Result+0x1ec>
 80003d8:	2330      	movs	r3, #48	; 0x30
 80003da:	e03d      	b.n	8000458 <Keypad_Result+0x214>
				break;
				case (2):
											if (j == 0) return '9';
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d101      	bne.n	80003e6 <Keypad_Result+0x1a2>
 80003e2:	2339      	movs	r3, #57	; 0x39
 80003e4:	e038      	b.n	8000458 <Keypad_Result+0x214>
											else if (j == 1) return '6';
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d101      	bne.n	80003f0 <Keypad_Result+0x1ac>
 80003ec:	2336      	movs	r3, #54	; 0x36
 80003ee:	e033      	b.n	8000458 <Keypad_Result+0x214>
											else if (j == 2) return '3';
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	2b02      	cmp	r3, #2
 80003f4:	d101      	bne.n	80003fa <Keypad_Result+0x1b6>
 80003f6:	2333      	movs	r3, #51	; 0x33
 80003f8:	e02e      	b.n	8000458 <Keypad_Result+0x214>
											else if (j == 3) return '=';
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	2b03      	cmp	r3, #3
 80003fe:	d119      	bne.n	8000434 <Keypad_Result+0x1f0>
 8000400:	233d      	movs	r3, #61	; 0x3d
 8000402:	e029      	b.n	8000458 <Keypad_Result+0x214>
				break;
				case (3):
											if (j == 0) return '/';
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d101      	bne.n	800040e <Keypad_Result+0x1ca>
 800040a:	232f      	movs	r3, #47	; 0x2f
 800040c:	e024      	b.n	8000458 <Keypad_Result+0x214>
											else if (j == 1) return '*';
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d101      	bne.n	8000418 <Keypad_Result+0x1d4>
 8000414:	232a      	movs	r3, #42	; 0x2a
 8000416:	e01f      	b.n	8000458 <Keypad_Result+0x214>
											else if (j == 2) return '-';
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	2b02      	cmp	r3, #2
 800041c:	d101      	bne.n	8000422 <Keypad_Result+0x1de>
 800041e:	232d      	movs	r3, #45	; 0x2d
 8000420:	e01a      	b.n	8000458 <Keypad_Result+0x214>
											else if (j == 3) return '+';
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	2b03      	cmp	r3, #3
 8000426:	d107      	bne.n	8000438 <Keypad_Result+0x1f4>
 8000428:	232b      	movs	r3, #43	; 0x2b
 800042a:	e015      	b.n	8000458 <Keypad_Result+0x214>
				break;
 800042c:	bf00      	nop
 800042e:	e004      	b.n	800043a <Keypad_Result+0x1f6>
				break;
 8000430:	bf00      	nop
 8000432:	e002      	b.n	800043a <Keypad_Result+0x1f6>
				break;
 8000434:	bf00      	nop
 8000436:	e000      	b.n	800043a <Keypad_Result+0x1f6>
				break;
 8000438:	bf00      	nop
		for(j = 0; j < 4; j++){
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	3301      	adds	r3, #1
 800043e:	603b      	str	r3, [r7, #0]
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	2b03      	cmp	r3, #3
 8000444:	f77f af31 	ble.w	80002aa <Keypad_Result+0x66>
	for (i=0;i<4;i++)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	3301      	adds	r3, #1
 800044c:	607b      	str	r3, [r7, #4]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	2b03      	cmp	r3, #3
 8000452:	f77f aefd 	ble.w	8000250 <Keypad_Result+0xc>
				}
			}
		}
	}
	return 'A';
 8000456:	2341      	movs	r3, #65	; 0x41

}
 8000458:	4618      	mov	r0, r3
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20000010 	.word	0x20000010
 8000464:	40010c00 	.word	0x40010c00
 8000468:	20000000 	.word	0x20000000

0800046c <my_wait>:
	Kick();
	Dir_lcd_port=0xFF;
	lcd_control &= ~(1<<RW_switch);

}*/
void my_wait(int time){
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	int i,j;
	for(i=0;i<time;i++){
 8000474:	2300      	movs	r3, #0
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	e00b      	b.n	8000492 <my_wait+0x26>
		for(j=0;j<255;j++);
 800047a:	2300      	movs	r3, #0
 800047c:	60bb      	str	r3, [r7, #8]
 800047e:	e002      	b.n	8000486 <my_wait+0x1a>
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	3301      	adds	r3, #1
 8000484:	60bb      	str	r3, [r7, #8]
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	2bfe      	cmp	r3, #254	; 0xfe
 800048a:	ddf9      	ble.n	8000480 <my_wait+0x14>
	for(i=0;i<time;i++){
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	3301      	adds	r3, #1
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	429a      	cmp	r2, r3
 8000498:	dbef      	blt.n	800047a <my_wait+0xe>
	}
}
 800049a:	bf00      	nop
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr

080004a4 <LCD_lcd_kick>:
void LCD_lcd_kick(){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	/*GPIO_Config.Pin_Number=E_switch;
	GPIO_Config.Mode=GPIO_MODE_OUTPUT_PP;
	GPIO_Config.Speed=GPIO_MODE_speed_10_MHz;*/
	GPIOx_WRITE_PIN(lcd_port, E_switch, GPIO_PIN_SET);
 80004a8:	2201      	movs	r2, #1
 80004aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ae:	4807      	ldr	r0, [pc, #28]	; (80004cc <LCD_lcd_kick+0x28>)
 80004b0:	f000 fce7 	bl	8000e82 <GPIOx_WRITE_PIN>
	//lcd_control |= (1 << E_switch);
	my_wait(50);
 80004b4:	2032      	movs	r0, #50	; 0x32
 80004b6:	f7ff ffd9 	bl	800046c <my_wait>
	GPIOx_WRITE_PIN(lcd_port, E_switch, GPIO_PIN_RESET);
 80004ba:	2200      	movs	r2, #0
 80004bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <LCD_lcd_kick+0x28>)
 80004c2:	f000 fcde 	bl	8000e82 <GPIOx_WRITE_PIN>
	//lcd_control &= ~(1 << E_switch);
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40010800 	.word	0x40010800

080004d0 <LCD_check_lcd_isbusy>:

void LCD_check_lcd_isbusy(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	GPIO_Config.Pin_Number=GPIO_PIN_0;
 80004d4:	4b66      	ldr	r3, [pc, #408]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_INPUT_FLO;
 80004da:	4b65      	ldr	r3, [pc, #404]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 80004dc:	2201      	movs	r2, #1
 80004de:	709a      	strb	r2, [r3, #2]
	GPIOx_init(lcd_port, &GPIO_Config);
 80004e0:	4963      	ldr	r1, [pc, #396]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 80004e2:	4864      	ldr	r0, [pc, #400]	; (8000674 <LCD_check_lcd_isbusy+0x1a4>)
 80004e4:	f000 fc42 	bl	8000d6c <GPIOx_init>
	//*********************************
	GPIO_Config.Pin_Number=GPIO_PIN_1;
 80004e8:	4b61      	ldr	r3, [pc, #388]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 80004ea:	2202      	movs	r2, #2
 80004ec:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_INPUT_FLO;
 80004ee:	4b60      	ldr	r3, [pc, #384]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	709a      	strb	r2, [r3, #2]
	GPIOx_init(lcd_port, &GPIO_Config);
 80004f4:	495e      	ldr	r1, [pc, #376]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 80004f6:	485f      	ldr	r0, [pc, #380]	; (8000674 <LCD_check_lcd_isbusy+0x1a4>)
 80004f8:	f000 fc38 	bl	8000d6c <GPIOx_init>
	//*********************************
	GPIO_Config.Pin_Number=GPIO_PIN_2;
 80004fc:	4b5c      	ldr	r3, [pc, #368]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 80004fe:	2204      	movs	r2, #4
 8000500:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_INPUT_FLO;
 8000502:	4b5b      	ldr	r3, [pc, #364]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 8000504:	2201      	movs	r2, #1
 8000506:	709a      	strb	r2, [r3, #2]
	GPIOx_init(lcd_port, &GPIO_Config);
 8000508:	4959      	ldr	r1, [pc, #356]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 800050a:	485a      	ldr	r0, [pc, #360]	; (8000674 <LCD_check_lcd_isbusy+0x1a4>)
 800050c:	f000 fc2e 	bl	8000d6c <GPIOx_init>
	//*********************************
	GPIO_Config.Pin_Number=GPIO_PIN_3;
 8000510:	4b57      	ldr	r3, [pc, #348]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 8000512:	2208      	movs	r2, #8
 8000514:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_INPUT_FLO;
 8000516:	4b56      	ldr	r3, [pc, #344]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 8000518:	2201      	movs	r2, #1
 800051a:	709a      	strb	r2, [r3, #2]
	GPIOx_init(lcd_port, &GPIO_Config);
 800051c:	4954      	ldr	r1, [pc, #336]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 800051e:	4855      	ldr	r0, [pc, #340]	; (8000674 <LCD_check_lcd_isbusy+0x1a4>)
 8000520:	f000 fc24 	bl	8000d6c <GPIOx_init>
	//*********************************
	GPIO_Config.Pin_Number=GPIO_PIN_4;
 8000524:	4b52      	ldr	r3, [pc, #328]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 8000526:	2210      	movs	r2, #16
 8000528:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_INPUT_FLO;
 800052a:	4b51      	ldr	r3, [pc, #324]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 800052c:	2201      	movs	r2, #1
 800052e:	709a      	strb	r2, [r3, #2]
	GPIOx_init(lcd_port, &GPIO_Config);
 8000530:	494f      	ldr	r1, [pc, #316]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 8000532:	4850      	ldr	r0, [pc, #320]	; (8000674 <LCD_check_lcd_isbusy+0x1a4>)
 8000534:	f000 fc1a 	bl	8000d6c <GPIOx_init>
	//*********************************
	GPIO_Config.Pin_Number=GPIO_PIN_5;
 8000538:	4b4d      	ldr	r3, [pc, #308]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 800053a:	2220      	movs	r2, #32
 800053c:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_INPUT_FLO;
 800053e:	4b4c      	ldr	r3, [pc, #304]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 8000540:	2201      	movs	r2, #1
 8000542:	709a      	strb	r2, [r3, #2]
	GPIOx_init(lcd_port, &GPIO_Config);
 8000544:	494a      	ldr	r1, [pc, #296]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 8000546:	484b      	ldr	r0, [pc, #300]	; (8000674 <LCD_check_lcd_isbusy+0x1a4>)
 8000548:	f000 fc10 	bl	8000d6c <GPIOx_init>
	//*********************************
	GPIO_Config.Pin_Number=GPIO_PIN_6;
 800054c:	4b48      	ldr	r3, [pc, #288]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 800054e:	2240      	movs	r2, #64	; 0x40
 8000550:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_INPUT_FLO;
 8000552:	4b47      	ldr	r3, [pc, #284]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 8000554:	2201      	movs	r2, #1
 8000556:	709a      	strb	r2, [r3, #2]
	GPIOx_init(lcd_port, &GPIO_Config);
 8000558:	4945      	ldr	r1, [pc, #276]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 800055a:	4846      	ldr	r0, [pc, #280]	; (8000674 <LCD_check_lcd_isbusy+0x1a4>)
 800055c:	f000 fc06 	bl	8000d6c <GPIOx_init>
	//*********************************
	GPIO_Config.Pin_Number=GPIO_PIN_7;
 8000560:	4b43      	ldr	r3, [pc, #268]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 8000562:	2280      	movs	r2, #128	; 0x80
 8000564:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_INPUT_FLO;
 8000566:	4b42      	ldr	r3, [pc, #264]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 8000568:	2201      	movs	r2, #1
 800056a:	709a      	strb	r2, [r3, #2]
	GPIOx_init(lcd_port, &GPIO_Config);
 800056c:	4940      	ldr	r1, [pc, #256]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 800056e:	4841      	ldr	r0, [pc, #260]	; (8000674 <LCD_check_lcd_isbusy+0x1a4>)
 8000570:	f000 fbfc 	bl	8000d6c <GPIOx_init>
	//*********************************

	//Dir_lcd_port &= ~(0xFF<<Shift);
	GPIOx_WRITE_PIN(lcd_port, RW_switch, GPIO_PIN_SET);
 8000574:	2201      	movs	r2, #1
 8000576:	f44f 7100 	mov.w	r1, #512	; 0x200
 800057a:	483e      	ldr	r0, [pc, #248]	; (8000674 <LCD_check_lcd_isbusy+0x1a4>)
 800057c:	f000 fc81 	bl	8000e82 <GPIOx_WRITE_PIN>
	//lcd_control |= (1 << RW_switch);
	GPIOx_WRITE_PIN(lcd_port, RS_switch, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000586:	483b      	ldr	r0, [pc, #236]	; (8000674 <LCD_check_lcd_isbusy+0x1a4>)
 8000588:	f000 fc7b 	bl	8000e82 <GPIOx_WRITE_PIN>
	//lcd_control &= ~(1 << RS_switch);
	LCD_lcd_kick();
 800058c:	f7ff ff8a 	bl	80004a4 <LCD_lcd_kick>
	GPIO_Config.Pin_Number=GPIO_PIN_0;
 8000590:	4b37      	ldr	r3, [pc, #220]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 8000592:	2201      	movs	r2, #1
 8000594:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_OUTPUT_PP;
 8000596:	4b36      	ldr	r3, [pc, #216]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 8000598:	2204      	movs	r2, #4
 800059a:	709a      	strb	r2, [r3, #2]
	GPIO_Config.Speed=GPIO_MODE_speed_10_MHz;
 800059c:	4b34      	ldr	r3, [pc, #208]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 800059e:	2201      	movs	r2, #1
 80005a0:	70da      	strb	r2, [r3, #3]
	GPIOx_init(lcd_port, &GPIO_Config);
 80005a2:	4933      	ldr	r1, [pc, #204]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 80005a4:	4833      	ldr	r0, [pc, #204]	; (8000674 <LCD_check_lcd_isbusy+0x1a4>)
 80005a6:	f000 fbe1 	bl	8000d6c <GPIOx_init>
	GPIO_Config.Pin_Number=GPIO_PIN_1;
 80005aa:	4b31      	ldr	r3, [pc, #196]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 80005ac:	2202      	movs	r2, #2
 80005ae:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_OUTPUT_PP;
 80005b0:	4b2f      	ldr	r3, [pc, #188]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 80005b2:	2204      	movs	r2, #4
 80005b4:	709a      	strb	r2, [r3, #2]
	GPIO_Config.Speed=GPIO_MODE_speed_10_MHz;
 80005b6:	4b2e      	ldr	r3, [pc, #184]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	70da      	strb	r2, [r3, #3]
	GPIOx_init(lcd_port, &GPIO_Config);
 80005bc:	492c      	ldr	r1, [pc, #176]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 80005be:	482d      	ldr	r0, [pc, #180]	; (8000674 <LCD_check_lcd_isbusy+0x1a4>)
 80005c0:	f000 fbd4 	bl	8000d6c <GPIOx_init>
	GPIO_Config.Pin_Number=GPIO_PIN_2;
 80005c4:	4b2a      	ldr	r3, [pc, #168]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 80005c6:	2204      	movs	r2, #4
 80005c8:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_OUTPUT_PP;
 80005ca:	4b29      	ldr	r3, [pc, #164]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 80005cc:	2204      	movs	r2, #4
 80005ce:	709a      	strb	r2, [r3, #2]
	GPIO_Config.Speed=GPIO_MODE_speed_10_MHz;
 80005d0:	4b27      	ldr	r3, [pc, #156]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	70da      	strb	r2, [r3, #3]
	GPIOx_init(lcd_port, &GPIO_Config);
 80005d6:	4926      	ldr	r1, [pc, #152]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 80005d8:	4826      	ldr	r0, [pc, #152]	; (8000674 <LCD_check_lcd_isbusy+0x1a4>)
 80005da:	f000 fbc7 	bl	8000d6c <GPIOx_init>
	GPIO_Config.Pin_Number=GPIO_PIN_3;
 80005de:	4b24      	ldr	r3, [pc, #144]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 80005e0:	2208      	movs	r2, #8
 80005e2:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_OUTPUT_PP;
 80005e4:	4b22      	ldr	r3, [pc, #136]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 80005e6:	2204      	movs	r2, #4
 80005e8:	709a      	strb	r2, [r3, #2]
	GPIO_Config.Speed=GPIO_MODE_speed_10_MHz;
 80005ea:	4b21      	ldr	r3, [pc, #132]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	70da      	strb	r2, [r3, #3]
	GPIOx_init(lcd_port, &GPIO_Config);
 80005f0:	491f      	ldr	r1, [pc, #124]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 80005f2:	4820      	ldr	r0, [pc, #128]	; (8000674 <LCD_check_lcd_isbusy+0x1a4>)
 80005f4:	f000 fbba 	bl	8000d6c <GPIOx_init>
	GPIO_Config.Pin_Number=GPIO_PIN_4;
 80005f8:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 80005fa:	2210      	movs	r2, #16
 80005fc:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_OUTPUT_PP;
 80005fe:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 8000600:	2204      	movs	r2, #4
 8000602:	709a      	strb	r2, [r3, #2]
	GPIO_Config.Speed=GPIO_MODE_speed_10_MHz;
 8000604:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 8000606:	2201      	movs	r2, #1
 8000608:	70da      	strb	r2, [r3, #3]
	GPIOx_init(lcd_port, &GPIO_Config);
 800060a:	4919      	ldr	r1, [pc, #100]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 800060c:	4819      	ldr	r0, [pc, #100]	; (8000674 <LCD_check_lcd_isbusy+0x1a4>)
 800060e:	f000 fbad 	bl	8000d6c <GPIOx_init>
	GPIO_Config.Pin_Number=GPIO_PIN_5;
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 8000614:	2220      	movs	r2, #32
 8000616:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_OUTPUT_PP;
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 800061a:	2204      	movs	r2, #4
 800061c:	709a      	strb	r2, [r3, #2]
	GPIO_Config.Speed=GPIO_MODE_speed_10_MHz;
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 8000620:	2201      	movs	r2, #1
 8000622:	70da      	strb	r2, [r3, #3]
	GPIOx_init(lcd_port, &GPIO_Config);
 8000624:	4912      	ldr	r1, [pc, #72]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 8000626:	4813      	ldr	r0, [pc, #76]	; (8000674 <LCD_check_lcd_isbusy+0x1a4>)
 8000628:	f000 fba0 	bl	8000d6c <GPIOx_init>
	GPIO_Config.Pin_Number=GPIO_PIN_6;
 800062c:	4b10      	ldr	r3, [pc, #64]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 800062e:	2240      	movs	r2, #64	; 0x40
 8000630:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_OUTPUT_PP;
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 8000634:	2204      	movs	r2, #4
 8000636:	709a      	strb	r2, [r3, #2]
	GPIO_Config.Speed=GPIO_MODE_speed_10_MHz;
 8000638:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 800063a:	2201      	movs	r2, #1
 800063c:	70da      	strb	r2, [r3, #3]
	GPIOx_init(lcd_port, &GPIO_Config);
 800063e:	490c      	ldr	r1, [pc, #48]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <LCD_check_lcd_isbusy+0x1a4>)
 8000642:	f000 fb93 	bl	8000d6c <GPIOx_init>
	GPIO_Config.Pin_Number=GPIO_PIN_7;
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 8000648:	2280      	movs	r2, #128	; 0x80
 800064a:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_OUTPUT_PP;
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 800064e:	2204      	movs	r2, #4
 8000650:	709a      	strb	r2, [r3, #2]
	GPIO_Config.Speed=GPIO_MODE_speed_10_MHz;
 8000652:	4b07      	ldr	r3, [pc, #28]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 8000654:	2201      	movs	r2, #1
 8000656:	70da      	strb	r2, [r3, #3]
	GPIOx_init(lcd_port, &GPIO_Config);
 8000658:	4905      	ldr	r1, [pc, #20]	; (8000670 <LCD_check_lcd_isbusy+0x1a0>)
 800065a:	4806      	ldr	r0, [pc, #24]	; (8000674 <LCD_check_lcd_isbusy+0x1a4>)
 800065c:	f000 fb86 	bl	8000d6c <GPIOx_init>

	//Dir_lcd_port |= (0xFF<<Shift);
	GPIOx_WRITE_PIN(lcd_port, RW_switch, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000666:	4803      	ldr	r0, [pc, #12]	; (8000674 <LCD_check_lcd_isbusy+0x1a4>)
 8000668:	f000 fc0b 	bl	8000e82 <GPIOx_WRITE_PIN>
	//lcd_control &= ~(1 << RW_switch);

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000048 	.word	0x20000048
 8000674:	40010800 	.word	0x40010800

08000678 <Send_command>:


void Send_command (unsigned char command){
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]

	LCD_check_lcd_isbusy();
 8000682:	f7ff ff25 	bl	80004d0 <LCD_check_lcd_isbusy>
	//#ifdef EIGHT_BIT_MODE
	GPIO_Config.Pin_Number=RW_switch;
 8000686:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <Send_command+0x7c>)
 8000688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800068c:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_OUTPUT_PP;
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <Send_command+0x7c>)
 8000690:	2204      	movs	r2, #4
 8000692:	709a      	strb	r2, [r3, #2]
	GPIO_Config.Speed=GPIO_MODE_speed_10_MHz;
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <Send_command+0x7c>)
 8000696:	2201      	movs	r2, #1
 8000698:	70da      	strb	r2, [r3, #3]
	GPIOx_init(lcd_port, &GPIO_Config);
 800069a:	4916      	ldr	r1, [pc, #88]	; (80006f4 <Send_command+0x7c>)
 800069c:	4816      	ldr	r0, [pc, #88]	; (80006f8 <Send_command+0x80>)
 800069e:	f000 fb65 	bl	8000d6c <GPIOx_init>
	//******************************************
	GPIO_Config.Pin_Number=RS_switch;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <Send_command+0x7c>)
 80006a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006a8:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_OUTPUT_PP;
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <Send_command+0x7c>)
 80006ac:	2204      	movs	r2, #4
 80006ae:	709a      	strb	r2, [r3, #2]
	GPIO_Config.Speed=GPIO_MODE_speed_10_MHz;
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <Send_command+0x7c>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	70da      	strb	r2, [r3, #3]
	GPIOx_init(lcd_port, &GPIO_Config);
 80006b6:	490f      	ldr	r1, [pc, #60]	; (80006f4 <Send_command+0x7c>)
 80006b8:	480f      	ldr	r0, [pc, #60]	; (80006f8 <Send_command+0x80>)
 80006ba:	f000 fb57 	bl	8000d6c <GPIOx_init>

	//Dir_lcd_control |= ((1<<RW_switch)|(1<<RS_switch));
	GPIOx_WRITE_PIN(lcd_port, RW_switch, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c4:	480c      	ldr	r0, [pc, #48]	; (80006f8 <Send_command+0x80>)
 80006c6:	f000 fbdc 	bl	8000e82 <GPIOx_WRITE_PIN>
	GPIOx_WRITE_PIN(lcd_port, RS_switch, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d0:	4809      	ldr	r0, [pc, #36]	; (80006f8 <Send_command+0x80>)
 80006d2:	f000 fbd6 	bl	8000e82 <GPIOx_WRITE_PIN>
	//lcd_control &= ~((1<<RW_switch)|(1<<RS_switch));
	GPIOx_WRITE_PORT(lcd_port, command);
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	b29b      	uxth	r3, r3
 80006da:	4619      	mov	r1, r3
 80006dc:	4806      	ldr	r0, [pc, #24]	; (80006f8 <Send_command+0x80>)
 80006de:	f000 fbe7 	bl	8000eb0 <GPIOx_WRITE_PORT>
	my_wait(10);
 80006e2:	200a      	movs	r0, #10
 80006e4:	f7ff fec2 	bl	800046c <my_wait>
	LCD_lcd_kick();
 80006e8:	f7ff fedc 	bl	80004a4 <LCD_lcd_kick>
	LCD_lcd_kick();
    #endif*/



}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000048 	.word	0x20000048
 80006f8:	40010800 	.word	0x40010800

080006fc <LCD_clear_screen>:
void LCD_clear_screen(){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	Send_command(LCD_CLEAR_SCREEN);
 8000700:	2001      	movs	r0, #1
 8000702:	f7ff ffb9 	bl	8000678 <Send_command>
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <Lcd_init>:
void Lcd_init (){
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	my_wait(50);
 8000710:	2032      	movs	r0, #50	; 0x32
 8000712:	f7ff feab 	bl	800046c <my_wait>
	//Lcd_ispusy();
	GPIO_Config.Pin_Number=RS_switch;
 8000716:	4b5b      	ldr	r3, [pc, #364]	; (8000884 <Lcd_init+0x178>)
 8000718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800071c:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_OUTPUT_PP;
 800071e:	4b59      	ldr	r3, [pc, #356]	; (8000884 <Lcd_init+0x178>)
 8000720:	2204      	movs	r2, #4
 8000722:	709a      	strb	r2, [r3, #2]
	GPIO_Config.Speed=GPIO_MODE_speed_10_MHz;
 8000724:	4b57      	ldr	r3, [pc, #348]	; (8000884 <Lcd_init+0x178>)
 8000726:	2201      	movs	r2, #1
 8000728:	70da      	strb	r2, [r3, #3]
	GPIOx_init(lcd_port, &GPIO_Config);
 800072a:	4956      	ldr	r1, [pc, #344]	; (8000884 <Lcd_init+0x178>)
 800072c:	4856      	ldr	r0, [pc, #344]	; (8000888 <Lcd_init+0x17c>)
 800072e:	f000 fb1d 	bl	8000d6c <GPIOx_init>
	//*********************************
	GPIO_Config.Pin_Number=RW_switch;
 8000732:	4b54      	ldr	r3, [pc, #336]	; (8000884 <Lcd_init+0x178>)
 8000734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000738:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_OUTPUT_PP;
 800073a:	4b52      	ldr	r3, [pc, #328]	; (8000884 <Lcd_init+0x178>)
 800073c:	2204      	movs	r2, #4
 800073e:	709a      	strb	r2, [r3, #2]
	GPIO_Config.Speed=GPIO_MODE_speed_10_MHz;
 8000740:	4b50      	ldr	r3, [pc, #320]	; (8000884 <Lcd_init+0x178>)
 8000742:	2201      	movs	r2, #1
 8000744:	70da      	strb	r2, [r3, #3]
	GPIOx_init(lcd_port, &GPIO_Config);
 8000746:	494f      	ldr	r1, [pc, #316]	; (8000884 <Lcd_init+0x178>)
 8000748:	484f      	ldr	r0, [pc, #316]	; (8000888 <Lcd_init+0x17c>)
 800074a:	f000 fb0f 	bl	8000d6c <GPIOx_init>
	//*********************************
	GPIO_Config.Pin_Number=E_switch;
 800074e:	4b4d      	ldr	r3, [pc, #308]	; (8000884 <Lcd_init+0x178>)
 8000750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000754:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_OUTPUT_PP;
 8000756:	4b4b      	ldr	r3, [pc, #300]	; (8000884 <Lcd_init+0x178>)
 8000758:	2204      	movs	r2, #4
 800075a:	709a      	strb	r2, [r3, #2]
	GPIO_Config.Speed=GPIO_MODE_speed_10_MHz;
 800075c:	4b49      	ldr	r3, [pc, #292]	; (8000884 <Lcd_init+0x178>)
 800075e:	2201      	movs	r2, #1
 8000760:	70da      	strb	r2, [r3, #3]
	GPIOx_init(lcd_port, &GPIO_Config);
 8000762:	4948      	ldr	r1, [pc, #288]	; (8000884 <Lcd_init+0x178>)
 8000764:	4848      	ldr	r0, [pc, #288]	; (8000888 <Lcd_init+0x17c>)
 8000766:	f000 fb01 	bl	8000d6c <GPIOx_init>
	//*********************************
	//Dir_lcd_control |= ((1<<RW_switch)|(1<<RS_switch)|(1<<E_switch));
	GPIOx_WRITE_PIN(lcd_port, E_switch,   GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000770:	4845      	ldr	r0, [pc, #276]	; (8000888 <Lcd_init+0x17c>)
 8000772:	f000 fb86 	bl	8000e82 <GPIOx_WRITE_PIN>
	GPIOx_WRITE_PIN(lcd_port, RS_switch,  GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800077c:	4842      	ldr	r0, [pc, #264]	; (8000888 <Lcd_init+0x17c>)
 800077e:	f000 fb80 	bl	8000e82 <GPIOx_WRITE_PIN>
	GPIOx_WRITE_PIN(lcd_port, RW_switch,  GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000788:	483f      	ldr	r0, [pc, #252]	; (8000888 <Lcd_init+0x17c>)
 800078a:	f000 fb7a 	bl	8000e82 <GPIOx_WRITE_PIN>
	//lcd_control &= ~((1<<RW_switch)|(1<<RS_switch)|(1<<E_switch));
	GPIO_Config.Pin_Number=GPIO_PIN_0;
 800078e:	4b3d      	ldr	r3, [pc, #244]	; (8000884 <Lcd_init+0x178>)
 8000790:	2201      	movs	r2, #1
 8000792:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_OUTPUT_PP;
 8000794:	4b3b      	ldr	r3, [pc, #236]	; (8000884 <Lcd_init+0x178>)
 8000796:	2204      	movs	r2, #4
 8000798:	709a      	strb	r2, [r3, #2]
	GPIO_Config.Speed=GPIO_MODE_speed_10_MHz;
 800079a:	4b3a      	ldr	r3, [pc, #232]	; (8000884 <Lcd_init+0x178>)
 800079c:	2201      	movs	r2, #1
 800079e:	70da      	strb	r2, [r3, #3]
	GPIOx_init(lcd_port, &GPIO_Config);
 80007a0:	4938      	ldr	r1, [pc, #224]	; (8000884 <Lcd_init+0x178>)
 80007a2:	4839      	ldr	r0, [pc, #228]	; (8000888 <Lcd_init+0x17c>)
 80007a4:	f000 fae2 	bl	8000d6c <GPIOx_init>
	//*********************************
	GPIO_Config.Pin_Number=GPIO_PIN_1;
 80007a8:	4b36      	ldr	r3, [pc, #216]	; (8000884 <Lcd_init+0x178>)
 80007aa:	2202      	movs	r2, #2
 80007ac:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_OUTPUT_PP;
 80007ae:	4b35      	ldr	r3, [pc, #212]	; (8000884 <Lcd_init+0x178>)
 80007b0:	2204      	movs	r2, #4
 80007b2:	709a      	strb	r2, [r3, #2]
	GPIO_Config.Speed=GPIO_MODE_speed_10_MHz;
 80007b4:	4b33      	ldr	r3, [pc, #204]	; (8000884 <Lcd_init+0x178>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	70da      	strb	r2, [r3, #3]
	GPIOx_init(lcd_port, &GPIO_Config);
 80007ba:	4932      	ldr	r1, [pc, #200]	; (8000884 <Lcd_init+0x178>)
 80007bc:	4832      	ldr	r0, [pc, #200]	; (8000888 <Lcd_init+0x17c>)
 80007be:	f000 fad5 	bl	8000d6c <GPIOx_init>
	//*********************************
	GPIO_Config.Pin_Number=GPIO_PIN_2;
 80007c2:	4b30      	ldr	r3, [pc, #192]	; (8000884 <Lcd_init+0x178>)
 80007c4:	2204      	movs	r2, #4
 80007c6:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_OUTPUT_PP;
 80007c8:	4b2e      	ldr	r3, [pc, #184]	; (8000884 <Lcd_init+0x178>)
 80007ca:	2204      	movs	r2, #4
 80007cc:	709a      	strb	r2, [r3, #2]
	GPIO_Config.Speed=GPIO_MODE_speed_10_MHz;
 80007ce:	4b2d      	ldr	r3, [pc, #180]	; (8000884 <Lcd_init+0x178>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	70da      	strb	r2, [r3, #3]
	GPIOx_init(lcd_port, &GPIO_Config);
 80007d4:	492b      	ldr	r1, [pc, #172]	; (8000884 <Lcd_init+0x178>)
 80007d6:	482c      	ldr	r0, [pc, #176]	; (8000888 <Lcd_init+0x17c>)
 80007d8:	f000 fac8 	bl	8000d6c <GPIOx_init>
	//*********************************
	GPIO_Config.Pin_Number=GPIO_PIN_3;
 80007dc:	4b29      	ldr	r3, [pc, #164]	; (8000884 <Lcd_init+0x178>)
 80007de:	2208      	movs	r2, #8
 80007e0:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_OUTPUT_PP;
 80007e2:	4b28      	ldr	r3, [pc, #160]	; (8000884 <Lcd_init+0x178>)
 80007e4:	2204      	movs	r2, #4
 80007e6:	709a      	strb	r2, [r3, #2]
	GPIO_Config.Speed=GPIO_MODE_speed_10_MHz;
 80007e8:	4b26      	ldr	r3, [pc, #152]	; (8000884 <Lcd_init+0x178>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	70da      	strb	r2, [r3, #3]
	GPIOx_init(lcd_port, &GPIO_Config);
 80007ee:	4925      	ldr	r1, [pc, #148]	; (8000884 <Lcd_init+0x178>)
 80007f0:	4825      	ldr	r0, [pc, #148]	; (8000888 <Lcd_init+0x17c>)
 80007f2:	f000 fabb 	bl	8000d6c <GPIOx_init>
	//*********************************
	GPIO_Config.Pin_Number=GPIO_PIN_4;
 80007f6:	4b23      	ldr	r3, [pc, #140]	; (8000884 <Lcd_init+0x178>)
 80007f8:	2210      	movs	r2, #16
 80007fa:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_OUTPUT_PP;
 80007fc:	4b21      	ldr	r3, [pc, #132]	; (8000884 <Lcd_init+0x178>)
 80007fe:	2204      	movs	r2, #4
 8000800:	709a      	strb	r2, [r3, #2]
	GPIO_Config.Speed=GPIO_MODE_speed_10_MHz;
 8000802:	4b20      	ldr	r3, [pc, #128]	; (8000884 <Lcd_init+0x178>)
 8000804:	2201      	movs	r2, #1
 8000806:	70da      	strb	r2, [r3, #3]
	GPIOx_init(lcd_port, &GPIO_Config);
 8000808:	491e      	ldr	r1, [pc, #120]	; (8000884 <Lcd_init+0x178>)
 800080a:	481f      	ldr	r0, [pc, #124]	; (8000888 <Lcd_init+0x17c>)
 800080c:	f000 faae 	bl	8000d6c <GPIOx_init>
	//*********************************
	GPIO_Config.Pin_Number=GPIO_PIN_5;
 8000810:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <Lcd_init+0x178>)
 8000812:	2220      	movs	r2, #32
 8000814:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_OUTPUT_PP;
 8000816:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <Lcd_init+0x178>)
 8000818:	2204      	movs	r2, #4
 800081a:	709a      	strb	r2, [r3, #2]
	GPIO_Config.Speed=GPIO_MODE_speed_10_MHz;
 800081c:	4b19      	ldr	r3, [pc, #100]	; (8000884 <Lcd_init+0x178>)
 800081e:	2201      	movs	r2, #1
 8000820:	70da      	strb	r2, [r3, #3]
	GPIOx_init(lcd_port, &GPIO_Config);
 8000822:	4918      	ldr	r1, [pc, #96]	; (8000884 <Lcd_init+0x178>)
 8000824:	4818      	ldr	r0, [pc, #96]	; (8000888 <Lcd_init+0x17c>)
 8000826:	f000 faa1 	bl	8000d6c <GPIOx_init>
	//*********************************
	GPIO_Config.Pin_Number=GPIO_PIN_6;
 800082a:	4b16      	ldr	r3, [pc, #88]	; (8000884 <Lcd_init+0x178>)
 800082c:	2240      	movs	r2, #64	; 0x40
 800082e:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_OUTPUT_PP;
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <Lcd_init+0x178>)
 8000832:	2204      	movs	r2, #4
 8000834:	709a      	strb	r2, [r3, #2]
	GPIO_Config.Speed=GPIO_MODE_speed_10_MHz;
 8000836:	4b13      	ldr	r3, [pc, #76]	; (8000884 <Lcd_init+0x178>)
 8000838:	2201      	movs	r2, #1
 800083a:	70da      	strb	r2, [r3, #3]
	GPIOx_init(lcd_port, &GPIO_Config);
 800083c:	4911      	ldr	r1, [pc, #68]	; (8000884 <Lcd_init+0x178>)
 800083e:	4812      	ldr	r0, [pc, #72]	; (8000888 <Lcd_init+0x17c>)
 8000840:	f000 fa94 	bl	8000d6c <GPIOx_init>
	//*********************************
	GPIO_Config.Pin_Number=GPIO_PIN_7;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <Lcd_init+0x178>)
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	801a      	strh	r2, [r3, #0]
	GPIO_Config.Mode=GPIO_MODE_OUTPUT_PP;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <Lcd_init+0x178>)
 800084c:	2204      	movs	r2, #4
 800084e:	709a      	strb	r2, [r3, #2]
	GPIO_Config.Speed=GPIO_MODE_speed_10_MHz;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <Lcd_init+0x178>)
 8000852:	2201      	movs	r2, #1
 8000854:	70da      	strb	r2, [r3, #3]
	GPIOx_init(lcd_port, &GPIO_Config);
 8000856:	490b      	ldr	r1, [pc, #44]	; (8000884 <Lcd_init+0x178>)
 8000858:	480b      	ldr	r0, [pc, #44]	; (8000888 <Lcd_init+0x17c>)
 800085a:	f000 fa87 	bl	8000d6c <GPIOx_init>
	//*********************************
	//Dir_lcd_port = 0xFF;


	my_wait(15);
 800085e:	200f      	movs	r0, #15
 8000860:	f7ff fe04 	bl	800046c <my_wait>
	LCD_clear_screen();
 8000864:	f7ff ff4a 	bl	80006fc <LCD_clear_screen>
	//#ifdef EIGHT_BIT_MODE
	Send_command(LCD_FUNCTION_8BIT_2LINES);
 8000868:	2038      	movs	r0, #56	; 0x38
 800086a:	f7ff ff05 	bl	8000678 <Send_command>
	//#endif
	/*#ifdef FOUR_BIT_MODE
	Send_command(0x02);
	Send_command(LCD_FUNCTION_4BIT_2LINES);
    #endif*/
	Send_command(LCD_ENTRY_MODE);
 800086e:	2006      	movs	r0, #6
 8000870:	f7ff ff02 	bl	8000678 <Send_command>
	Send_command(LCD_BEGIN_AT_FIRST_ROW);
 8000874:	2080      	movs	r0, #128	; 0x80
 8000876:	f7ff feff 	bl	8000678 <Send_command>
	Send_command(LCD_DISP_ON_CURSOR_BLINK);
 800087a:	200f      	movs	r0, #15
 800087c:	f7ff fefc 	bl	8000678 <Send_command>


}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000048 	.word	0x20000048
 8000888:	40010800 	.word	0x40010800

0800088c <LCD_WRITE_CHAR>:
void LCD_WRITE_CHAR(unsigned char character){
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
	//#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
 8000896:	f7ff fe1b 	bl	80004d0 <LCD_check_lcd_isbusy>
	GPIOx_WRITE_PORT(lcd_port,character);
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	b29b      	uxth	r3, r3
 800089e:	4619      	mov	r1, r3
 80008a0:	480b      	ldr	r0, [pc, #44]	; (80008d0 <LCD_WRITE_CHAR+0x44>)
 80008a2:	f000 fb05 	bl	8000eb0 <GPIOx_WRITE_PORT>
	//lcd_port = character;
	GPIOx_WRITE_PIN(lcd_port, RW_switch, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ac:	4808      	ldr	r0, [pc, #32]	; (80008d0 <LCD_WRITE_CHAR+0x44>)
 80008ae:	f000 fae8 	bl	8000e82 <GPIOx_WRITE_PIN>
	//lcd_control &= ~(1 << RW_switch);
	GPIOx_WRITE_PIN(lcd_port, RS_switch, GPIO_PIN_SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008b8:	4805      	ldr	r0, [pc, #20]	; (80008d0 <LCD_WRITE_CHAR+0x44>)
 80008ba:	f000 fae2 	bl	8000e82 <GPIOx_WRITE_PIN>
	//lcd_control |= (1 << RS_switch);
	my_wait(1);
 80008be:	2001      	movs	r0, #1
 80008c0:	f7ff fdd4 	bl	800046c <my_wait>
	LCD_lcd_kick();
 80008c4:	f7ff fdee 	bl	80004a4 <LCD_lcd_kick>
	lcd_port = (lcd_port & 0x0F) | (character << 4);
	lcd_control |= 1<<RS_switch; //turn RS ON for Data mode.
	lcd_control &= ~ (1<<RW_switch);//turn RW off so you can write.
	LCD_lcd_kick ();
	#endif*/
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40010800 	.word	0x40010800

080008d4 <gotoXY>:
void gotoXY (unsigned char line,unsigned char posetion){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	460a      	mov	r2, r1
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	if(line==2){
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d109      	bne.n	80008fe <gotoXY+0x2a>
		if (posetion < 16 && posetion >= 0)
 80008ea:	79bb      	ldrb	r3, [r7, #6]
 80008ec:	2b0f      	cmp	r3, #15
 80008ee:	d812      	bhi.n	8000916 <gotoXY+0x42>
		{
			Send_command(LCD_BEGIN_AT_SECOND_ROW+posetion);
 80008f0:	79bb      	ldrb	r3, [r7, #6]
 80008f2:	3b40      	subs	r3, #64	; 0x40
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff febe 	bl	8000678 <Send_command>
		if (posetion < 16 && posetion >= 0)
		{
			Send_command(LCD_BEGIN_AT_FIRST_ROW+posetion);
		}
	}
}
 80008fc:	e00b      	b.n	8000916 <gotoXY+0x42>
	}else if(line==1){
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d108      	bne.n	8000916 <gotoXY+0x42>
		if (posetion < 16 && posetion >= 0)
 8000904:	79bb      	ldrb	r3, [r7, #6]
 8000906:	2b0f      	cmp	r3, #15
 8000908:	d805      	bhi.n	8000916 <gotoXY+0x42>
			Send_command(LCD_BEGIN_AT_FIRST_ROW+posetion);
 800090a:	79bb      	ldrb	r3, [r7, #6]
 800090c:	3b80      	subs	r3, #128	; 0x80
 800090e:	b2db      	uxtb	r3, r3
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff feb1 	bl	8000678 <Send_command>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <LCD_Send_string>:
void LCD_Send_string (char* data){
 800091e:	b580      	push	{r7, lr}
 8000920:	b084      	sub	sp, #16
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
	int count=0;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
	while (*data>0)
 800092a:	e01c      	b.n	8000966 <LCD_Send_string+0x48>
	{

		LCD_WRITE_CHAR(*data++);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	1c5a      	adds	r2, r3, #1
 8000930:	607a      	str	r2, [r7, #4]
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ffa9 	bl	800088c <LCD_WRITE_CHAR>
		count++;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	3301      	adds	r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
		if (count==16)
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b10      	cmp	r3, #16
 8000944:	d104      	bne.n	8000950 <LCD_Send_string+0x32>
		{
			gotoXY(2,0);
 8000946:	2100      	movs	r1, #0
 8000948:	2002      	movs	r0, #2
 800094a:	f7ff ffc3 	bl	80008d4 <gotoXY>
 800094e:	e00a      	b.n	8000966 <LCD_Send_string+0x48>
		}else if (count==32)
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	2b20      	cmp	r3, #32
 8000954:	d107      	bne.n	8000966 <LCD_Send_string+0x48>
		{
			LCD_clear_screen();
 8000956:	f7ff fed1 	bl	80006fc <LCD_clear_screen>
			gotoXY(1,0);
 800095a:	2100      	movs	r1, #0
 800095c:	2001      	movs	r0, #1
 800095e:	f7ff ffb9 	bl	80008d4 <gotoXY>
			count = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
	while (*data>0)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d1de      	bne.n	800092c <LCD_Send_string+0xe>
		}
	}
}
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <Clock_Init>:
#include "Stm32f103x8_SPI_drivers.h"
#include "Lcd.h"
#include "Keypad.h"

void Clock_Init()
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
	//open clock of AFIO
	RCC_AFIO_CLK_EN();
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <Clock_Init+0x30>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	4a09      	ldr	r2, [pc, #36]	; (80009a8 <Clock_Init+0x30>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	6193      	str	r3, [r2, #24]
	//open clock of GPIOA
	RCC_GPIOA_CLK_EN();
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <Clock_Init+0x30>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a06      	ldr	r2, [pc, #24]	; (80009a8 <Clock_Init+0x30>)
 800098e:	f043 0304 	orr.w	r3, r3, #4
 8000992:	6193      	str	r3, [r2, #24]

	//open clock of GPIOB
	RCC_GPIOB_CLK_EN();
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <Clock_Init+0x30>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a03      	ldr	r2, [pc, #12]	; (80009a8 <Clock_Init+0x30>)
 800099a:	f043 0308 	orr.w	r3, r3, #8
 800099e:	6193      	str	r3, [r2, #24]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	40021000 	.word	0x40021000

080009ac <__delay__>:
		pin_config.Speed = GPIO_MODE_speed_10_MHz;
		GPIOx_init(GPIOB, &pin_config);
}*/

void __delay__(uint32_t x)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	uint32_t i, j;

	for(i = 0; i < x; i++)
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	e00b      	b.n	80009d2 <__delay__+0x26>
		for(j = 0; j < 255; j++);
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	e002      	b.n	80009c6 <__delay__+0x1a>
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	3301      	adds	r3, #1
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	2bfe      	cmp	r3, #254	; 0xfe
 80009ca:	d9f9      	bls.n	80009c0 <__delay__+0x14>
	for(i = 0; i < x; i++)
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	3301      	adds	r3, #1
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d3ef      	bcc.n	80009ba <__delay__+0xe>
}
 80009da:	bf00      	nop
 80009dc:	3714      	adds	r7, #20
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr

080009e4 <main>:

GPIO_Pinconfige_t main_confg;
int main(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0

	Clock_Init();
 80009ea:	f7ff ffc5 	bl	8000978 <Clock_Init>
	//GPIO_Init();

	main_confg.Pin_Number=GPIO_PIN_14;
 80009ee:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <main+0x88>)
 80009f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009f4:	801a      	strh	r2, [r3, #0]
	main_confg.Mode=GPIO_MODE_OUTPUT_PP;
 80009f6:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <main+0x88>)
 80009f8:	2204      	movs	r2, #4
 80009fa:	709a      	strb	r2, [r3, #2]
	main_confg.Speed=GPIO_MODE_speed_10_MHz;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <main+0x88>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	70da      	strb	r2, [r3, #3]
	GPIOx_init(GPIOB, &main_confg);
 8000a02:	491a      	ldr	r1, [pc, #104]	; (8000a6c <main+0x88>)
 8000a04:	481a      	ldr	r0, [pc, #104]	; (8000a70 <main+0x8c>)
 8000a06:	f000 f9b1 	bl	8000d6c <GPIOx_init>
	GPIOx_WRITE_PIN(GPIOB,GPIO_PIN_14, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a10:	4817      	ldr	r0, [pc, #92]	; (8000a70 <main+0x8c>)
 8000a12:	f000 fa36 	bl	8000e82 <GPIOx_WRITE_PIN>
	Lcd_init();
 8000a16:	f7ff fe79 	bl	800070c <Lcd_init>
	Keypad_Init();
 8000a1a:	f7ff fba9 	bl	8000170 <Keypad_Init>
	GPIOx_TOGGELE_PIN(GPIOB,GPIO_PIN_14);
 8000a1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a22:	4813      	ldr	r0, [pc, #76]	; (8000a70 <main+0x8c>)
 8000a24:	f000 fa52 	bl	8000ecc <GPIOx_TOGGELE_PIN>
	uint8_t Pressed_Key;

	LCD_Send_string("HELLO MAHMOUD");
 8000a28:	4812      	ldr	r0, [pc, #72]	; (8000a74 <main+0x90>)
 8000a2a:	f7ff ff78 	bl	800091e <LCD_Send_string>
	__delay__(600);
 8000a2e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000a32:	f7ff ffbb 	bl	80009ac <__delay__>
	LCD_clear_screen();
 8000a36:	f7ff fe61 	bl	80006fc <LCD_clear_screen>
	GPIOx_TOGGELE_PIN(GPIOB,GPIO_PIN_14);
 8000a3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a3e:	480c      	ldr	r0, [pc, #48]	; (8000a70 <main+0x8c>)
 8000a40:	f000 fa44 	bl	8000ecc <GPIOx_TOGGELE_PIN>
	while(1){
		Pressed_Key = Keypad_Result();
 8000a44:	f7ff fbfe 	bl	8000244 <Keypad_Result>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	71fb      	strb	r3, [r7, #7]

				switch(Pressed_Key)
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	2b3f      	cmp	r3, #63	; 0x3f
 8000a50:	d002      	beq.n	8000a58 <main+0x74>
 8000a52:	2b41      	cmp	r3, #65	; 0x41
 8000a54:	d008      	beq.n	8000a68 <main+0x84>
 8000a56:	e002      	b.n	8000a5e <main+0x7a>
				{
				case '?':
					LCD_clear_screen();
 8000a58:	f7ff fe50 	bl	80006fc <LCD_clear_screen>
					break;
 8000a5c:	e005      	b.n	8000a6a <main+0x86>

				case 'A':
					break;

				default:
					LCD_WRITE_CHAR(Pressed_Key);
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff13 	bl	800088c <LCD_WRITE_CHAR>
					break;
 8000a66:	e000      	b.n	8000a6a <main+0x86>
					break;
 8000a68:	bf00      	nop
		Pressed_Key = Keypad_Result();
 8000a6a:	e7eb      	b.n	8000a44 <main+0x60>
 8000a6c:	2000004c 	.word	0x2000004c
 8000a70:	40010c00 	.word	0x40010c00
 8000a74:	08000fc8 	.word	0x08000fc8

08000a78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a78:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a7a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a7c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a80:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a82:	490d      	ldr	r1, [pc, #52]	; (8000ab8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a84:	4a0d      	ldr	r2, [pc, #52]	; (8000abc <LoopForever+0xe>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a88:	e002      	b.n	8000a90 <LoopCopyDataInit>

08000a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8e:	3304      	adds	r3, #4

08000a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a94:	d3f9      	bcc.n	8000a8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a98:	4c0a      	ldr	r4, [pc, #40]	; (8000ac4 <LoopForever+0x16>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a9c:	e001      	b.n	8000aa2 <LoopFillZerobss>

08000a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa0:	3204      	adds	r2, #4

08000aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa4:	d3fb      	bcc.n	8000a9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aa6:	f000 fa5f 	bl	8000f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aaa:	f7ff ff9b 	bl	80009e4 <main>

08000aae <LoopForever>:

LoopForever:
    b LoopForever
 8000aae:	e7fe      	b.n	8000aae <LoopForever>
  ldr   r0, =_estack
 8000ab0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000abc:	08000fe0 	.word	0x08000fe0
  ldr r2, =_sbss
 8000ac0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000ac4:	2000008c 	.word	0x2000008c

08000ac8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac8:	e7fe      	b.n	8000ac8 <ADC1_2_IRQHandler>
	...

08000acc <EXTI0_IRQHandler>:

	Updata(P_EXTI_Confige);
}
//=========================================ISR==============================================
void EXTI0_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	//write 1 to clear pending bit,to stop sending interrupt again
	EXTI->PR = 1<<0;
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <EXTI0_IRQHandler+0x14>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	615a      	str	r2, [r3, #20]
	//callback
	Gp_call_back_func[0]();
 8000ad6:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <EXTI0_IRQHandler+0x18>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4798      	blx	r3
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40010400 	.word	0x40010400
 8000ae4:	20000050 	.word	0x20000050

08000ae8 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<1;
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <EXTI1_IRQHandler+0x14>)
 8000aee:	2202      	movs	r2, #2
 8000af0:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[1]();
 8000af2:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <EXTI1_IRQHandler+0x18>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	4798      	blx	r3
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40010400 	.word	0x40010400
 8000b00:	20000050 	.word	0x20000050

08000b04 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<2;
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <EXTI2_IRQHandler+0x14>)
 8000b0a:	2204      	movs	r2, #4
 8000b0c:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[2]();
 8000b0e:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <EXTI2_IRQHandler+0x18>)
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	4798      	blx	r3
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40010400 	.word	0x40010400
 8000b1c:	20000050 	.word	0x20000050

08000b20 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<3;
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <EXTI3_IRQHandler+0x14>)
 8000b26:	2208      	movs	r2, #8
 8000b28:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[3]();
 8000b2a:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <EXTI3_IRQHandler+0x18>)
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	4798      	blx	r3
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40010400 	.word	0x40010400
 8000b38:	20000050 	.word	0x20000050

08000b3c <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<4;
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <EXTI4_IRQHandler+0x14>)
 8000b42:	2210      	movs	r2, #16
 8000b44:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[4]();
 8000b46:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <EXTI4_IRQHandler+0x18>)
 8000b48:	691b      	ldr	r3, [r3, #16]
 8000b4a:	4798      	blx	r3
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40010400 	.word	0x40010400
 8000b54:	20000050 	.word	0x20000050

08000b58 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
    /* here i check which interrupt is that, cause all interrupts from
	 5---9  arrived on same pin at NVIC
	so we will know which interrupt for ,by checking PR register if its one so its
	and then we write 1 on PR reg to disable interrupt  */
	if(EXTI->PR & 1<<5) { EXTI->PR  = 1<<5;   Gp_call_back_func[5](); }
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <EXTI9_5_IRQHandler+0x84>)
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	f003 0320 	and.w	r3, r3, #32
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d005      	beq.n	8000b74 <EXTI9_5_IRQHandler+0x1c>
 8000b68:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <EXTI9_5_IRQHandler+0x84>)
 8000b6a:	2220      	movs	r2, #32
 8000b6c:	615a      	str	r2, [r3, #20]
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <EXTI9_5_IRQHandler+0x88>)
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR  = 1<<6;   Gp_call_back_func[6](); }
 8000b74:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <EXTI9_5_IRQHandler+0x84>)
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d005      	beq.n	8000b8c <EXTI9_5_IRQHandler+0x34>
 8000b80:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <EXTI9_5_IRQHandler+0x84>)
 8000b82:	2240      	movs	r2, #64	; 0x40
 8000b84:	615a      	str	r2, [r3, #20]
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <EXTI9_5_IRQHandler+0x88>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR  = 1<<7;   Gp_call_back_func[7](); }
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <EXTI9_5_IRQHandler+0x84>)
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d005      	beq.n	8000ba4 <EXTI9_5_IRQHandler+0x4c>
 8000b98:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <EXTI9_5_IRQHandler+0x84>)
 8000b9a:	2280      	movs	r2, #128	; 0x80
 8000b9c:	615a      	str	r2, [r3, #20]
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <EXTI9_5_IRQHandler+0x88>)
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR  = 1<<8;   Gp_call_back_func[8](); }
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <EXTI9_5_IRQHandler+0x84>)
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d006      	beq.n	8000bbe <EXTI9_5_IRQHandler+0x66>
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <EXTI9_5_IRQHandler+0x84>)
 8000bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bb6:	615a      	str	r2, [r3, #20]
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <EXTI9_5_IRQHandler+0x88>)
 8000bba:	6a1b      	ldr	r3, [r3, #32]
 8000bbc:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR  = 1<<9;   Gp_call_back_func[9](); }
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <EXTI9_5_IRQHandler+0x84>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d006      	beq.n	8000bd8 <EXTI9_5_IRQHandler+0x80>
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <EXTI9_5_IRQHandler+0x84>)
 8000bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd0:	615a      	str	r2, [r3, #20]
 8000bd2:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <EXTI9_5_IRQHandler+0x88>)
 8000bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd6:	4798      	blx	r3
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40010400 	.word	0x40010400
 8000be0:	20000050 	.word	0x20000050

08000be4 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0

	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10; Gp_call_back_func[10](); }
 8000be8:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000bea:	695b      	ldr	r3, [r3, #20]
 8000bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d008      	beq.n	8000c06 <EXTI15_10_IRQHandler+0x22>
 8000bf4:	4b2a      	ldr	r3, [pc, #168]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000bf6:	695b      	ldr	r3, [r3, #20]
 8000bf8:	4a29      	ldr	r2, [pc, #164]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bfe:	6153      	str	r3, [r2, #20]
 8000c00:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <EXTI15_10_IRQHandler+0xc0>)
 8000c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c04:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11; Gp_call_back_func[11](); }
 8000c06:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d008      	beq.n	8000c24 <EXTI15_10_IRQHandler+0x40>
 8000c12:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	4a22      	ldr	r2, [pc, #136]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c1c:	6153      	str	r3, [r2, #20]
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <EXTI15_10_IRQHandler+0xc0>)
 8000c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c22:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12; Gp_call_back_func[12](); }
 8000c24:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d008      	beq.n	8000c42 <EXTI15_10_IRQHandler+0x5e>
 8000c30:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c32:	695b      	ldr	r3, [r3, #20]
 8000c34:	4a1a      	ldr	r2, [pc, #104]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c3a:	6153      	str	r3, [r2, #20]
 8000c3c:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <EXTI15_10_IRQHandler+0xc0>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c40:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13; Gp_call_back_func[13](); }
 8000c42:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d008      	beq.n	8000c60 <EXTI15_10_IRQHandler+0x7c>
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c58:	6153      	str	r3, [r2, #20]
 8000c5a:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <EXTI15_10_IRQHandler+0xc0>)
 8000c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5e:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14; Gp_call_back_func[14](); }
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d008      	beq.n	8000c7e <EXTI15_10_IRQHandler+0x9a>
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c6e:	695b      	ldr	r3, [r3, #20]
 8000c70:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c76:	6153      	str	r3, [r2, #20]
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <EXTI15_10_IRQHandler+0xc0>)
 8000c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c7c:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<15; Gp_call_back_func[15](); }
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d008      	beq.n	8000c9c <EXTI15_10_IRQHandler+0xb8>
 8000c8a:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c94:	6153      	str	r3, [r2, #20]
 8000c96:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <EXTI15_10_IRQHandler+0xc0>)
 8000c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c9a:	4798      	blx	r3
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40010400 	.word	0x40010400
 8000ca4:	20000050 	.word	0x20000050

08000ca8 <get_pin>:
//----------------------------
//include
//-----------------------------
#include "Stm32f103x8_gpio_drivers.h"
//-----------------------------
uint8_t get_pin(uint16_t Pin_Number){
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	80fb      	strh	r3, [r7, #6]
	switch (Pin_Number)
 8000cb2:	88fb      	ldrh	r3, [r7, #6]
 8000cb4:	2b80      	cmp	r3, #128	; 0x80
 8000cb6:	d042      	beq.n	8000d3e <get_pin+0x96>
 8000cb8:	2b80      	cmp	r3, #128	; 0x80
 8000cba:	dc11      	bgt.n	8000ce0 <get_pin+0x38>
 8000cbc:	2b08      	cmp	r3, #8
 8000cbe:	d036      	beq.n	8000d2e <get_pin+0x86>
 8000cc0:	2b08      	cmp	r3, #8
 8000cc2:	dc06      	bgt.n	8000cd2 <get_pin+0x2a>
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d02e      	beq.n	8000d26 <get_pin+0x7e>
 8000cc8:	2b04      	cmp	r3, #4
 8000cca:	d02e      	beq.n	8000d2a <get_pin+0x82>
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d028      	beq.n	8000d22 <get_pin+0x7a>
 8000cd0:	e047      	b.n	8000d62 <get_pin+0xba>
 8000cd2:	2b20      	cmp	r3, #32
 8000cd4:	d02f      	beq.n	8000d36 <get_pin+0x8e>
 8000cd6:	2b40      	cmp	r3, #64	; 0x40
 8000cd8:	d02f      	beq.n	8000d3a <get_pin+0x92>
 8000cda:	2b10      	cmp	r3, #16
 8000cdc:	d029      	beq.n	8000d32 <get_pin+0x8a>
 8000cde:	e040      	b.n	8000d62 <get_pin+0xba>
 8000ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ce4:	d033      	beq.n	8000d4e <get_pin+0xa6>
 8000ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cea:	dc09      	bgt.n	8000d00 <get_pin+0x58>
 8000cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cf0:	d029      	beq.n	8000d46 <get_pin+0x9e>
 8000cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cf6:	d028      	beq.n	8000d4a <get_pin+0xa2>
 8000cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cfc:	d021      	beq.n	8000d42 <get_pin+0x9a>
 8000cfe:	e030      	b.n	8000d62 <get_pin+0xba>
 8000d00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d04:	d027      	beq.n	8000d56 <get_pin+0xae>
 8000d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d0a:	dc03      	bgt.n	8000d14 <get_pin+0x6c>
 8000d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d10:	d01f      	beq.n	8000d52 <get_pin+0xaa>
 8000d12:	e026      	b.n	8000d62 <get_pin+0xba>
 8000d14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d18:	d01f      	beq.n	8000d5a <get_pin+0xb2>
 8000d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d1e:	d01e      	beq.n	8000d5e <get_pin+0xb6>
 8000d20:	e01f      	b.n	8000d62 <get_pin+0xba>
		{
		//from pin 0 t0 7 CRL
		case GPIO_PIN_0:
			return 0 ;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e01d      	b.n	8000d62 <get_pin+0xba>
			break ;
		case GPIO_PIN_1:
			return 4 ;
 8000d26:	2304      	movs	r3, #4
 8000d28:	e01b      	b.n	8000d62 <get_pin+0xba>
			break ;
		case GPIO_PIN_2:
			return 8 ;
 8000d2a:	2308      	movs	r3, #8
 8000d2c:	e019      	b.n	8000d62 <get_pin+0xba>
			break ;
		case GPIO_PIN_3:
			return 12 ;
 8000d2e:	230c      	movs	r3, #12
 8000d30:	e017      	b.n	8000d62 <get_pin+0xba>
			break ;

		case GPIO_PIN_4:
			return 16 ;
 8000d32:	2310      	movs	r3, #16
 8000d34:	e015      	b.n	8000d62 <get_pin+0xba>
			break ;

		case GPIO_PIN_5:
			return 20 ;
 8000d36:	2314      	movs	r3, #20
 8000d38:	e013      	b.n	8000d62 <get_pin+0xba>
			break ;

		case GPIO_PIN_6:
			return 24 ;
 8000d3a:	2318      	movs	r3, #24
 8000d3c:	e011      	b.n	8000d62 <get_pin+0xba>
			break ;

		case GPIO_PIN_7:
			return 28 ;
 8000d3e:	231c      	movs	r3, #28
 8000d40:	e00f      	b.n	8000d62 <get_pin+0xba>
			break ;

			//from pin 8 t0 15 CRH
		case GPIO_PIN_8:
			return 0 ;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e00d      	b.n	8000d62 <get_pin+0xba>
			break ;
		case GPIO_PIN_9:
			return 4 ;
 8000d46:	2304      	movs	r3, #4
 8000d48:	e00b      	b.n	8000d62 <get_pin+0xba>
			break ;

		case GPIO_PIN_10:
			return 8 ;
 8000d4a:	2308      	movs	r3, #8
 8000d4c:	e009      	b.n	8000d62 <get_pin+0xba>
			break ;

		case GPIO_PIN_11:
			return 12 ;
 8000d4e:	230c      	movs	r3, #12
 8000d50:	e007      	b.n	8000d62 <get_pin+0xba>
			break ;

		case GPIO_PIN_12:
			return 16 ;
 8000d52:	2310      	movs	r3, #16
 8000d54:	e005      	b.n	8000d62 <get_pin+0xba>
			break ;


		case GPIO_PIN_13:
			return 20 ;
 8000d56:	2314      	movs	r3, #20
 8000d58:	e003      	b.n	8000d62 <get_pin+0xba>
			break ;

		case GPIO_PIN_14:
			return 24 ;
 8000d5a:	2318      	movs	r3, #24
 8000d5c:	e001      	b.n	8000d62 <get_pin+0xba>
			break ;

		case GPIO_PIN_15:
			return 28 ;
 8000d5e:	231c      	movs	r3, #28
 8000d60:	e7ff      	b.n	8000d62 <get_pin+0xba>



		}

}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr

08000d6c <GPIOx_init>:
* @param [in]    -GPIOx: where x can be (A..E depending on device used) to select the GPIO peripheral
* @param [out]   -GPIO_conf pointer to a GPIO PinConfig t structure that contains the configuration information for the specified GPIO PIN
* @retval        -non
* Note           -Stm32F103C6 MCU has GPIO A, B, C,D, E Modules But LQFP48 Package has only GPIO A, B, PART of C/D exported as external PINS from MCU
*/
void GPIOx_init (typedef_GPIO* GPIOx,GPIO_Pinconfige_t* GPIO_conf){
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
	uint32_t* config=NULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
	config=(GPIO_conf->Pin_Number)>GPIO_PIN_8?&GPIOx->CRH:&GPIOx->CRL;
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	881b      	ldrh	r3, [r3, #0]
 8000d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d82:	d902      	bls.n	8000d8a <GPIOx_init+0x1e>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3304      	adds	r3, #4
 8000d88:	e000      	b.n	8000d8c <GPIOx_init+0x20>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	60bb      	str	r3, [r7, #8]
	uint8_t pinVal =0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	73fb      	strb	r3, [r7, #15]
	*(config) &= (~(0xf <<get_pin(GPIO_conf->Pin_Number)));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ff86 	bl	8000ca8 <get_pin>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	461a      	mov	r2, r3
 8000da0:	230f      	movs	r3, #15
 8000da2:	4093      	lsls	r3, r2
 8000da4:	43da      	mvns	r2, r3
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	401a      	ands	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	601a      	str	r2, [r3, #0]



	if(GPIO_conf->Mode==GPIO_MODE_OUTPUT_PP||GPIO_conf->Mode==GPIO_MODE_OUTPUT_OD||GPIO_conf->Mode==GPIO_MODE_OUTPUT_AF_PP||GPIO_conf->Mode==GPIO_MODE_OUTPUT_AF_OD){
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	789b      	ldrb	r3, [r3, #2]
 8000db4:	2b04      	cmp	r3, #4
 8000db6:	d00b      	beq.n	8000dd0 <GPIOx_init+0x64>
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	789b      	ldrb	r3, [r3, #2]
 8000dbc:	2b05      	cmp	r3, #5
 8000dbe:	d007      	beq.n	8000dd0 <GPIOx_init+0x64>
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	789b      	ldrb	r3, [r3, #2]
 8000dc4:	2b06      	cmp	r3, #6
 8000dc6:	d003      	beq.n	8000dd0 <GPIOx_init+0x64>
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	789b      	ldrb	r3, [r3, #2]
 8000dcc:	2b07      	cmp	r3, #7
 8000dce:	d10e      	bne.n	8000dee <GPIOx_init+0x82>
		pinVal= (((GPIO_conf->Mode -4)<<2) | (GPIO_conf->Speed) & 0x0f);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	789b      	ldrb	r3, [r3, #2]
 8000dd4:	3b04      	subs	r3, #4
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	b25a      	sxtb	r2, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	78db      	ldrb	r3, [r3, #3]
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	f003 030f 	and.w	r3, r3, #15
 8000de4:	b25b      	sxtb	r3, r3
 8000de6:	4313      	orrs	r3, r2
 8000de8:	b25b      	sxtb	r3, r3
 8000dea:	73fb      	strb	r3, [r7, #15]
 8000dec:	e02a      	b.n	8000e44 <GPIOx_init+0xd8>


	}else{


		if(GPIO_conf->Mode==GPIO_MODE_ANALOG||GPIO_conf->Mode==GPIO_MODE_INPUT_FLO){
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	789b      	ldrb	r3, [r3, #2]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d003      	beq.n	8000dfe <GPIOx_init+0x92>
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	789b      	ldrb	r3, [r3, #2]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d107      	bne.n	8000e0e <GPIOx_init+0xa2>
			pinVal=(((GPIO_conf->Mode<<2)|0x00)& 0x0f);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	789b      	ldrb	r3, [r3, #2]
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	73fb      	strb	r3, [r7, #15]
 8000e0c:	e01a      	b.n	8000e44 <GPIOx_init+0xd8>



		}
		else if (GPIO_conf->Mode == GPIO_MODE_AF_INPUT) // consider it floating input
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	789b      	ldrb	r3, [r3, #2]
 8000e12:	2b08      	cmp	r3, #8
 8000e14:	d102      	bne.n	8000e1c <GPIOx_init+0xb0>
		{
			pinVal = ((((GPIO_MODE_INPUT_FLO)<<2) | 0x0) & 0xf );
 8000e16:	2304      	movs	r3, #4
 8000e18:	73fb      	strb	r3, [r7, #15]
 8000e1a:	e013      	b.n	8000e44 <GPIOx_init+0xd8>
		}

		//in case of PULL UP & PULL DOWN
		else
		{
			pinVal = ((((GPIO_MODE_INPUT_PU)<<2) | 0x0) & 0xf );
 8000e1c:	2308      	movs	r3, #8
 8000e1e:	73fb      	strb	r3, [r7, #15]
			if(GPIO_conf->Mode == GPIO_MODE_INPUT_PU)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	789b      	ldrb	r3, [r3, #2]
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d105      	bne.n	8000e34 <GPIOx_init+0xc8>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR = GPIO_conf->Pin_Number;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	e007      	b.n	8000e44 <GPIOx_init+0xd8>

			}
			else
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR &= ~(GPIO_conf->Pin_Number);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	8812      	ldrh	r2, [r2, #0]
 8000e3c:	43d2      	mvns	r2, r2
 8000e3e:	401a      	ands	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	60da      	str	r2, [r3, #12]
			}

		}
	}
	(*config) |= ((pinVal)<< get_pin(GPIO_conf->Pin_Number));
 8000e44:	7bfc      	ldrb	r4, [r7, #15]
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff2c 	bl	8000ca8 <get_pin>
 8000e50:	4603      	mov	r3, r0
 8000e52:	fa04 f203 	lsl.w	r2, r4, r3
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	601a      	str	r2, [r3, #0]

}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd90      	pop	{r4, r7, pc}

08000e68 <GPIOx_READ_PORT>:
 * @brief 				-read the input port VALUE
 * @param [in] 			-GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @retval 				-the input port VALUE
 * Note					-none
 */
uint16_t GPIOx_READ_PORT (typedef_GPIO* GPIOx){
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	uint16_t result;
	result =(uint16_t) (GPIOx->IDR);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	81fb      	strh	r3, [r7, #14]
	return result;
 8000e76:	89fb      	ldrh	r3, [r7, #14]

}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr

08000e82 <GPIOx_WRITE_PIN>:
 *@param [in] 			-Value: Pin Value
 * @retval 			    -none
 * Note				    -none
 */
//WRITE
void GPIOx_WRITE_PIN (typedef_GPIO* GPIOx,uint16_t PIN_NUM,uint8_t Value){
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	807b      	strh	r3, [r7, #2]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	707b      	strb	r3, [r7, #1]
	if (Value !=GPIO_PIN_RESET)
 8000e92:	787b      	ldrb	r3, [r7, #1]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <GPIOx_WRITE_PIN+0x1e>
			//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
			//		These bits are write-only and can be accessed in Word mode only.
			//		0: No action on the corresponding ODRx bit
			//		1: Set the corresponding ODRx bit

			GPIOx->BSRR = (uint32_t)PIN_NUM;
 8000e98:	887a      	ldrh	r2, [r7, #2]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	611a      	str	r2, [r3, #16]
			//		0: No action on the corresponding ODRx bit
			//		1: Reset the corresponding ODRx bit
			GPIOx->BRR =(uint32_t) PIN_NUM;
		}

}
 8000e9e:	e002      	b.n	8000ea6 <GPIOx_WRITE_PIN+0x24>
			GPIOx->BRR =(uint32_t) PIN_NUM;
 8000ea0:	887a      	ldrh	r2, [r7, #2]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	615a      	str	r2, [r3, #20]
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <GPIOx_WRITE_PORT>:
 * @brief 				-write on output port
 * @param [in] 			-GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @retval 				-none
 * Note					-none
 */
void GPIOx_WRITE_PORT (typedef_GPIO* GPIOx,uint16_t Value){
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR =(uint32_t)Value;
 8000ebc:	887a      	ldrh	r2, [r7, #2]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	60da      	str	r2, [r3, #12]

}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <GPIOx_TOGGELE_PIN>:
 * @param [in] 			-GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @param [in] 			-PinNumber: specifies the port bit to read. Set by @ref GPIO_PINS_define
 * @retval 			    -none
 * Note				    -none
*/
void GPIOx_TOGGELE_PIN (typedef_GPIO* GPIOx,uint16_t PIN_NUM){
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR^=(PIN_NUM);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68da      	ldr	r2, [r3, #12]
 8000edc:	887b      	ldrh	r3, [r7, #2]
 8000ede:	405a      	eors	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	60da      	str	r2, [r3, #12]

}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr
	...

08000ef0 <SPI1_IRQHandler>:
	*DATA=SPIx->SPI_DR;
}


/* SPI1 global interrupt                          */
void SPI1_IRQHandler (void){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	/*struct S_IRQ_Source irq_src;
	irq_src.TXE = ((SPI1->SR >> 1) & 1);
	irq_src.RXNE = ((SPI1->SR >> 2) & 1);
	irq_src.ERRI = ((SPI1->SR >> 5) & 1);*/
	SPI_confige->SPI_IRQ_FUNCTION();
 8000ef4:	4b02      	ldr	r3, [pc, #8]	; (8000f00 <SPI1_IRQHandler+0x10>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	4798      	blx	r3

}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2000003c 	.word	0x2000003c

08000f04 <SPI2_IRQHandler>:
/* SPI2 global interrupt                          */
void SPI2_IRQHandler (void){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	/*struct S_IRQ_Source irq_src;
	irq_src.TXE = ((SPI1->SR >> 1) & 1);
	irq_src.RXNE = ((SPI1->SR >> 2) & 1);
	irq_src.ERRI = ((SPI1->SR >> 5) & 1);*/
	SPI_confige->SPI_IRQ_FUNCTION();
 8000f08:	4b02      	ldr	r3, [pc, #8]	; (8000f14 <SPI2_IRQHandler+0x10>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	4798      	blx	r3

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2000003c 	.word	0x2000003c

08000f18 <SPI3_IRQHandler>:
/* SPI3 global interrupt                          */
void SPI3_IRQHandler(void){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	/*struct S_IRQ_Source irq_src;
	irq_src.TXE = ((SPI1->SR >> 1) & 1);
	irq_src.RXNE = ((SPI1->SR >> 2) & 1);
	irq_src.ERRI = ((SPI1->SR >> 5) & 1);*/
	SPI_confige->SPI_IRQ_FUNCTION();
 8000f1c:	4b02      	ldr	r3, [pc, #8]	; (8000f28 <SPI3_IRQHandler+0x10>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	4798      	blx	r3

}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	2000003c 	.word	0x2000003c

08000f2c <USART1_IRQHandler>:
}



/* USART1 global interrupt                          */
void USART1_IRQHandler (void){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	USART_confige->IRQ_FUNCTION();
 8000f30:	4b02      	ldr	r3, [pc, #8]	; (8000f3c <USART1_IRQHandler+0x10>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	691b      	ldr	r3, [r3, #16]
 8000f36:	4798      	blx	r3

}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000040 	.word	0x20000040

08000f40 <USART2_IRQHandler>:
/* USART2 global interrupt                          */
void USART2_IRQHandler (void){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	USART_confige->IRQ_FUNCTION();
 8000f44:	4b02      	ldr	r3, [pc, #8]	; (8000f50 <USART2_IRQHandler+0x10>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	4798      	blx	r3

}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000040 	.word	0x20000040

08000f54 <USART3_IRQHandler>:
/* USART3 global interrupt                          */
void USART3_IRQHandler(void){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	USART_confige->IRQ_FUNCTION();
 8000f58:	4b02      	ldr	r3, [pc, #8]	; (8000f64 <USART3_IRQHandler+0x10>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	4798      	blx	r3

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000040 	.word	0x20000040

08000f68 <__libc_init_array>:
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	2500      	movs	r5, #0
 8000f6c:	4e0c      	ldr	r6, [pc, #48]	; (8000fa0 <__libc_init_array+0x38>)
 8000f6e:	4c0d      	ldr	r4, [pc, #52]	; (8000fa4 <__libc_init_array+0x3c>)
 8000f70:	1ba4      	subs	r4, r4, r6
 8000f72:	10a4      	asrs	r4, r4, #2
 8000f74:	42a5      	cmp	r5, r4
 8000f76:	d109      	bne.n	8000f8c <__libc_init_array+0x24>
 8000f78:	f000 f81a 	bl	8000fb0 <_init>
 8000f7c:	2500      	movs	r5, #0
 8000f7e:	4e0a      	ldr	r6, [pc, #40]	; (8000fa8 <__libc_init_array+0x40>)
 8000f80:	4c0a      	ldr	r4, [pc, #40]	; (8000fac <__libc_init_array+0x44>)
 8000f82:	1ba4      	subs	r4, r4, r6
 8000f84:	10a4      	asrs	r4, r4, #2
 8000f86:	42a5      	cmp	r5, r4
 8000f88:	d105      	bne.n	8000f96 <__libc_init_array+0x2e>
 8000f8a:	bd70      	pop	{r4, r5, r6, pc}
 8000f8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f90:	4798      	blx	r3
 8000f92:	3501      	adds	r5, #1
 8000f94:	e7ee      	b.n	8000f74 <__libc_init_array+0xc>
 8000f96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f9a:	4798      	blx	r3
 8000f9c:	3501      	adds	r5, #1
 8000f9e:	e7f2      	b.n	8000f86 <__libc_init_array+0x1e>
 8000fa0:	08000fd8 	.word	0x08000fd8
 8000fa4:	08000fd8 	.word	0x08000fd8
 8000fa8:	08000fd8 	.word	0x08000fd8
 8000fac:	08000fdc 	.word	0x08000fdc

08000fb0 <_init>:
 8000fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fb2:	bf00      	nop
 8000fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fb6:	bc08      	pop	{r3}
 8000fb8:	469e      	mov	lr, r3
 8000fba:	4770      	bx	lr

08000fbc <_fini>:
 8000fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fbe:	bf00      	nop
 8000fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fc2:	bc08      	pop	{r3}
 8000fc4:	469e      	mov	lr, r3
 8000fc6:	4770      	bx	lr
