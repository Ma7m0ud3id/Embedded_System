
Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000005d2  00000666  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  00800070  00800070  00000676  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000676  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012d6  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b57  00000000  00000000  00001b32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cf6  00000000  00000000  00002689  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000508  00000000  00000000  00003380  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a1  00000000  00000000  00003888  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dc3  00000000  00000000  00004029  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00004dec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__vector_1>
   8:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__vector_2>
   c:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_3>
  10:	0c 94 99 02 	jmp	0x532	; 0x532 <__vector_4>
  14:	0c 94 c0 02 	jmp	0x580	; 0x580 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_10>
  2c:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 39       	cpi	r26, 0x9B	; 155
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b8 01 	call	0x370	; 0x370 <main>
  8a:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Keypad_Init>:
int Row []={R0,R1,R2,R3};
int Culom []={C0,C1,C2,C3};


void Keypad_Init (void){
	Keypad_control &= ~((1<<R0)|(1<<R1)|(1<<R2)|(1<<R3));
  92:	84 b3       	in	r24, 0x14	; 20
  94:	80 7f       	andi	r24, 0xF0	; 240
  96:	84 bb       	out	0x14, r24	; 20
	Keypad_control |=((1<<C0)|(1<<C1)|(1<<C2)|(1<<C3));
  98:	84 b3       	in	r24, 0x14	; 20
  9a:	80 6f       	ori	r24, 0xF0	; 240
  9c:	84 bb       	out	0x14, r24	; 20
	Keypad=0xFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	85 bb       	out	0x15, r24	; 21
  a2:	08 95       	ret

000000a4 <Keypad_Result>:
}
unsigned char Keypad_Result (void){
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
	int i,j;
	for (i=0;i<4;i++)
  ac:	40 e0       	ldi	r20, 0x00	; 0
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	9d c0       	rjmp	.+314    	; 0x1ec <Keypad_Result+0x148>
	{
		Keypad |= ((1<<Culom[0]) | (1<<Culom[1]) | (1<<Culom[2]) | (1<<Culom[3]));
  b2:	35 b3       	in	r19, 0x15	; 21
  b4:	e0 e6       	ldi	r30, 0x60	; 96
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	8c 01       	movw	r16, r24
  be:	00 80       	ld	r0, Z
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <Keypad_Result+0x22>
  c2:	00 0f       	add	r16, r16
  c4:	11 1f       	adc	r17, r17
  c6:	0a 94       	dec	r0
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <Keypad_Result+0x1e>
  ca:	ec 01       	movw	r28, r24
  cc:	02 80       	ldd	r0, Z+2	; 0x02
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <Keypad_Result+0x30>
  d0:	cc 0f       	add	r28, r28
  d2:	dd 1f       	adc	r29, r29
  d4:	0a 94       	dec	r0
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <Keypad_Result+0x2c>
  d8:	dc 01       	movw	r26, r24
  da:	04 80       	ldd	r0, Z+4	; 0x04
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <Keypad_Result+0x3e>
  de:	aa 0f       	add	r26, r26
  e0:	bb 1f       	adc	r27, r27
  e2:	0a 94       	dec	r0
  e4:	e2 f7       	brpl	.-8      	; 0xde <Keypad_Result+0x3a>
  e6:	bc 01       	movw	r22, r24
  e8:	06 80       	ldd	r0, Z+6	; 0x06
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <Keypad_Result+0x4c>
  ec:	66 0f       	add	r22, r22
  ee:	77 1f       	adc	r23, r23
  f0:	0a 94       	dec	r0
  f2:	e2 f7       	brpl	.-8      	; 0xec <Keypad_Result+0x48>
  f4:	2c 2f       	mov	r18, r28
  f6:	20 2b       	or	r18, r16
  f8:	2a 2b       	or	r18, r26
  fa:	26 2b       	or	r18, r22
  fc:	23 2b       	or	r18, r19
  fe:	25 bb       	out	0x15, r18	; 21
		Keypad &=~(1<<Culom[i]);
 100:	25 b3       	in	r18, 0x15	; 21
 102:	fa 01       	movw	r30, r20
 104:	ee 0f       	add	r30, r30
 106:	ff 1f       	adc	r31, r31
 108:	e0 5a       	subi	r30, 0xA0	; 160
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	00 80       	ld	r0, Z
 10e:	02 c0       	rjmp	.+4      	; 0x114 <Keypad_Result+0x70>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	0a 94       	dec	r0
 116:	e2 f7       	brpl	.-8      	; 0x110 <Keypad_Result+0x6c>
 118:	80 95       	com	r24
 11a:	82 23       	and	r24, r18
 11c:	85 bb       	out	0x15, r24	; 21
		for(j = 0; j < 4; j++){
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	5e c0       	rjmp	.+188    	; 0x1e0 <Keypad_Result+0x13c>
			if (!(Keypad_Pin & (1 << Row[j])))
 124:	83 b3       	in	r24, 0x13	; 19
 126:	fb 01       	movw	r30, r22
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	e8 59       	subi	r30, 0x98	; 152
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	20 81       	ld	r18, Z
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 2e       	mov	r0, r18
 136:	02 c0       	rjmp	.+4      	; 0x13c <Keypad_Result+0x98>
 138:	95 95       	asr	r25
 13a:	87 95       	ror	r24
 13c:	0a 94       	dec	r0
 13e:	e2 f7       	brpl	.-8      	; 0x138 <Keypad_Result+0x94>
 140:	80 fd       	sbrc	r24, 0
 142:	4c c0       	rjmp	.+152    	; 0x1dc <Keypad_Result+0x138>
			{
				while(!(Keypad_Pin & (1 << Row[j])));
 144:	83 b3       	in	r24, 0x13	; 19
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 2e       	mov	r0, r18
 14a:	02 c0       	rjmp	.+4      	; 0x150 <Keypad_Result+0xac>
 14c:	95 95       	asr	r25
 14e:	87 95       	ror	r24
 150:	0a 94       	dec	r0
 152:	e2 f7       	brpl	.-8      	; 0x14c <Keypad_Result+0xa8>
 154:	80 ff       	sbrs	r24, 0
 156:	f6 cf       	rjmp	.-20     	; 0x144 <Keypad_Result+0xa0>
				switch(i){
 158:	41 30       	cpi	r20, 0x01	; 1
 15a:	51 05       	cpc	r21, r1
 15c:	c9 f0       	breq	.+50     	; 0x190 <Keypad_Result+0xec>
 15e:	24 f4       	brge	.+8      	; 0x168 <Keypad_Result+0xc4>
 160:	41 15       	cp	r20, r1
 162:	51 05       	cpc	r21, r1
 164:	41 f0       	breq	.+16     	; 0x176 <Keypad_Result+0xd2>
 166:	3a c0       	rjmp	.+116    	; 0x1dc <Keypad_Result+0x138>
 168:	42 30       	cpi	r20, 0x02	; 2
 16a:	51 05       	cpc	r21, r1
 16c:	f1 f0       	breq	.+60     	; 0x1aa <Keypad_Result+0x106>
 16e:	43 30       	cpi	r20, 0x03	; 3
 170:	51 05       	cpc	r21, r1
 172:	41 f1       	breq	.+80     	; 0x1c4 <Keypad_Result+0x120>
 174:	33 c0       	rjmp	.+102    	; 0x1dc <Keypad_Result+0x138>
					case (0):
					if (j == 0) return '7';
 176:	61 15       	cp	r22, r1
 178:	71 05       	cpc	r23, r1
 17a:	f1 f1       	breq	.+124    	; 0x1f8 <Keypad_Result+0x154>
					else if (j == 1) return '4';
 17c:	61 30       	cpi	r22, 0x01	; 1
 17e:	71 05       	cpc	r23, r1
 180:	e9 f1       	breq	.+122    	; 0x1fc <Keypad_Result+0x158>
					else if (j == 2) return '1';
 182:	62 30       	cpi	r22, 0x02	; 2
 184:	71 05       	cpc	r23, r1
 186:	e1 f1       	breq	.+120    	; 0x200 <Keypad_Result+0x15c>
					else if (j == 3) return '?';
 188:	63 30       	cpi	r22, 0x03	; 3
 18a:	71 05       	cpc	r23, r1
 18c:	39 f5       	brne	.+78     	; 0x1dc <Keypad_Result+0x138>
 18e:	3a c0       	rjmp	.+116    	; 0x204 <Keypad_Result+0x160>
					break;
					case (1):
					if (j == 0) return '8';
 190:	61 15       	cp	r22, r1
 192:	71 05       	cpc	r23, r1
 194:	c9 f1       	breq	.+114    	; 0x208 <Keypad_Result+0x164>
					else if (j == 1) return '5';
 196:	61 30       	cpi	r22, 0x01	; 1
 198:	71 05       	cpc	r23, r1
 19a:	c1 f1       	breq	.+112    	; 0x20c <Keypad_Result+0x168>
					else if (j == 2) return '2';
 19c:	62 30       	cpi	r22, 0x02	; 2
 19e:	71 05       	cpc	r23, r1
 1a0:	b9 f1       	breq	.+110    	; 0x210 <Keypad_Result+0x16c>
					else if (j == 3) return '0';
 1a2:	63 30       	cpi	r22, 0x03	; 3
 1a4:	71 05       	cpc	r23, r1
 1a6:	d1 f4       	brne	.+52     	; 0x1dc <Keypad_Result+0x138>
 1a8:	35 c0       	rjmp	.+106    	; 0x214 <Keypad_Result+0x170>
					break;
					case (2):
					if (j == 0) return '9';
 1aa:	61 15       	cp	r22, r1
 1ac:	71 05       	cpc	r23, r1
 1ae:	a1 f1       	breq	.+104    	; 0x218 <Keypad_Result+0x174>
					else if (j == 1) return '6';
 1b0:	61 30       	cpi	r22, 0x01	; 1
 1b2:	71 05       	cpc	r23, r1
 1b4:	99 f1       	breq	.+102    	; 0x21c <Keypad_Result+0x178>
					else if (j == 2) return '3';
 1b6:	62 30       	cpi	r22, 0x02	; 2
 1b8:	71 05       	cpc	r23, r1
 1ba:	91 f1       	breq	.+100    	; 0x220 <Keypad_Result+0x17c>
					else if (j == 3) return '=';
 1bc:	63 30       	cpi	r22, 0x03	; 3
 1be:	71 05       	cpc	r23, r1
 1c0:	69 f4       	brne	.+26     	; 0x1dc <Keypad_Result+0x138>
 1c2:	30 c0       	rjmp	.+96     	; 0x224 <Keypad_Result+0x180>
					break;
					case (3):
					if (j == 0) return '/';
 1c4:	61 15       	cp	r22, r1
 1c6:	71 05       	cpc	r23, r1
 1c8:	79 f1       	breq	.+94     	; 0x228 <Keypad_Result+0x184>
					else if (j == 1) return '*';
 1ca:	61 30       	cpi	r22, 0x01	; 1
 1cc:	71 05       	cpc	r23, r1
 1ce:	71 f1       	breq	.+92     	; 0x22c <Keypad_Result+0x188>
					else if (j == 2) return '-';
 1d0:	62 30       	cpi	r22, 0x02	; 2
 1d2:	71 05       	cpc	r23, r1
 1d4:	69 f1       	breq	.+90     	; 0x230 <Keypad_Result+0x18c>
					else if (j == 3) return '+';
 1d6:	63 30       	cpi	r22, 0x03	; 3
 1d8:	71 05       	cpc	r23, r1
 1da:	61 f1       	breq	.+88     	; 0x234 <Keypad_Result+0x190>
	int i,j;
	for (i=0;i<4;i++)
	{
		Keypad |= ((1<<Culom[0]) | (1<<Culom[1]) | (1<<Culom[2]) | (1<<Culom[3]));
		Keypad &=~(1<<Culom[i]);
		for(j = 0; j < 4; j++){
 1dc:	6f 5f       	subi	r22, 0xFF	; 255
 1de:	7f 4f       	sbci	r23, 0xFF	; 255
 1e0:	64 30       	cpi	r22, 0x04	; 4
 1e2:	71 05       	cpc	r23, r1
 1e4:	0c f4       	brge	.+2      	; 0x1e8 <Keypad_Result+0x144>
 1e6:	9e cf       	rjmp	.-196    	; 0x124 <Keypad_Result+0x80>
	Keypad_control |=((1<<C0)|(1<<C1)|(1<<C2)|(1<<C3));
	Keypad=0xFF;
}
unsigned char Keypad_Result (void){
	int i,j;
	for (i=0;i<4;i++)
 1e8:	4f 5f       	subi	r20, 0xFF	; 255
 1ea:	5f 4f       	sbci	r21, 0xFF	; 255
 1ec:	44 30       	cpi	r20, 0x04	; 4
 1ee:	51 05       	cpc	r21, r1
 1f0:	0c f4       	brge	.+2      	; 0x1f4 <Keypad_Result+0x150>
 1f2:	5f cf       	rjmp	.-322    	; 0xb2 <Keypad_Result+0xe>
					break;
				}
			}
		}
	}
	return 'A';
 1f4:	81 e4       	ldi	r24, 0x41	; 65
 1f6:	1f c0       	rjmp	.+62     	; 0x236 <Keypad_Result+0x192>
			if (!(Keypad_Pin & (1 << Row[j])))
			{
				while(!(Keypad_Pin & (1 << Row[j])));
				switch(i){
					case (0):
					if (j == 0) return '7';
 1f8:	87 e3       	ldi	r24, 0x37	; 55
 1fa:	1d c0       	rjmp	.+58     	; 0x236 <Keypad_Result+0x192>
					else if (j == 1) return '4';
 1fc:	84 e3       	ldi	r24, 0x34	; 52
 1fe:	1b c0       	rjmp	.+54     	; 0x236 <Keypad_Result+0x192>
					else if (j == 2) return '1';
 200:	81 e3       	ldi	r24, 0x31	; 49
 202:	19 c0       	rjmp	.+50     	; 0x236 <Keypad_Result+0x192>
					else if (j == 3) return '?';
 204:	8f e3       	ldi	r24, 0x3F	; 63
 206:	17 c0       	rjmp	.+46     	; 0x236 <Keypad_Result+0x192>
					break;
					case (1):
					if (j == 0) return '8';
 208:	88 e3       	ldi	r24, 0x38	; 56
 20a:	15 c0       	rjmp	.+42     	; 0x236 <Keypad_Result+0x192>
					else if (j == 1) return '5';
 20c:	85 e3       	ldi	r24, 0x35	; 53
 20e:	13 c0       	rjmp	.+38     	; 0x236 <Keypad_Result+0x192>
					else if (j == 2) return '2';
 210:	82 e3       	ldi	r24, 0x32	; 50
 212:	11 c0       	rjmp	.+34     	; 0x236 <Keypad_Result+0x192>
					else if (j == 3) return '0';
 214:	80 e3       	ldi	r24, 0x30	; 48
 216:	0f c0       	rjmp	.+30     	; 0x236 <Keypad_Result+0x192>
					break;
					case (2):
					if (j == 0) return '9';
 218:	89 e3       	ldi	r24, 0x39	; 57
 21a:	0d c0       	rjmp	.+26     	; 0x236 <Keypad_Result+0x192>
					else if (j == 1) return '6';
 21c:	86 e3       	ldi	r24, 0x36	; 54
 21e:	0b c0       	rjmp	.+22     	; 0x236 <Keypad_Result+0x192>
					else if (j == 2) return '3';
 220:	83 e3       	ldi	r24, 0x33	; 51
 222:	09 c0       	rjmp	.+18     	; 0x236 <Keypad_Result+0x192>
					else if (j == 3) return '=';
 224:	8d e3       	ldi	r24, 0x3D	; 61
 226:	07 c0       	rjmp	.+14     	; 0x236 <Keypad_Result+0x192>
					break;
					case (3):
					if (j == 0) return '/';
 228:	8f e2       	ldi	r24, 0x2F	; 47
 22a:	05 c0       	rjmp	.+10     	; 0x236 <Keypad_Result+0x192>
					else if (j == 1) return '*';
 22c:	8a e2       	ldi	r24, 0x2A	; 42
 22e:	03 c0       	rjmp	.+6      	; 0x236 <Keypad_Result+0x192>
					else if (j == 2) return '-';
 230:	8d e2       	ldi	r24, 0x2D	; 45
 232:	01 c0       	rjmp	.+2      	; 0x236 <Keypad_Result+0x192>
					else if (j == 3) return '+';
 234:	8b e2       	ldi	r24, 0x2B	; 43
			}
		}
	}
	return 'A';
	
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	0f 91       	pop	r16
 23e:	08 95       	ret

00000240 <LCD_lcd_kick>:
	Dir_lcd_port=0xFF;
	lcd_control &= ~(1<<RW_switch);
	
}*/
void LCD_lcd_kick(){
	lcd_control |= (1 << E_switch);
 240:	8b b3       	in	r24, 0x1b	; 27
 242:	84 60       	ori	r24, 0x04	; 4
 244:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 246:	83 ed       	ldi	r24, 0xD3	; 211
 248:	90 e3       	ldi	r25, 0x30	; 48
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <LCD_lcd_kick+0xa>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <LCD_lcd_kick+0x10>
 250:	00 00       	nop
	_delay_ms(50);
	lcd_control &= ~(1 << E_switch);
 252:	8b b3       	in	r24, 0x1b	; 27
 254:	8b 7f       	andi	r24, 0xFB	; 251
 256:	8b bb       	out	0x1b, r24	; 27
 258:	08 95       	ret

0000025a <LCD_check_lcd_isbusy>:
}

void LCD_check_lcd_isbusy(){
	Dir_lcd_port &= ~(0xFF<<Shift);
 25a:	8a b3       	in	r24, 0x1a	; 26
 25c:	1a ba       	out	0x1a, r1	; 26
	lcd_control |= (1 << RW_switch);
 25e:	8b b3       	in	r24, 0x1b	; 27
 260:	81 60       	ori	r24, 0x01	; 1
 262:	8b bb       	out	0x1b, r24	; 27
	lcd_control &= ~(1 << RS_switch);
 264:	8b b3       	in	r24, 0x1b	; 27
 266:	8d 7f       	andi	r24, 0xFD	; 253
 268:	8b bb       	out	0x1b, r24	; 27
	LCD_lcd_kick();
 26a:	0e 94 20 01 	call	0x240	; 0x240 <LCD_lcd_kick>
	Dir_lcd_port |= (0xFF<<Shift);
 26e:	8a b3       	in	r24, 0x1a	; 26
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	8a bb       	out	0x1a, r24	; 26
	lcd_control &= ~(1 << RW_switch);
 274:	8b b3       	in	r24, 0x1b	; 27
 276:	8e 7f       	andi	r24, 0xFE	; 254
 278:	8b bb       	out	0x1b, r24	; 27
 27a:	08 95       	ret

0000027c <Send_command>:
	
}


void Send_command (unsigned char command){
 27c:	cf 93       	push	r28
 27e:	c8 2f       	mov	r28, r24
	
	LCD_check_lcd_isbusy();
 280:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_check_lcd_isbusy>
	lcd_control &= ~((1 << RS_switch) | (1<<RW_switch));
	_delay_ms(1);
	LCD_lcd_kick();
	#endif*/
	#ifdef FOUR_BIT_MODE
	LCD_check_lcd_isbusy();
 284:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_check_lcd_isbusy>
	//lcd_port = (lcd_port & 0x0F) | (command & 0xF0);
	lcd_port = (lcd_port & 0x87) | ((command >>1) & 0x78);//phisical lcd
 288:	8b b3       	in	r24, 0x1b	; 27
 28a:	9c 2f       	mov	r25, r28
 28c:	96 95       	lsr	r25
 28e:	98 77       	andi	r25, 0x78	; 120
 290:	87 78       	andi	r24, 0x87	; 135
 292:	89 2b       	or	r24, r25
 294:	8b bb       	out	0x1b, r24	; 27
	lcd_control &= ~ ((1<<RW_switch)|(1<<RS_switch));
 296:	8b b3       	in	r24, 0x1b	; 27
 298:	8c 7f       	andi	r24, 0xFC	; 252
 29a:	8b bb       	out	0x1b, r24	; 27
	LCD_lcd_kick ();
 29c:	0e 94 20 01 	call	0x240	; 0x240 <LCD_lcd_kick>
	//lcd_port = (lcd_port & 0x0F) | (command << 4);
	lcd_port = (lcd_port & 0x87 ) | ((command <<3) & 0x78);//phisical lcd
 2a0:	2b b3       	in	r18, 0x1b	; 27
 2a2:	8c 2f       	mov	r24, r28
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	92 2f       	mov	r25, r18
 2b4:	97 78       	andi	r25, 0x87	; 135
 2b6:	88 77       	andi	r24, 0x78	; 120
 2b8:	89 2b       	or	r24, r25
 2ba:	8b bb       	out	0x1b, r24	; 27
	lcd_control &= ~ ((1<<RW_switch)|(1<<RS_switch));
 2bc:	8b b3       	in	r24, 0x1b	; 27
 2be:	8c 7f       	andi	r24, 0xFC	; 252
 2c0:	8b bb       	out	0x1b, r24	; 27
	LCD_lcd_kick();
 2c2:	0e 94 20 01 	call	0x240	; 0x240 <LCD_lcd_kick>
    #endif
	
	
	
}
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <LCD_clear_screen>:
void LCD_clear_screen(){
	Send_command(LCD_CLEAR_SCREEN);
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 3e 01 	call	0x27c	; 0x27c <Send_command>
 2d0:	08 95       	ret

000002d2 <Lcd_init>:
 2d2:	87 e8       	ldi	r24, 0x87	; 135
 2d4:	93 e1       	ldi	r25, 0x13	; 19
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <Lcd_init+0x4>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <Lcd_init+0xa>
 2dc:	00 00       	nop
}
void Lcd_init (){
	_delay_ms(20);
	//Lcd_ispusy();
	Dir_lcd_control |= ((1<<RW_switch)|(1<<RS_switch)|(1<<E_switch));
 2de:	8a b3       	in	r24, 0x1a	; 26
 2e0:	87 60       	ori	r24, 0x07	; 7
 2e2:	8a bb       	out	0x1a, r24	; 26
	lcd_control &= ~((1<<RW_switch)|(1<<RS_switch)|(1<<E_switch));
 2e4:	8b b3       	in	r24, 0x1b	; 27
 2e6:	88 7f       	andi	r24, 0xF8	; 248
 2e8:	8b bb       	out	0x1b, r24	; 27
	Dir_lcd_port = 0xFF;
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
 2ec:	8a bb       	out	0x1a, r24	; 26
 2ee:	85 ea       	ldi	r24, 0xA5	; 165
 2f0:	9e e0       	ldi	r25, 0x0E	; 14
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <Lcd_init+0x20>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <Lcd_init+0x26>
 2f8:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 2fa:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_clear_screen>
	#ifdef EIGHT_BIT_MODE
	   Send_command(LCD_FUNCTION_8BIT_2LINES);
	#endif
	#ifdef FOUR_BIT_MODE
	Send_command(0x02);
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	0e 94 3e 01 	call	0x27c	; 0x27c <Send_command>
	Send_command(LCD_FUNCTION_4BIT_2LINES);
 304:	88 e2       	ldi	r24, 0x28	; 40
 306:	0e 94 3e 01 	call	0x27c	; 0x27c <Send_command>
    #endif
	Send_command(LCD_ENTRY_MODE);
 30a:	86 e0       	ldi	r24, 0x06	; 6
 30c:	0e 94 3e 01 	call	0x27c	; 0x27c <Send_command>
	Send_command(LCD_BEGIN_AT_FIRST_ROW);
 310:	80 e8       	ldi	r24, 0x80	; 128
 312:	0e 94 3e 01 	call	0x27c	; 0x27c <Send_command>
	Send_command(LCD_DISP_ON);
 316:	8c e0       	ldi	r24, 0x0C	; 12
 318:	0e 94 3e 01 	call	0x27c	; 0x27c <Send_command>
 31c:	08 95       	ret

0000031e <LCD_WRITE_CHAR>:
	Kick();
	#endif
	#ifdef FOUR_BIT_MODE
	#endif
}*/
void LCD_WRITE_CHAR(unsigned char character){
 31e:	cf 93       	push	r28
 320:	c8 2f       	mov	r28, r24
	LCD_lcd_kick();
	#endif
	#ifdef FOUR_BIT_MODE
	//LCD_check_lcd_isbusy();
	//lcd_port = (lcd_port & 0x0F) | (character & 0xF0);
	lcd_port = (lcd_port & 0x87) | ((character >>1) & 0x78);//phisical lcd
 322:	8b b3       	in	r24, 0x1b	; 27
 324:	9c 2f       	mov	r25, r28
 326:	96 95       	lsr	r25
 328:	98 77       	andi	r25, 0x78	; 120
 32a:	87 78       	andi	r24, 0x87	; 135
 32c:	89 2b       	or	r24, r25
 32e:	8b bb       	out	0x1b, r24	; 27
	lcd_control |= 1<<RS_switch; //turn RS ON for Data mode.
 330:	8b b3       	in	r24, 0x1b	; 27
 332:	82 60       	ori	r24, 0x02	; 2
 334:	8b bb       	out	0x1b, r24	; 27
	lcd_control &= ~ (1<<RW_switch);//turn RW off so you can write.
 336:	8b b3       	in	r24, 0x1b	; 27
 338:	8e 7f       	andi	r24, 0xFE	; 254
 33a:	8b bb       	out	0x1b, r24	; 27
	LCD_lcd_kick();
 33c:	0e 94 20 01 	call	0x240	; 0x240 <LCD_lcd_kick>
	//lcd_port = (lcd_port & 0x0F) | (character << 4);
	lcd_port = (lcd_port & 0x87 ) | ((character << 3) & 0x78);//phisical lcd
 340:	2b b3       	in	r18, 0x1b	; 27
 342:	8c 2f       	mov	r24, r28
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	92 2f       	mov	r25, r18
 354:	97 78       	andi	r25, 0x87	; 135
 356:	88 77       	andi	r24, 0x78	; 120
 358:	89 2b       	or	r24, r25
 35a:	8b bb       	out	0x1b, r24	; 27
	lcd_control |= 1<<RS_switch; //turn RS ON for Data mode.
 35c:	8b b3       	in	r24, 0x1b	; 27
 35e:	82 60       	ori	r24, 0x02	; 2
 360:	8b bb       	out	0x1b, r24	; 27
	lcd_control &= ~ (1<<RW_switch);//turn RW off so you can write.
 362:	8b b3       	in	r24, 0x1b	; 27
 364:	8e 7f       	andi	r24, 0xFE	; 254
 366:	8b bb       	out	0x1b, r24	; 27
	LCD_lcd_kick ();
 368:	0e 94 20 01 	call	0x240	; 0x240 <LCD_lcd_kick>
	#endif
}
 36c:	cf 91       	pop	r28
 36e:	08 95       	ret

00000370 <main>:
int main(void)
{
	
	
	
	Lcd_init();
 370:	0e 94 69 01 	call	0x2d2	; 0x2d2 <Lcd_init>
	Keypad_Init();
 374:	0e 94 49 00 	call	0x92	; 0x92 <Keypad_Init>
 378:	83 ed       	ldi	r24, 0xD3	; 211
 37a:	90 e3       	ldi	r25, 0x30	; 48
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <main+0xc>
 380:	00 c0       	rjmp	.+0      	; 0x382 <main+0x12>
 382:	00 00       	nop
	_delay_ms(50);
	unsigned char key_pressed;
	while(1){
		
		key_pressed = Keypad_Result();
 384:	0e 94 52 00 	call	0xa4	; 0xa4 <Keypad_Result>
			switch(key_pressed){
 388:	8f 33       	cpi	r24, 0x3F	; 63
 38a:	19 f0       	breq	.+6      	; 0x392 <main+0x22>
 38c:	81 34       	cpi	r24, 0x41	; 65
 38e:	d1 f3       	breq	.-12     	; 0x384 <main+0x14>
 390:	05 c0       	rjmp	.+10     	; 0x39c <main+0x2c>
			case 'A':
			break;
			case '?':
			counter=0;
 392:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
			LCD_clear_screen();
 396:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_clear_screen>
			break;
 39a:	f4 cf       	rjmp	.-24     	; 0x384 <main+0x14>
			default:
			LCD_WRITE_CHAR(key_pressed);
 39c:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_WRITE_CHAR>
			counter++;
 3a0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 3a4:	8f 5f       	subi	r24, 0xFF	; 255
 3a6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
			break;
 3aa:	ec cf       	rjmp	.-40     	; 0x384 <main+0x14>

000003ac <__vector_1>:
	
	EXTI_config[index].EXTI_Function();
	
}*/
void  __vector_1 (void) __attribute__((signal));
void __vector_1 (void){
 3ac:	1f 92       	push	r1
 3ae:	0f 92       	push	r0
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	0f 92       	push	r0
 3b4:	11 24       	eor	r1, r1
 3b6:	2f 93       	push	r18
 3b8:	3f 93       	push	r19
 3ba:	4f 93       	push	r20
 3bc:	5f 93       	push	r21
 3be:	6f 93       	push	r22
 3c0:	7f 93       	push	r23
 3c2:	8f 93       	push	r24
 3c4:	9f 93       	push	r25
 3c6:	af 93       	push	r26
 3c8:	bf 93       	push	r27
 3ca:	ef 93       	push	r30
 3cc:	ff 93       	push	r31
	EXTI_config[(uint8_t)0].EXTI_Function();
 3ce:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <EXTI_config+0x2>
 3d2:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <EXTI_config+0x3>
 3d6:	09 95       	icall
}
 3d8:	ff 91       	pop	r31
 3da:	ef 91       	pop	r30
 3dc:	bf 91       	pop	r27
 3de:	af 91       	pop	r26
 3e0:	9f 91       	pop	r25
 3e2:	8f 91       	pop	r24
 3e4:	7f 91       	pop	r23
 3e6:	6f 91       	pop	r22
 3e8:	5f 91       	pop	r21
 3ea:	4f 91       	pop	r20
 3ec:	3f 91       	pop	r19
 3ee:	2f 91       	pop	r18
 3f0:	0f 90       	pop	r0
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	0f 90       	pop	r0
 3f6:	1f 90       	pop	r1
 3f8:	18 95       	reti

000003fa <__vector_2>:

void  __vector_2 (void) __attribute__((signal));
void __vector_2 (void){
 3fa:	1f 92       	push	r1
 3fc:	0f 92       	push	r0
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	0f 92       	push	r0
 402:	11 24       	eor	r1, r1
 404:	2f 93       	push	r18
 406:	3f 93       	push	r19
 408:	4f 93       	push	r20
 40a:	5f 93       	push	r21
 40c:	6f 93       	push	r22
 40e:	7f 93       	push	r23
 410:	8f 93       	push	r24
 412:	9f 93       	push	r25
 414:	af 93       	push	r26
 416:	bf 93       	push	r27
 418:	ef 93       	push	r30
 41a:	ff 93       	push	r31
	EXTI_config[(uint8_t)1].EXTI_Function();
 41c:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <EXTI_config+0x6>
 420:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <EXTI_config+0x7>
 424:	09 95       	icall
}
 426:	ff 91       	pop	r31
 428:	ef 91       	pop	r30
 42a:	bf 91       	pop	r27
 42c:	af 91       	pop	r26
 42e:	9f 91       	pop	r25
 430:	8f 91       	pop	r24
 432:	7f 91       	pop	r23
 434:	6f 91       	pop	r22
 436:	5f 91       	pop	r21
 438:	4f 91       	pop	r20
 43a:	3f 91       	pop	r19
 43c:	2f 91       	pop	r18
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

00000448 <__vector_3>:

void  __vector_3 (void) __attribute__((signal));
void __vector_3 (void){
 448:	1f 92       	push	r1
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	11 24       	eor	r1, r1
 452:	2f 93       	push	r18
 454:	3f 93       	push	r19
 456:	4f 93       	push	r20
 458:	5f 93       	push	r21
 45a:	6f 93       	push	r22
 45c:	7f 93       	push	r23
 45e:	8f 93       	push	r24
 460:	9f 93       	push	r25
 462:	af 93       	push	r26
 464:	bf 93       	push	r27
 466:	ef 93       	push	r30
 468:	ff 93       	push	r31
	EXTI_config[(uint8_t)2].EXTI_Function();
 46a:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <EXTI_config+0xa>
 46e:	f0 91 7c 00 	lds	r31, 0x007C	; 0x80007c <EXTI_config+0xb>
 472:	09 95       	icall
}
 474:	ff 91       	pop	r31
 476:	ef 91       	pop	r30
 478:	bf 91       	pop	r27
 47a:	af 91       	pop	r26
 47c:	9f 91       	pop	r25
 47e:	8f 91       	pop	r24
 480:	7f 91       	pop	r23
 482:	6f 91       	pop	r22
 484:	5f 91       	pop	r21
 486:	4f 91       	pop	r20
 488:	3f 91       	pop	r19
 48a:	2f 91       	pop	r18
 48c:	0f 90       	pop	r0
 48e:	0f be       	out	0x3f, r0	; 63
 490:	0f 90       	pop	r0
 492:	1f 90       	pop	r1
 494:	18 95       	reti

00000496 <__vector_10>:
//****************************************************************


//Timer/Counter0 Compare Match
void  __vector_10 (void) __attribute__((signal));
void __vector_10 (void){
 496:	1f 92       	push	r1
 498:	0f 92       	push	r0
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	0f 92       	push	r0
 49e:	11 24       	eor	r1, r1
 4a0:	2f 93       	push	r18
 4a2:	3f 93       	push	r19
 4a4:	4f 93       	push	r20
 4a6:	5f 93       	push	r21
 4a8:	6f 93       	push	r22
 4aa:	7f 93       	push	r23
 4ac:	8f 93       	push	r24
 4ae:	9f 93       	push	r25
 4b0:	af 93       	push	r26
 4b2:	bf 93       	push	r27
 4b4:	ef 93       	push	r30
 4b6:	ff 93       	push	r31
	Time_con[0].Timer_Call_Back_Compare();
 4b8:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <Time_con+0x6>
 4bc:	f0 91 84 00 	lds	r31, 0x0084	; 0x800084 <Time_con+0x7>
 4c0:	09 95       	icall
}
 4c2:	ff 91       	pop	r31
 4c4:	ef 91       	pop	r30
 4c6:	bf 91       	pop	r27
 4c8:	af 91       	pop	r26
 4ca:	9f 91       	pop	r25
 4cc:	8f 91       	pop	r24
 4ce:	7f 91       	pop	r23
 4d0:	6f 91       	pop	r22
 4d2:	5f 91       	pop	r21
 4d4:	4f 91       	pop	r20
 4d6:	3f 91       	pop	r19
 4d8:	2f 91       	pop	r18
 4da:	0f 90       	pop	r0
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	0f 90       	pop	r0
 4e0:	1f 90       	pop	r1
 4e2:	18 95       	reti

000004e4 <__vector_11>:


//Timer/Counter0 Overflow
void  __vector_11 (void) __attribute__((signal));
void __vector_11 (void){
 4e4:	1f 92       	push	r1
 4e6:	0f 92       	push	r0
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	0f 92       	push	r0
 4ec:	11 24       	eor	r1, r1
 4ee:	2f 93       	push	r18
 4f0:	3f 93       	push	r19
 4f2:	4f 93       	push	r20
 4f4:	5f 93       	push	r21
 4f6:	6f 93       	push	r22
 4f8:	7f 93       	push	r23
 4fa:	8f 93       	push	r24
 4fc:	9f 93       	push	r25
 4fe:	af 93       	push	r26
 500:	bf 93       	push	r27
 502:	ef 93       	push	r30
 504:	ff 93       	push	r31
	Time_con[0].Timer_Call_Back_overflow();
 506:	e0 91 85 00 	lds	r30, 0x0085	; 0x800085 <Time_con+0x8>
 50a:	f0 91 86 00 	lds	r31, 0x0086	; 0x800086 <Time_con+0x9>
 50e:	09 95       	icall
}
 510:	ff 91       	pop	r31
 512:	ef 91       	pop	r30
 514:	bf 91       	pop	r27
 516:	af 91       	pop	r26
 518:	9f 91       	pop	r25
 51a:	8f 91       	pop	r24
 51c:	7f 91       	pop	r23
 51e:	6f 91       	pop	r22
 520:	5f 91       	pop	r21
 522:	4f 91       	pop	r20
 524:	3f 91       	pop	r19
 526:	2f 91       	pop	r18
 528:	0f 90       	pop	r0
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	0f 90       	pop	r0
 52e:	1f 90       	pop	r1
 530:	18 95       	reti

00000532 <__vector_4>:


//Timer/Counter2 Compare Match
void  __vector_4 (void) __attribute__((signal));
void __vector_4 (void){
 532:	1f 92       	push	r1
 534:	0f 92       	push	r0
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	0f 92       	push	r0
 53a:	11 24       	eor	r1, r1
 53c:	2f 93       	push	r18
 53e:	3f 93       	push	r19
 540:	4f 93       	push	r20
 542:	5f 93       	push	r21
 544:	6f 93       	push	r22
 546:	7f 93       	push	r23
 548:	8f 93       	push	r24
 54a:	9f 93       	push	r25
 54c:	af 93       	push	r26
 54e:	bf 93       	push	r27
 550:	ef 93       	push	r30
 552:	ff 93       	push	r31
	Time_con[2].Timer_Call_Back_Compare();
 554:	e0 91 97 00 	lds	r30, 0x0097	; 0x800097 <Time_con+0x1a>
 558:	f0 91 98 00 	lds	r31, 0x0098	; 0x800098 <Time_con+0x1b>
 55c:	09 95       	icall
}
 55e:	ff 91       	pop	r31
 560:	ef 91       	pop	r30
 562:	bf 91       	pop	r27
 564:	af 91       	pop	r26
 566:	9f 91       	pop	r25
 568:	8f 91       	pop	r24
 56a:	7f 91       	pop	r23
 56c:	6f 91       	pop	r22
 56e:	5f 91       	pop	r21
 570:	4f 91       	pop	r20
 572:	3f 91       	pop	r19
 574:	2f 91       	pop	r18
 576:	0f 90       	pop	r0
 578:	0f be       	out	0x3f, r0	; 63
 57a:	0f 90       	pop	r0
 57c:	1f 90       	pop	r1
 57e:	18 95       	reti

00000580 <__vector_5>:


//Timer/Counter2 Overflow
void  __vector_5 (void) __attribute__((signal));
void __vector_5 (void){
 580:	1f 92       	push	r1
 582:	0f 92       	push	r0
 584:	0f b6       	in	r0, 0x3f	; 63
 586:	0f 92       	push	r0
 588:	11 24       	eor	r1, r1
 58a:	2f 93       	push	r18
 58c:	3f 93       	push	r19
 58e:	4f 93       	push	r20
 590:	5f 93       	push	r21
 592:	6f 93       	push	r22
 594:	7f 93       	push	r23
 596:	8f 93       	push	r24
 598:	9f 93       	push	r25
 59a:	af 93       	push	r26
 59c:	bf 93       	push	r27
 59e:	ef 93       	push	r30
 5a0:	ff 93       	push	r31
	Time_con[2].Timer_Call_Back_overflow();
 5a2:	e0 91 99 00 	lds	r30, 0x0099	; 0x800099 <Time_con+0x1c>
 5a6:	f0 91 9a 00 	lds	r31, 0x009A	; 0x80009a <Time_con+0x1d>
 5aa:	09 95       	icall
}
 5ac:	ff 91       	pop	r31
 5ae:	ef 91       	pop	r30
 5b0:	bf 91       	pop	r27
 5b2:	af 91       	pop	r26
 5b4:	9f 91       	pop	r25
 5b6:	8f 91       	pop	r24
 5b8:	7f 91       	pop	r23
 5ba:	6f 91       	pop	r22
 5bc:	5f 91       	pop	r21
 5be:	4f 91       	pop	r20
 5c0:	3f 91       	pop	r19
 5c2:	2f 91       	pop	r18
 5c4:	0f 90       	pop	r0
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	0f 90       	pop	r0
 5ca:	1f 90       	pop	r1
 5cc:	18 95       	reti

000005ce <_exit>:
 5ce:	f8 94       	cli

000005d0 <__stop_program>:
 5d0:	ff cf       	rjmp	.-2      	; 0x5d0 <__stop_program>
