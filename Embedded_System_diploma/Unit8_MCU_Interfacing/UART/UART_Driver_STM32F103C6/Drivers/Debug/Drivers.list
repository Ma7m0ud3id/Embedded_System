
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000984  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000ab4  08000ab4  00010ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ad0  08000ad0  00010ad8  2**0
                  CONTENTS
  4 .ARM          00000000  08000ad0  08000ad0  00010ad8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ad0  08000ad8  00010ad8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ad0  08000ad0  00010ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ad4  08000ad4  00010ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ad8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000000  08000ad8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08000ad8  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ad8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005078  00000000  00000000  00010b01  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c80  00000000  00000000  00015b79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000dac  00000000  00000000  000167f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000240  00000000  00000000  000175a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d8  00000000  00000000  000177e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001639  00000000  00000000  000179c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000298e  00000000  00000000  00018ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000c013  00000000  00000000  0001b987  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002799a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000730  00000000  00000000  00027a18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a9c 	.word	0x08000a9c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000a9c 	.word	0x08000a9c

08000170 <Clock_Init>:
#include "Stm32f103x8_SPI_drivers.h"
#include "Lcd.h"
#include "Keypad.h"

void Clock_Init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//open clock of AFIO
	RCC_AFIO_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <Clock_Init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <Clock_Init+0x30>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6193      	str	r3, [r2, #24]
	//open clock of GPIOA
	RCC_GPIOA_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <Clock_Init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <Clock_Init+0x30>)
 8000186:	f043 0304 	orr.w	r3, r3, #4
 800018a:	6193      	str	r3, [r2, #24]

	//open clock of GPIOB
	RCC_GPIOB_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <Clock_Init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <Clock_Init+0x30>)
 8000192:	f043 0308 	orr.w	r3, r3, #8
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <main>:
}


EXTI_Configer_t EXTI_CONGIG;
int main(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b086      	sub	sp, #24
 80001a8:	af00      	add	r7, sp, #0

	Clock_Init();
 80001aa:	f7ff ffe1 	bl	8000170 <Clock_Init>
	UART_CFG.IRQ_ENABLE = USART_IRQ_ENABLE_RXNEIE;
	UART_CFG.IRQ_FUNCTION = UART_IRQ_CallBack;*/

	//**************************************Lab1_UART**********************
	USART_Pinconfige_t UART_CFG;
	UART_CFG.UART_MODE = USART_TX_RX;
 80001ae:	230c      	movs	r3, #12
 80001b0:	713b      	strb	r3, [r7, #4]
	UART_CFG.DATA_SIZE = USART_8_BIT;
 80001b2:	2300      	movs	r3, #0
 80001b4:	733b      	strb	r3, [r7, #12]
	UART_CFG.STOP_MODE = USART_1_STOP_BIT;
 80001b6:	2300      	movs	r3, #0
 80001b8:	73bb      	strb	r3, [r7, #14]
	UART_CFG.Parity = USART_NON_PARITY;
 80001ba:	2300      	movs	r3, #0
 80001bc:	737b      	strb	r3, [r7, #13]
	UART_CFG.UART_Baud_Rate = USART_BaudRate_115200;
 80001be:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80001c2:	60bb      	str	r3, [r7, #8]
	UART_CFG.UART_HW_FLOW_CTL = USART_HW_FLOW_NON;
 80001c4:	2300      	movs	r3, #0
 80001c6:	73fb      	strb	r3, [r7, #15]
	UART_CFG.IRQ_ENABLE = USART_IRQ_ENABLE_NON;
 80001c8:	2300      	movs	r3, #0
 80001ca:	743b      	strb	r3, [r7, #16]
	UART_CFG.IRQ_FUNCTION = NULL;
 80001cc:	2300      	movs	r3, #0
 80001ce:	617b      	str	r3, [r7, #20]

	MCAL_UART_Init(USART1, &UART_CFG);
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	4619      	mov	r1, r3
 80001d4:	4808      	ldr	r0, [pc, #32]	; (80001f8 <main+0x54>)
 80001d6:	f000 fa83 	bl	80006e0 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 80001da:	4807      	ldr	r0, [pc, #28]	; (80001f8 <main+0x54>)
 80001dc:	f000 fb62 	bl	80008a4 <MCAL_UART_GPIO_Set_Pins>
	/*LCD_Send_string("USRT INIT");
	__delay__(600);
	LCD_clear_screen();*/
	while(1){
		//**************************************Lab1_UART**********************
		MCAL_UART_ReceiveData(USART1, &ch, DISABLE);
 80001e0:	2201      	movs	r2, #1
 80001e2:	4906      	ldr	r1, [pc, #24]	; (80001fc <main+0x58>)
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <main+0x54>)
 80001e6:	f000 fbe5 	bl	80009b4 <MCAL_UART_ReceiveData>
		MCAL_UART_SendData(USART1, &ch, ENABLE);
 80001ea:	2200      	movs	r2, #0
 80001ec:	4903      	ldr	r1, [pc, #12]	; (80001fc <main+0x58>)
 80001ee:	4802      	ldr	r0, [pc, #8]	; (80001f8 <main+0x54>)
 80001f0:	f000 fbbe 	bl	8000970 <MCAL_UART_SendData>
		MCAL_UART_ReceiveData(USART1, &ch, DISABLE);
 80001f4:	e7f4      	b.n	80001e0 <main+0x3c>
 80001f6:	bf00      	nop
 80001f8:	40013800 	.word	0x40013800
 80001fc:	20000038 	.word	0x20000038

08000200 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000200:	480d      	ldr	r0, [pc, #52]	; (8000238 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000202:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000204:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000208:	480c      	ldr	r0, [pc, #48]	; (800023c <LoopForever+0x6>)
  ldr r1, =_edata
 800020a:	490d      	ldr	r1, [pc, #52]	; (8000240 <LoopForever+0xa>)
  ldr r2, =_sidata
 800020c:	4a0d      	ldr	r2, [pc, #52]	; (8000244 <LoopForever+0xe>)
  movs r3, #0
 800020e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000210:	e002      	b.n	8000218 <LoopCopyDataInit>

08000212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000216:	3304      	adds	r3, #4

08000218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800021a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800021c:	d3f9      	bcc.n	8000212 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800021e:	4a0a      	ldr	r2, [pc, #40]	; (8000248 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000220:	4c0a      	ldr	r4, [pc, #40]	; (800024c <LoopForever+0x16>)
  movs r3, #0
 8000222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000224:	e001      	b.n	800022a <LoopFillZerobss>

08000226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000228:	3204      	adds	r2, #4

0800022a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800022a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800022c:	d3fb      	bcc.n	8000226 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800022e:	f000 fc11 	bl	8000a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000232:	f7ff ffb7 	bl	80001a4 <main>

08000236 <LoopForever>:

LoopForever:
    b LoopForever
 8000236:	e7fe      	b.n	8000236 <LoopForever>
  ldr   r0, =_estack
 8000238:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800023c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000240:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000244:	08000ad8 	.word	0x08000ad8
  ldr r2, =_sbss
 8000248:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800024c:	20000078 	.word	0x20000078

08000250 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000250:	e7fe      	b.n	8000250 <ADC1_2_IRQHandler>
	...

08000254 <EXTI0_IRQHandler>:

	Updata(P_EXTI_Confige);
}
//=========================================ISR==============================================
void EXTI0_IRQHandler(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	//write 1 to clear pending bit,to stop sending interrupt again
	EXTI->PR = 1<<0;
 8000258:	4b03      	ldr	r3, [pc, #12]	; (8000268 <EXTI0_IRQHandler+0x14>)
 800025a:	2201      	movs	r2, #1
 800025c:	615a      	str	r2, [r3, #20]
	//callback
	Gp_call_back_func[0]();
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <EXTI0_IRQHandler+0x18>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4798      	blx	r3
}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}
 8000268:	40010400 	.word	0x40010400
 800026c:	2000003c 	.word	0x2000003c

08000270 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<1;
 8000274:	4b03      	ldr	r3, [pc, #12]	; (8000284 <EXTI1_IRQHandler+0x14>)
 8000276:	2202      	movs	r2, #2
 8000278:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[1]();
 800027a:	4b03      	ldr	r3, [pc, #12]	; (8000288 <EXTI1_IRQHandler+0x18>)
 800027c:	685b      	ldr	r3, [r3, #4]
 800027e:	4798      	blx	r3
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	40010400 	.word	0x40010400
 8000288:	2000003c 	.word	0x2000003c

0800028c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<2;
 8000290:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <EXTI2_IRQHandler+0x14>)
 8000292:	2204      	movs	r2, #4
 8000294:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[2]();
 8000296:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <EXTI2_IRQHandler+0x18>)
 8000298:	689b      	ldr	r3, [r3, #8]
 800029a:	4798      	blx	r3
}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40010400 	.word	0x40010400
 80002a4:	2000003c 	.word	0x2000003c

080002a8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<3;
 80002ac:	4b03      	ldr	r3, [pc, #12]	; (80002bc <EXTI3_IRQHandler+0x14>)
 80002ae:	2208      	movs	r2, #8
 80002b0:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[3]();
 80002b2:	4b03      	ldr	r3, [pc, #12]	; (80002c0 <EXTI3_IRQHandler+0x18>)
 80002b4:	68db      	ldr	r3, [r3, #12]
 80002b6:	4798      	blx	r3
}
 80002b8:	bf00      	nop
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	40010400 	.word	0x40010400
 80002c0:	2000003c 	.word	0x2000003c

080002c4 <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<4;
 80002c8:	4b03      	ldr	r3, [pc, #12]	; (80002d8 <EXTI4_IRQHandler+0x14>)
 80002ca:	2210      	movs	r2, #16
 80002cc:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[4]();
 80002ce:	4b03      	ldr	r3, [pc, #12]	; (80002dc <EXTI4_IRQHandler+0x18>)
 80002d0:	691b      	ldr	r3, [r3, #16]
 80002d2:	4798      	blx	r3
}
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40010400 	.word	0x40010400
 80002dc:	2000003c 	.word	0x2000003c

080002e0 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
    /* here i check which interrupt is that, cause all interrupts from
	 5---9  arrived on same pin at NVIC
	so we will know which interrupt for ,by checking PR register if its one so its
	and then we write 1 on PR reg to disable interrupt  */
	if(EXTI->PR & 1<<5) { EXTI->PR  = 1<<5;   Gp_call_back_func[5](); }
 80002e4:	4b1f      	ldr	r3, [pc, #124]	; (8000364 <EXTI9_5_IRQHandler+0x84>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	f003 0320 	and.w	r3, r3, #32
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d005      	beq.n	80002fc <EXTI9_5_IRQHandler+0x1c>
 80002f0:	4b1c      	ldr	r3, [pc, #112]	; (8000364 <EXTI9_5_IRQHandler+0x84>)
 80002f2:	2220      	movs	r2, #32
 80002f4:	615a      	str	r2, [r3, #20]
 80002f6:	4b1c      	ldr	r3, [pc, #112]	; (8000368 <EXTI9_5_IRQHandler+0x88>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR  = 1<<6;   Gp_call_back_func[6](); }
 80002fc:	4b19      	ldr	r3, [pc, #100]	; (8000364 <EXTI9_5_IRQHandler+0x84>)
 80002fe:	695b      	ldr	r3, [r3, #20]
 8000300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000304:	2b00      	cmp	r3, #0
 8000306:	d005      	beq.n	8000314 <EXTI9_5_IRQHandler+0x34>
 8000308:	4b16      	ldr	r3, [pc, #88]	; (8000364 <EXTI9_5_IRQHandler+0x84>)
 800030a:	2240      	movs	r2, #64	; 0x40
 800030c:	615a      	str	r2, [r3, #20]
 800030e:	4b16      	ldr	r3, [pc, #88]	; (8000368 <EXTI9_5_IRQHandler+0x88>)
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR  = 1<<7;   Gp_call_back_func[7](); }
 8000314:	4b13      	ldr	r3, [pc, #76]	; (8000364 <EXTI9_5_IRQHandler+0x84>)
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800031c:	2b00      	cmp	r3, #0
 800031e:	d005      	beq.n	800032c <EXTI9_5_IRQHandler+0x4c>
 8000320:	4b10      	ldr	r3, [pc, #64]	; (8000364 <EXTI9_5_IRQHandler+0x84>)
 8000322:	2280      	movs	r2, #128	; 0x80
 8000324:	615a      	str	r2, [r3, #20]
 8000326:	4b10      	ldr	r3, [pc, #64]	; (8000368 <EXTI9_5_IRQHandler+0x88>)
 8000328:	69db      	ldr	r3, [r3, #28]
 800032a:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR  = 1<<8;   Gp_call_back_func[8](); }
 800032c:	4b0d      	ldr	r3, [pc, #52]	; (8000364 <EXTI9_5_IRQHandler+0x84>)
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000334:	2b00      	cmp	r3, #0
 8000336:	d006      	beq.n	8000346 <EXTI9_5_IRQHandler+0x66>
 8000338:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <EXTI9_5_IRQHandler+0x84>)
 800033a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800033e:	615a      	str	r2, [r3, #20]
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <EXTI9_5_IRQHandler+0x88>)
 8000342:	6a1b      	ldr	r3, [r3, #32]
 8000344:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR  = 1<<9;   Gp_call_back_func[9](); }
 8000346:	4b07      	ldr	r3, [pc, #28]	; (8000364 <EXTI9_5_IRQHandler+0x84>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800034e:	2b00      	cmp	r3, #0
 8000350:	d006      	beq.n	8000360 <EXTI9_5_IRQHandler+0x80>
 8000352:	4b04      	ldr	r3, [pc, #16]	; (8000364 <EXTI9_5_IRQHandler+0x84>)
 8000354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000358:	615a      	str	r2, [r3, #20]
 800035a:	4b03      	ldr	r3, [pc, #12]	; (8000368 <EXTI9_5_IRQHandler+0x88>)
 800035c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800035e:	4798      	blx	r3
}
 8000360:	bf00      	nop
 8000362:	bd80      	pop	{r7, pc}
 8000364:	40010400 	.word	0x40010400
 8000368:	2000003c 	.word	0x2000003c

0800036c <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void){
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0

	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10; Gp_call_back_func[10](); }
 8000370:	4b2d      	ldr	r3, [pc, #180]	; (8000428 <EXTI15_10_IRQHandler+0xbc>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000378:	2b00      	cmp	r3, #0
 800037a:	d008      	beq.n	800038e <EXTI15_10_IRQHandler+0x22>
 800037c:	4b2a      	ldr	r3, [pc, #168]	; (8000428 <EXTI15_10_IRQHandler+0xbc>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	4a29      	ldr	r2, [pc, #164]	; (8000428 <EXTI15_10_IRQHandler+0xbc>)
 8000382:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000386:	6153      	str	r3, [r2, #20]
 8000388:	4b28      	ldr	r3, [pc, #160]	; (800042c <EXTI15_10_IRQHandler+0xc0>)
 800038a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800038c:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11; Gp_call_back_func[11](); }
 800038e:	4b26      	ldr	r3, [pc, #152]	; (8000428 <EXTI15_10_IRQHandler+0xbc>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000396:	2b00      	cmp	r3, #0
 8000398:	d008      	beq.n	80003ac <EXTI15_10_IRQHandler+0x40>
 800039a:	4b23      	ldr	r3, [pc, #140]	; (8000428 <EXTI15_10_IRQHandler+0xbc>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a22      	ldr	r2, [pc, #136]	; (8000428 <EXTI15_10_IRQHandler+0xbc>)
 80003a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003a4:	6153      	str	r3, [r2, #20]
 80003a6:	4b21      	ldr	r3, [pc, #132]	; (800042c <EXTI15_10_IRQHandler+0xc0>)
 80003a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003aa:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12; Gp_call_back_func[12](); }
 80003ac:	4b1e      	ldr	r3, [pc, #120]	; (8000428 <EXTI15_10_IRQHandler+0xbc>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d008      	beq.n	80003ca <EXTI15_10_IRQHandler+0x5e>
 80003b8:	4b1b      	ldr	r3, [pc, #108]	; (8000428 <EXTI15_10_IRQHandler+0xbc>)
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	4a1a      	ldr	r2, [pc, #104]	; (8000428 <EXTI15_10_IRQHandler+0xbc>)
 80003be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003c2:	6153      	str	r3, [r2, #20]
 80003c4:	4b19      	ldr	r3, [pc, #100]	; (800042c <EXTI15_10_IRQHandler+0xc0>)
 80003c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c8:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13; Gp_call_back_func[13](); }
 80003ca:	4b17      	ldr	r3, [pc, #92]	; (8000428 <EXTI15_10_IRQHandler+0xbc>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d008      	beq.n	80003e8 <EXTI15_10_IRQHandler+0x7c>
 80003d6:	4b14      	ldr	r3, [pc, #80]	; (8000428 <EXTI15_10_IRQHandler+0xbc>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	4a13      	ldr	r2, [pc, #76]	; (8000428 <EXTI15_10_IRQHandler+0xbc>)
 80003dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003e0:	6153      	str	r3, [r2, #20]
 80003e2:	4b12      	ldr	r3, [pc, #72]	; (800042c <EXTI15_10_IRQHandler+0xc0>)
 80003e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003e6:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14; Gp_call_back_func[14](); }
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <EXTI15_10_IRQHandler+0xbc>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d008      	beq.n	8000406 <EXTI15_10_IRQHandler+0x9a>
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <EXTI15_10_IRQHandler+0xbc>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	4a0b      	ldr	r2, [pc, #44]	; (8000428 <EXTI15_10_IRQHandler+0xbc>)
 80003fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003fe:	6153      	str	r3, [r2, #20]
 8000400:	4b0a      	ldr	r3, [pc, #40]	; (800042c <EXTI15_10_IRQHandler+0xc0>)
 8000402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000404:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<15; Gp_call_back_func[15](); }
 8000406:	4b08      	ldr	r3, [pc, #32]	; (8000428 <EXTI15_10_IRQHandler+0xbc>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800040e:	2b00      	cmp	r3, #0
 8000410:	d008      	beq.n	8000424 <EXTI15_10_IRQHandler+0xb8>
 8000412:	4b05      	ldr	r3, [pc, #20]	; (8000428 <EXTI15_10_IRQHandler+0xbc>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	4a04      	ldr	r2, [pc, #16]	; (8000428 <EXTI15_10_IRQHandler+0xbc>)
 8000418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800041c:	6153      	str	r3, [r2, #20]
 800041e:	4b03      	ldr	r3, [pc, #12]	; (800042c <EXTI15_10_IRQHandler+0xc0>)
 8000420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000422:	4798      	blx	r3
}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40010400 	.word	0x40010400
 800042c:	2000003c 	.word	0x2000003c

08000430 <get_pin>:
//----------------------------
//include
//-----------------------------
#include "Stm32f103x8_gpio_drivers.h"
//-----------------------------
uint8_t get_pin(uint16_t Pin_Number){
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	4603      	mov	r3, r0
 8000438:	80fb      	strh	r3, [r7, #6]
	switch (Pin_Number)
 800043a:	88fb      	ldrh	r3, [r7, #6]
 800043c:	2b80      	cmp	r3, #128	; 0x80
 800043e:	d042      	beq.n	80004c6 <get_pin+0x96>
 8000440:	2b80      	cmp	r3, #128	; 0x80
 8000442:	dc11      	bgt.n	8000468 <get_pin+0x38>
 8000444:	2b08      	cmp	r3, #8
 8000446:	d036      	beq.n	80004b6 <get_pin+0x86>
 8000448:	2b08      	cmp	r3, #8
 800044a:	dc06      	bgt.n	800045a <get_pin+0x2a>
 800044c:	2b02      	cmp	r3, #2
 800044e:	d02e      	beq.n	80004ae <get_pin+0x7e>
 8000450:	2b04      	cmp	r3, #4
 8000452:	d02e      	beq.n	80004b2 <get_pin+0x82>
 8000454:	2b01      	cmp	r3, #1
 8000456:	d028      	beq.n	80004aa <get_pin+0x7a>
 8000458:	e047      	b.n	80004ea <get_pin+0xba>
 800045a:	2b20      	cmp	r3, #32
 800045c:	d02f      	beq.n	80004be <get_pin+0x8e>
 800045e:	2b40      	cmp	r3, #64	; 0x40
 8000460:	d02f      	beq.n	80004c2 <get_pin+0x92>
 8000462:	2b10      	cmp	r3, #16
 8000464:	d029      	beq.n	80004ba <get_pin+0x8a>
 8000466:	e040      	b.n	80004ea <get_pin+0xba>
 8000468:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800046c:	d033      	beq.n	80004d6 <get_pin+0xa6>
 800046e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000472:	dc09      	bgt.n	8000488 <get_pin+0x58>
 8000474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000478:	d029      	beq.n	80004ce <get_pin+0x9e>
 800047a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800047e:	d028      	beq.n	80004d2 <get_pin+0xa2>
 8000480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000484:	d021      	beq.n	80004ca <get_pin+0x9a>
 8000486:	e030      	b.n	80004ea <get_pin+0xba>
 8000488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800048c:	d027      	beq.n	80004de <get_pin+0xae>
 800048e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000492:	dc03      	bgt.n	800049c <get_pin+0x6c>
 8000494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000498:	d01f      	beq.n	80004da <get_pin+0xaa>
 800049a:	e026      	b.n	80004ea <get_pin+0xba>
 800049c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80004a0:	d01f      	beq.n	80004e2 <get_pin+0xb2>
 80004a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80004a6:	d01e      	beq.n	80004e6 <get_pin+0xb6>
 80004a8:	e01f      	b.n	80004ea <get_pin+0xba>
		{
		//from pin 0 t0 7 CRL
		case GPIO_PIN_0:
			return 0 ;
 80004aa:	2300      	movs	r3, #0
 80004ac:	e01d      	b.n	80004ea <get_pin+0xba>
			break ;
		case GPIO_PIN_1:
			return 4 ;
 80004ae:	2304      	movs	r3, #4
 80004b0:	e01b      	b.n	80004ea <get_pin+0xba>
			break ;
		case GPIO_PIN_2:
			return 8 ;
 80004b2:	2308      	movs	r3, #8
 80004b4:	e019      	b.n	80004ea <get_pin+0xba>
			break ;
		case GPIO_PIN_3:
			return 12 ;
 80004b6:	230c      	movs	r3, #12
 80004b8:	e017      	b.n	80004ea <get_pin+0xba>
			break ;

		case GPIO_PIN_4:
			return 16 ;
 80004ba:	2310      	movs	r3, #16
 80004bc:	e015      	b.n	80004ea <get_pin+0xba>
			break ;

		case GPIO_PIN_5:
			return 20 ;
 80004be:	2314      	movs	r3, #20
 80004c0:	e013      	b.n	80004ea <get_pin+0xba>
			break ;

		case GPIO_PIN_6:
			return 24 ;
 80004c2:	2318      	movs	r3, #24
 80004c4:	e011      	b.n	80004ea <get_pin+0xba>
			break ;

		case GPIO_PIN_7:
			return 28 ;
 80004c6:	231c      	movs	r3, #28
 80004c8:	e00f      	b.n	80004ea <get_pin+0xba>
			break ;

			//from pin 8 t0 15 CRH
		case GPIO_PIN_8:
			return 0 ;
 80004ca:	2300      	movs	r3, #0
 80004cc:	e00d      	b.n	80004ea <get_pin+0xba>
			break ;
		case GPIO_PIN_9:
			return 4 ;
 80004ce:	2304      	movs	r3, #4
 80004d0:	e00b      	b.n	80004ea <get_pin+0xba>
			break ;

		case GPIO_PIN_10:
			return 8 ;
 80004d2:	2308      	movs	r3, #8
 80004d4:	e009      	b.n	80004ea <get_pin+0xba>
			break ;

		case GPIO_PIN_11:
			return 12 ;
 80004d6:	230c      	movs	r3, #12
 80004d8:	e007      	b.n	80004ea <get_pin+0xba>
			break ;

		case GPIO_PIN_12:
			return 16 ;
 80004da:	2310      	movs	r3, #16
 80004dc:	e005      	b.n	80004ea <get_pin+0xba>
			break ;


		case GPIO_PIN_13:
			return 20 ;
 80004de:	2314      	movs	r3, #20
 80004e0:	e003      	b.n	80004ea <get_pin+0xba>
			break ;

		case GPIO_PIN_14:
			return 24 ;
 80004e2:	2318      	movs	r3, #24
 80004e4:	e001      	b.n	80004ea <get_pin+0xba>
			break ;

		case GPIO_PIN_15:
			return 28 ;
 80004e6:	231c      	movs	r3, #28
 80004e8:	e7ff      	b.n	80004ea <get_pin+0xba>



		}

}
 80004ea:	4618      	mov	r0, r3
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <GPIOx_init>:
* @param [in]    -GPIOx: where x can be (A..E depending on device used) to select the GPIO peripheral
* @param [out]   -GPIO_conf pointer to a GPIO PinConfig t structure that contains the configuration information for the specified GPIO PIN
* @retval        -non
* Note           -Stm32F103C6 MCU has GPIO A, B, C,D, E Modules But LQFP48 Package has only GPIO A, B, PART of C/D exported as external PINS from MCU
*/
void GPIOx_init (typedef_GPIO* GPIOx,GPIO_Pinconfige_t* GPIO_conf){
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
	uint32_t* config=NULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	60bb      	str	r3, [r7, #8]
	config=(GPIO_conf->Pin_Number)>GPIO_PIN_8?&GPIOx->CRH:&GPIOx->CRL;
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	881b      	ldrh	r3, [r3, #0]
 8000506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800050a:	d902      	bls.n	8000512 <GPIOx_init+0x1e>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	3304      	adds	r3, #4
 8000510:	e000      	b.n	8000514 <GPIOx_init+0x20>
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	60bb      	str	r3, [r7, #8]
	uint8_t pinVal =0;
 8000516:	2300      	movs	r3, #0
 8000518:	73fb      	strb	r3, [r7, #15]
	*(config) &= (~(0xf <<get_pin(GPIO_conf->Pin_Number)));
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	881b      	ldrh	r3, [r3, #0]
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff ff86 	bl	8000430 <get_pin>
 8000524:	4603      	mov	r3, r0
 8000526:	461a      	mov	r2, r3
 8000528:	230f      	movs	r3, #15
 800052a:	4093      	lsls	r3, r2
 800052c:	43da      	mvns	r2, r3
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	401a      	ands	r2, r3
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	601a      	str	r2, [r3, #0]



	if(GPIO_conf->Mode==GPIO_MODE_OUTPUT_PP||GPIO_conf->Mode==GPIO_MODE_OUTPUT_OD||GPIO_conf->Mode==GPIO_MODE_OUTPUT_AF_PP||GPIO_conf->Mode==GPIO_MODE_OUTPUT_AF_OD){
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	789b      	ldrb	r3, [r3, #2]
 800053c:	2b04      	cmp	r3, #4
 800053e:	d00b      	beq.n	8000558 <GPIOx_init+0x64>
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	789b      	ldrb	r3, [r3, #2]
 8000544:	2b05      	cmp	r3, #5
 8000546:	d007      	beq.n	8000558 <GPIOx_init+0x64>
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	789b      	ldrb	r3, [r3, #2]
 800054c:	2b06      	cmp	r3, #6
 800054e:	d003      	beq.n	8000558 <GPIOx_init+0x64>
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	789b      	ldrb	r3, [r3, #2]
 8000554:	2b07      	cmp	r3, #7
 8000556:	d10e      	bne.n	8000576 <GPIOx_init+0x82>
		pinVal= (((GPIO_conf->Mode -4)<<2) | (GPIO_conf->Speed) & 0x0f);
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	789b      	ldrb	r3, [r3, #2]
 800055c:	3b04      	subs	r3, #4
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	b25a      	sxtb	r2, r3
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	78db      	ldrb	r3, [r3, #3]
 8000566:	b25b      	sxtb	r3, r3
 8000568:	f003 030f 	and.w	r3, r3, #15
 800056c:	b25b      	sxtb	r3, r3
 800056e:	4313      	orrs	r3, r2
 8000570:	b25b      	sxtb	r3, r3
 8000572:	73fb      	strb	r3, [r7, #15]
 8000574:	e02a      	b.n	80005cc <GPIOx_init+0xd8>


	}else{


		if(GPIO_conf->Mode==GPIO_MODE_ANALOG||GPIO_conf->Mode==GPIO_MODE_INPUT_FLO){
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	789b      	ldrb	r3, [r3, #2]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d003      	beq.n	8000586 <GPIOx_init+0x92>
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	789b      	ldrb	r3, [r3, #2]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d107      	bne.n	8000596 <GPIOx_init+0xa2>
			pinVal=(((GPIO_conf->Mode<<2)|0x00)& 0x0f);
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	789b      	ldrb	r3, [r3, #2]
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	b2db      	uxtb	r3, r3
 800058e:	f003 030f 	and.w	r3, r3, #15
 8000592:	73fb      	strb	r3, [r7, #15]
 8000594:	e01a      	b.n	80005cc <GPIOx_init+0xd8>



		}
		else if (GPIO_conf->Mode == GPIO_MODE_AF_INPUT) // consider it floating input
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	789b      	ldrb	r3, [r3, #2]
 800059a:	2b08      	cmp	r3, #8
 800059c:	d102      	bne.n	80005a4 <GPIOx_init+0xb0>
		{
			pinVal = ((((GPIO_MODE_INPUT_FLO)<<2) | 0x0) & 0xf );
 800059e:	2304      	movs	r3, #4
 80005a0:	73fb      	strb	r3, [r7, #15]
 80005a2:	e013      	b.n	80005cc <GPIOx_init+0xd8>
		}

		//in case of PULL UP & PULL DOWN
		else
		{
			pinVal = ((((GPIO_MODE_INPUT_PU)<<2) | 0x0) & 0xf );
 80005a4:	2308      	movs	r3, #8
 80005a6:	73fb      	strb	r3, [r7, #15]
			if(GPIO_conf->Mode == GPIO_MODE_INPUT_PU)
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	789b      	ldrb	r3, [r3, #2]
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d105      	bne.n	80005bc <GPIOx_init+0xc8>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR = GPIO_conf->Pin_Number;
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	461a      	mov	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	e007      	b.n	80005cc <GPIOx_init+0xd8>

			}
			else
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR &= ~(GPIO_conf->Pin_Number);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	683a      	ldr	r2, [r7, #0]
 80005c2:	8812      	ldrh	r2, [r2, #0]
 80005c4:	43d2      	mvns	r2, r2
 80005c6:	401a      	ands	r2, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	60da      	str	r2, [r3, #12]
			}

		}
	}
	(*config) |= ((pinVal)<< get_pin(GPIO_conf->Pin_Number));
 80005cc:	7bfc      	ldrb	r4, [r7, #15]
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff ff2c 	bl	8000430 <get_pin>
 80005d8:	4603      	mov	r3, r0
 80005da:	fa04 f203 	lsl.w	r2, r4, r3
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	431a      	orrs	r2, r3
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	601a      	str	r2, [r3, #0]

}
 80005e8:	bf00      	nop
 80005ea:	3714      	adds	r7, #20
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd90      	pop	{r4, r7, pc}

080005f0 <MCAL_RCC_GET_SYSCLK>:
//-----------------------------
const uint8_t APB[8U]={0,0,0,0,1,2,3,4};

const uint8_t AHB[20U]={0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9};
//------------------------------------
uint32_t MCAL_RCC_GET_SYSCLK(void){
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

	switch((RCC->CFGR >>2) & 0b11){
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <MCAL_RCC_GET_SYSCLK+0x30>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	089b      	lsrs	r3, r3, #2
 80005fa:	f003 0303 	and.w	r3, r3, #3
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d006      	beq.n	8000610 <MCAL_RCC_GET_SYSCLK+0x20>
 8000602:	2b01      	cmp	r3, #1
 8000604:	d302      	bcc.n	800060c <MCAL_RCC_GET_SYSCLK+0x1c>
 8000606:	2b02      	cmp	r3, #2
 8000608:	d004      	beq.n	8000614 <MCAL_RCC_GET_SYSCLK+0x24>
 800060a:	e005      	b.n	8000618 <MCAL_RCC_GET_SYSCLK+0x28>
	case 0:
		return HSI_RC_CLK;
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <MCAL_RCC_GET_SYSCLK+0x34>)
 800060e:	e003      	b.n	8000618 <MCAL_RCC_GET_SYSCLK+0x28>
		break;
	case 1:
		return HSE_RC_CLK;
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <MCAL_RCC_GET_SYSCLK+0x38>)
 8000612:	e001      	b.n	8000618 <MCAL_RCC_GET_SYSCLK+0x28>
		break;
	case 2:
		return 16000000;
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <MCAL_RCC_GET_SYSCLK+0x38>)
 8000616:	e7ff      	b.n	8000618 <MCAL_RCC_GET_SYSCLK+0x28>
		break;
	}

}
 8000618:	4618      	mov	r0, r3
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	40021000 	.word	0x40021000
 8000624:	007a1200 	.word	0x007a1200
 8000628:	00f42400 	.word	0x00f42400

0800062c <MCAL_RCC_GET_AHB>:
uint32_t MCAL_RCC_GET_AHB(void){
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GET_SYSCLK() >> AHB[(RCC->CFGR >> 4) & 0xF]);
 8000630:	f7ff ffde 	bl	80005f0 <MCAL_RCC_GET_SYSCLK>
 8000634:	4601      	mov	r1, r0
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <MCAL_RCC_GET_AHB+0x20>)
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	091b      	lsrs	r3, r3, #4
 800063c:	f003 030f 	and.w	r3, r3, #15
 8000640:	4a03      	ldr	r2, [pc, #12]	; (8000650 <MCAL_RCC_GET_AHB+0x24>)
 8000642:	5cd3      	ldrb	r3, [r2, r3]
 8000644:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000648:	4618      	mov	r0, r3
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40021000 	.word	0x40021000
 8000650:	08000abc 	.word	0x08000abc

08000654 <MCAL_RCC_GET_PCLK1>:
//MCAL_RCC_GET_PCLK1 Path ABP1
uint32_t MCAL_RCC_GET_PCLK1(void){
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GET_AHB()>> APB[(RCC->CFGR >>8) & 0b111]);
 8000658:	f7ff ffe8 	bl	800062c <MCAL_RCC_GET_AHB>
 800065c:	4601      	mov	r1, r0
 800065e:	4b05      	ldr	r3, [pc, #20]	; (8000674 <MCAL_RCC_GET_PCLK1+0x20>)
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	0a1b      	lsrs	r3, r3, #8
 8000664:	f003 0307 	and.w	r3, r3, #7
 8000668:	4a03      	ldr	r2, [pc, #12]	; (8000678 <MCAL_RCC_GET_PCLK1+0x24>)
 800066a:	5cd3      	ldrb	r3, [r2, r3]
 800066c:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000670:	4618      	mov	r0, r3
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40021000 	.word	0x40021000
 8000678:	08000ab4 	.word	0x08000ab4

0800067c <MCAL_RCC_GET_PCLK2>:
//MCAL_RCC_GET_PCLK2 Path ABP2
uint32_t MCAL_RCC_GET_PCLK2(void){
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GET_AHB() >> APB[( RCC->CFGR >>11) & 0b111]);
 8000680:	f7ff ffd4 	bl	800062c <MCAL_RCC_GET_AHB>
 8000684:	4601      	mov	r1, r0
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <MCAL_RCC_GET_PCLK2+0x20>)
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	0adb      	lsrs	r3, r3, #11
 800068c:	f003 0307 	and.w	r3, r3, #7
 8000690:	4a03      	ldr	r2, [pc, #12]	; (80006a0 <MCAL_RCC_GET_PCLK2+0x24>)
 8000692:	5cd3      	ldrb	r3, [r2, r3]
 8000694:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000698:	4618      	mov	r0, r3
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40021000 	.word	0x40021000
 80006a0:	08000ab4 	.word	0x08000ab4

080006a4 <SPI1_IRQHandler>:
	*DATA=SPIx->SPI_DR;
}


/* SPI1 global interrupt                          */
void SPI1_IRQHandler (void){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	/*struct S_IRQ_Source irq_src;
	irq_src.TXE = ((SPI1->SR >> 1) & 1);
	irq_src.RXNE = ((SPI1->SR >> 2) & 1);
	irq_src.ERRI = ((SPI1->SR >> 5) & 1);*/
	SPI_confige->SPI_IRQ_FUNCTION();
 80006a8:	4b02      	ldr	r3, [pc, #8]	; (80006b4 <SPI1_IRQHandler+0x10>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	68db      	ldr	r3, [r3, #12]
 80006ae:	4798      	blx	r3

}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	2000001c 	.word	0x2000001c

080006b8 <SPI2_IRQHandler>:
/* SPI2 global interrupt                          */
void SPI2_IRQHandler (void){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	/*struct S_IRQ_Source irq_src;
	irq_src.TXE = ((SPI1->SR >> 1) & 1);
	irq_src.RXNE = ((SPI1->SR >> 2) & 1);
	irq_src.ERRI = ((SPI1->SR >> 5) & 1);*/
	SPI_confige->SPI_IRQ_FUNCTION();
 80006bc:	4b02      	ldr	r3, [pc, #8]	; (80006c8 <SPI2_IRQHandler+0x10>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	4798      	blx	r3

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000001c 	.word	0x2000001c

080006cc <SPI3_IRQHandler>:
/* SPI3 global interrupt                          */
void SPI3_IRQHandler(void){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	/*struct S_IRQ_Source irq_src;
	irq_src.TXE = ((SPI1->SR >> 1) & 1);
	irq_src.RXNE = ((SPI1->SR >> 2) & 1);
	irq_src.ERRI = ((SPI1->SR >> 5) & 1);*/
	SPI_confige->SPI_IRQ_FUNCTION();
 80006d0:	4b02      	ldr	r3, [pc, #8]	; (80006dc <SPI3_IRQHandler+0x10>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	68db      	ldr	r3, [r3, #12]
 80006d6:	4798      	blx	r3

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	2000001c 	.word	0x2000001c

080006e0 <MCAL_UART_Init>:

USART_Pinconfige_t* USART_confige=NULL;

//uint32_t DIV,FRACTION,Freq,Mode_,boudrade;

void MCAL_UART_Init(typedef_USART* USARTx,USART_Pinconfige_t* USART_conf){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
	USART_confige=USART_conf;
 80006ea:	4a65      	ldr	r2, [pc, #404]	; (8000880 <MCAL_UART_Init+0x1a0>)
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	6013      	str	r3, [r2, #0]
	uint32_t pclk ,BRR  ;
//RCC_USART&UART
	if(USARTx==USART1){
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a64      	ldr	r2, [pc, #400]	; (8000884 <MCAL_UART_Init+0x1a4>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d106      	bne.n	8000706 <MCAL_UART_Init+0x26>
		RCC_USART1_CLK_EN();
 80006f8:	4b63      	ldr	r3, [pc, #396]	; (8000888 <MCAL_UART_Init+0x1a8>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a62      	ldr	r2, [pc, #392]	; (8000888 <MCAL_UART_Init+0x1a8>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	e014      	b.n	8000730 <MCAL_UART_Init+0x50>
	}else if(USARTx==USART2){
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4a60      	ldr	r2, [pc, #384]	; (800088c <MCAL_UART_Init+0x1ac>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d106      	bne.n	800071c <MCAL_UART_Init+0x3c>
		RCC_USART2_CLK_EN();
 800070e:	4b5e      	ldr	r3, [pc, #376]	; (8000888 <MCAL_UART_Init+0x1a8>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	4a5d      	ldr	r2, [pc, #372]	; (8000888 <MCAL_UART_Init+0x1a8>)
 8000714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000718:	61d3      	str	r3, [r2, #28]
 800071a:	e009      	b.n	8000730 <MCAL_UART_Init+0x50>
	}else if(USARTx==USART3){
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a5c      	ldr	r2, [pc, #368]	; (8000890 <MCAL_UART_Init+0x1b0>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d105      	bne.n	8000730 <MCAL_UART_Init+0x50>
		RCC_USART3_CLK_EN();
 8000724:	4b58      	ldr	r3, [pc, #352]	; (8000888 <MCAL_UART_Init+0x1a8>)
 8000726:	69db      	ldr	r3, [r3, #28]
 8000728:	4a57      	ldr	r2, [pc, #348]	; (8000888 <MCAL_UART_Init+0x1a8>)
 800072a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800072e:	61d3      	str	r3, [r2, #28]
		 RCC_UART4_CLK_EN();
	}else if(USARTx==UART5){
		RCC_UART5_CLK_EN();
	}*/
//Enable the USART by writing the UE bit in USART_CR1 register to 1
	USARTx->USART_CR1|= (1<<13);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	60da      	str	r2, [r3, #12]
//choise TX or RX confige
	USARTx->USART_CR1|=(USART_confige->UART_MODE);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	4a4f      	ldr	r2, [pc, #316]	; (8000880 <MCAL_UART_Init+0x1a0>)
 8000742:	6812      	ldr	r2, [r2, #0]
 8000744:	7812      	ldrb	r2, [r2, #0]
 8000746:	431a      	orrs	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	60da      	str	r2, [r3, #12]
//Program the M bit in USART_CR1 to define the word length
	USARTx->USART_CR1|=(USART_confige->DATA_SIZE);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	4a4b      	ldr	r2, [pc, #300]	; (8000880 <MCAL_UART_Init+0x1a0>)
 8000752:	6812      	ldr	r2, [r2, #0]
 8000754:	7a12      	ldrb	r2, [r2, #8]
 8000756:	431a      	orrs	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	60da      	str	r2, [r3, #12]
//Program the number of stop bits in USART_CR2.
	USARTx->USART_CR2|=(USART_confige->STOP_MODE);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	691b      	ldr	r3, [r3, #16]
 8000760:	4a47      	ldr	r2, [pc, #284]	; (8000880 <MCAL_UART_Init+0x1a0>)
 8000762:	6812      	ldr	r2, [r2, #0]
 8000764:	7a92      	ldrb	r2, [r2, #10]
 8000766:	431a      	orrs	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	611a      	str	r2, [r3, #16]
//Program the Type of parity (even or odd) to save data in USART_CR1.
	USARTx->USART_CR1|=(USART_confige->Parity);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	4a43      	ldr	r2, [pc, #268]	; (8000880 <MCAL_UART_Init+0x1a0>)
 8000772:	6812      	ldr	r2, [r2, #0]
 8000774:	7a52      	ldrb	r2, [r2, #9]
 8000776:	431a      	orrs	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	60da      	str	r2, [r3, #12]
Bit 8 RTSE: RTS enable
0: RTS hardware flow control disabled
1: RTS interrupt enabled, data is only requested when there is space in the receive buffer

*/
	USARTx->USART_CR3|=(USART_confige->UART_HW_FLOW_CTL);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	695b      	ldr	r3, [r3, #20]
 8000780:	4a3f      	ldr	r2, [pc, #252]	; (8000880 <MCAL_UART_Init+0x1a0>)
 8000782:	6812      	ldr	r2, [r2, #0]
 8000784:	7ad2      	ldrb	r2, [r2, #11]
 8000786:	431a      	orrs	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	615a      	str	r2, [r3, #20]

//confige Boude_Rate
//ABP1------> USART1
//ABP2------> USART2,USART3,UART4 and UART5
	if(USARTx==USART1){
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a3d      	ldr	r2, [pc, #244]	; (8000884 <MCAL_UART_Init+0x1a4>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d103      	bne.n	800079c <MCAL_UART_Init+0xbc>
		pclk=MCAL_RCC_GET_PCLK2();
 8000794:	f7ff ff72 	bl	800067c <MCAL_RCC_GET_PCLK2>
 8000798:	60f8      	str	r0, [r7, #12]
 800079a:	e002      	b.n	80007a2 <MCAL_UART_Init+0xc2>

	}else{
		pclk=MCAL_RCC_GET_PCLK1();
 800079c:	f7ff ff5a 	bl	8000654 <MCAL_RCC_GET_PCLK1>
 80007a0:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, USART_conf->UART_Baud_Rate) ;
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	011b      	lsls	r3, r3, #4
 80007a8:	68fa      	ldr	r2, [r7, #12]
 80007aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ae:	0119      	lsls	r1, r3, #4
 80007b0:	68fa      	ldr	r2, [r7, #12]
 80007b2:	4613      	mov	r3, r2
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	4413      	add	r3, r2
 80007b8:	009a      	lsls	r2, r3, #2
 80007ba:	441a      	add	r2, r3
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	011b      	lsls	r3, r3, #4
 80007cc:	68f8      	ldr	r0, [r7, #12]
 80007ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80007d2:	2064      	movs	r0, #100	; 0x64
 80007d4:	fb00 f303 	mul.w	r3, r0, r3
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	011b      	lsls	r3, r3, #4
 80007dc:	4a2d      	ldr	r2, [pc, #180]	; (8000894 <MCAL_UART_Init+0x1b4>)
 80007de:	fba2 2303 	umull	r2, r3, r2, r3
 80007e2:	095b      	lsrs	r3, r3, #5
 80007e4:	f003 030f 	and.w	r3, r3, #15
 80007e8:	430b      	orrs	r3, r1
 80007ea:	60bb      	str	r3, [r7, #8]

	 USARTx->USART_BRR = BRR ;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	609a      	str	r2, [r3, #8]

	if(USART_confige->IRQ_ENABLE !=USART_IRQ_ENABLE_NON){
 80007f2:	4b23      	ldr	r3, [pc, #140]	; (8000880 <MCAL_UART_Init+0x1a0>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	7b1b      	ldrb	r3, [r3, #12]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d03d      	beq.n	8000878 <MCAL_UART_Init+0x198>



		USARTx->USART_CR1|=(USART_confige->IRQ_ENABLE);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	4a1f      	ldr	r2, [pc, #124]	; (8000880 <MCAL_UART_Init+0x1a0>)
 8000802:	6812      	ldr	r2, [r2, #0]
 8000804:	7b12      	ldrb	r2, [r2, #12]
 8000806:	431a      	orrs	r2, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	60da      	str	r2, [r3, #12]



		if(USARTx==USART1){
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a1d      	ldr	r2, [pc, #116]	; (8000884 <MCAL_UART_Init+0x1a4>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d106      	bne.n	8000822 <MCAL_UART_Init+0x142>


			NVIC_IRQ37_USART1_EN;
 8000814:	4b20      	ldr	r3, [pc, #128]	; (8000898 <MCAL_UART_Init+0x1b8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a1f      	ldr	r2, [pc, #124]	; (8000898 <MCAL_UART_Init+0x1b8>)
 800081a:	f043 0320 	orr.w	r3, r3, #32
 800081e:	6013      	str	r3, [r2, #0]

			}else if(USARTx==UART5){
				NVIC_IRQ53_UART4_EN;
			}
	}
}
 8000820:	e02a      	b.n	8000878 <MCAL_UART_Init+0x198>
			}else if(USARTx==USART2){
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a19      	ldr	r2, [pc, #100]	; (800088c <MCAL_UART_Init+0x1ac>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d106      	bne.n	8000838 <MCAL_UART_Init+0x158>
				NVIC_IRQ38_USART2_EN;
 800082a:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <MCAL_UART_Init+0x1b8>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a1a      	ldr	r2, [pc, #104]	; (8000898 <MCAL_UART_Init+0x1b8>)
 8000830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000834:	6013      	str	r3, [r2, #0]
}
 8000836:	e01f      	b.n	8000878 <MCAL_UART_Init+0x198>
			}else if(USARTx==USART3){
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a15      	ldr	r2, [pc, #84]	; (8000890 <MCAL_UART_Init+0x1b0>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d106      	bne.n	800084e <MCAL_UART_Init+0x16e>
				NVIC_IRQ39_USART3_EN;
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MCAL_UART_Init+0x1b8>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a14      	ldr	r2, [pc, #80]	; (8000898 <MCAL_UART_Init+0x1b8>)
 8000846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800084a:	6013      	str	r3, [r2, #0]
}
 800084c:	e014      	b.n	8000878 <MCAL_UART_Init+0x198>
			}else if(USARTx==UART4){
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a12      	ldr	r2, [pc, #72]	; (800089c <MCAL_UART_Init+0x1bc>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d106      	bne.n	8000864 <MCAL_UART_Init+0x184>
				NVIC_IRQ52_UART3_EN;
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <MCAL_UART_Init+0x1b8>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a0f      	ldr	r2, [pc, #60]	; (8000898 <MCAL_UART_Init+0x1b8>)
 800085c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000860:	6013      	str	r3, [r2, #0]
}
 8000862:	e009      	b.n	8000878 <MCAL_UART_Init+0x198>
			}else if(USARTx==UART5){
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <MCAL_UART_Init+0x1c0>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d105      	bne.n	8000878 <MCAL_UART_Init+0x198>
				NVIC_IRQ53_UART4_EN;
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <MCAL_UART_Init+0x1b8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a09      	ldr	r2, [pc, #36]	; (8000898 <MCAL_UART_Init+0x1b8>)
 8000872:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000876:	6013      	str	r3, [r2, #0]
}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000020 	.word	0x20000020
 8000884:	40013800 	.word	0x40013800
 8000888:	40021000 	.word	0x40021000
 800088c:	40004400 	.word	0x40004400
 8000890:	40004800 	.word	0x40004800
 8000894:	51eb851f 	.word	0x51eb851f
 8000898:	e000e104 	.word	0xe000e104
 800089c:	40004c00 	.word	0x40004c00
 80008a0:	40005000 	.word	0x40005000

080008a4 <MCAL_UART_GPIO_Set_Pins>:

}



void MCAL_UART_GPIO_Set_Pins(typedef_USART* USARTx){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]

	GPIO_Pinconfige_t GPIO_Pinconfige;

	if(USARTx==USART1){
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a2b      	ldr	r2, [pc, #172]	; (800095c <MCAL_UART_GPIO_Set_Pins+0xb8>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d118      	bne.n	80008e6 <MCAL_UART_GPIO_Set_Pins+0x42>

		//TX-------->PA9------>30
		GPIO_Pinconfige.Pin_Number=GPIO_PIN_9;
 80008b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008b8:	81bb      	strh	r3, [r7, #12]
		GPIO_Pinconfige.Mode=GPIO_MODE_OUTPUT_AF_PP;
 80008ba:	2306      	movs	r3, #6
 80008bc:	73bb      	strb	r3, [r7, #14]
		GPIO_Pinconfige.Speed=GPIO_MODE_speed_10_MHz;
 80008be:	2301      	movs	r3, #1
 80008c0:	73fb      	strb	r3, [r7, #15]
		GPIOx_init(GPIOA, &GPIO_Pinconfige);
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	4619      	mov	r1, r3
 80008c8:	4825      	ldr	r0, [pc, #148]	; (8000960 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80008ca:	f7ff fe13 	bl	80004f4 <GPIOx_init>
		//RX-------->PA10------>31
		GPIO_Pinconfige.Pin_Number=GPIO_PIN_10;
 80008ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d2:	81bb      	strh	r3, [r7, #12]
		GPIO_Pinconfige.Mode=GPIO_MODE_AF_INPUT;
 80008d4:	2308      	movs	r3, #8
 80008d6:	73bb      	strb	r3, [r7, #14]
		GPIOx_init(GPIOA, &GPIO_Pinconfige);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	4619      	mov	r1, r3
 80008de:	4820      	ldr	r0, [pc, #128]	; (8000960 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80008e0:	f7ff fe08 	bl	80004f4 <GPIOx_init>

	}



}
 80008e4:	e036      	b.n	8000954 <MCAL_UART_GPIO_Set_Pins+0xb0>
	}else if(USARTx==USART2){
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4a1e      	ldr	r2, [pc, #120]	; (8000964 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d116      	bne.n	800091c <MCAL_UART_GPIO_Set_Pins+0x78>
		GPIO_Pinconfige.Pin_Number=GPIO_PIN_2;
 80008ee:	2304      	movs	r3, #4
 80008f0:	81bb      	strh	r3, [r7, #12]
		GPIO_Pinconfige.Mode=GPIO_MODE_OUTPUT_AF_PP;
 80008f2:	2306      	movs	r3, #6
 80008f4:	73bb      	strb	r3, [r7, #14]
		GPIO_Pinconfige.Speed=GPIO_MODE_speed_10_MHz;
 80008f6:	2301      	movs	r3, #1
 80008f8:	73fb      	strb	r3, [r7, #15]
		GPIOx_init(GPIOA, &GPIO_Pinconfige);
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	4619      	mov	r1, r3
 8000900:	4817      	ldr	r0, [pc, #92]	; (8000960 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000902:	f7ff fdf7 	bl	80004f4 <GPIOx_init>
		GPIO_Pinconfige.Pin_Number=GPIO_PIN_3;
 8000906:	2308      	movs	r3, #8
 8000908:	81bb      	strh	r3, [r7, #12]
		GPIO_Pinconfige.Mode=GPIO_MODE_AF_INPUT;
 800090a:	2308      	movs	r3, #8
 800090c:	73bb      	strb	r3, [r7, #14]
		GPIOx_init(GPIOA, &GPIO_Pinconfige);
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	4619      	mov	r1, r3
 8000914:	4812      	ldr	r0, [pc, #72]	; (8000960 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000916:	f7ff fded 	bl	80004f4 <GPIOx_init>
}
 800091a:	e01b      	b.n	8000954 <MCAL_UART_GPIO_Set_Pins+0xb0>
	}else if(USARTx==USART3){
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a12      	ldr	r2, [pc, #72]	; (8000968 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d117      	bne.n	8000954 <MCAL_UART_GPIO_Set_Pins+0xb0>
		GPIO_Pinconfige.Pin_Number=GPIO_PIN_10;
 8000924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000928:	81bb      	strh	r3, [r7, #12]
		GPIO_Pinconfige.Mode=GPIO_MODE_OUTPUT_AF_PP;
 800092a:	2306      	movs	r3, #6
 800092c:	73bb      	strb	r3, [r7, #14]
		GPIO_Pinconfige.Speed=GPIO_MODE_speed_10_MHz;
 800092e:	2301      	movs	r3, #1
 8000930:	73fb      	strb	r3, [r7, #15]
		GPIOx_init(GPIOB, &GPIO_Pinconfige);
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	4619      	mov	r1, r3
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <MCAL_UART_GPIO_Set_Pins+0xc8>)
 800093a:	f7ff fddb 	bl	80004f4 <GPIOx_init>
		GPIO_Pinconfige.Pin_Number=GPIO_PIN_11;
 800093e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000942:	81bb      	strh	r3, [r7, #12]
		GPIO_Pinconfige.Mode=GPIO_MODE_AF_INPUT;
 8000944:	2308      	movs	r3, #8
 8000946:	73bb      	strb	r3, [r7, #14]
		GPIOx_init(GPIOB, &GPIO_Pinconfige);
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	4619      	mov	r1, r3
 800094e:	4807      	ldr	r0, [pc, #28]	; (800096c <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000950:	f7ff fdd0 	bl	80004f4 <GPIOx_init>
}
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40013800 	.word	0x40013800
 8000960:	40010800 	.word	0x40010800
 8000964:	40004400 	.word	0x40004400
 8000968:	40004800 	.word	0x40004800
 800096c:	40010c00 	.word	0x40010c00

08000970 <MCAL_UART_SendData>:
void MCAL_UART_SendData(typedef_USART* USARTx,uint16_t* DATA,enum Booling_Micanism Enable){
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	4613      	mov	r3, r2
 800097c:	71fb      	strb	r3, [r7, #7]



	//wait Utile TXE full
//Bit 7 TXE: Transmit data register empty
	if(Enable==ENABLE){
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d106      	bne.n	8000992 <MCAL_UART_SendData+0x22>
		while(!((USARTx->USART_SR) &(1<<7)));
 8000984:	bf00      	nop
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098e:	2b00      	cmp	r3, #0
 8000990:	d0f9      	beq.n	8000986 <MCAL_UART_SendData+0x16>


	if(USART_confige->DATA_SIZE ==USART_9_BIT){
		USARTx->USART_DR=((*DATA)& (uint16_t)0x01FF);

	}else if(USART_confige->DATA_SIZE ==USART_8_BIT){
 8000992:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <MCAL_UART_SendData+0x40>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	7a1b      	ldrb	r3, [r3, #8]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d104      	bne.n	80009a6 <MCAL_UART_SendData+0x36>
		USARTx->USART_DR=((*DATA)& (uint8_t) 0xFF);
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	605a      	str	r2, [r3, #4]
	}
}
 80009a6:	bf00      	nop
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	20000020 	.word	0x20000020

080009b4 <MCAL_UART_ReceiveData>:
	while(!(USARTx->USART_SR & 1<<6));

}


void MCAL_UART_ReceiveData(typedef_USART* USARTx,uint16_t* DATA,enum Booling_Micanism Enable){
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	4613      	mov	r3, r2
 80009c0:	71fb      	strb	r3, [r7, #7]
	//wait Utile RXNE full
	//Bit 5 RXNE: Read data register not empty

		if(Enable==ENABLE){
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d106      	bne.n	80009d6 <MCAL_UART_ReceiveData+0x22>
			while(!( USARTx->USART_SR & 1<<5));
 80009c8:	bf00      	nop
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f003 0320 	and.w	r3, r3, #32
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d0f9      	beq.n	80009ca <MCAL_UART_ReceiveData+0x16>


			}


			}else if(USART_confige->DATA_SIZE ==USART_8_BIT){
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MCAL_UART_ReceiveData+0x60>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	7a1b      	ldrb	r3, [r3, #8]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d114      	bne.n	8000a0a <MCAL_UART_ReceiveData+0x56>
				if(USART_confige->Parity ==USART_NON_PARITY){
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MCAL_UART_ReceiveData+0x60>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	7a5b      	ldrb	r3, [r3, #9]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d107      	bne.n	80009fa <MCAL_UART_ReceiveData+0x46>
					*((uint16_t*)DATA) = (USARTx->USART_DR &(uint8_t)0xFF);
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	801a      	strh	r2, [r3, #0]





}
 80009f8:	e007      	b.n	8000a0a <MCAL_UART_ReceiveData+0x56>
				  *((uint16_t*)DATA) = (USARTx->USART_DR &(uint8_t)0x7F);
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	801a      	strh	r2, [r3, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	20000020 	.word	0x20000020

08000a18 <USART1_IRQHandler>:



/* USART1 global interrupt                          */
void USART1_IRQHandler (void){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	USART_confige->IRQ_FUNCTION();
 8000a1c:	4b02      	ldr	r3, [pc, #8]	; (8000a28 <USART1_IRQHandler+0x10>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	691b      	ldr	r3, [r3, #16]
 8000a22:	4798      	blx	r3

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000020 	.word	0x20000020

08000a2c <USART2_IRQHandler>:
/* USART2 global interrupt                          */
void USART2_IRQHandler (void){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	USART_confige->IRQ_FUNCTION();
 8000a30:	4b02      	ldr	r3, [pc, #8]	; (8000a3c <USART2_IRQHandler+0x10>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	691b      	ldr	r3, [r3, #16]
 8000a36:	4798      	blx	r3

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000020 	.word	0x20000020

08000a40 <USART3_IRQHandler>:
/* USART3 global interrupt                          */
void USART3_IRQHandler(void){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	USART_confige->IRQ_FUNCTION();
 8000a44:	4b02      	ldr	r3, [pc, #8]	; (8000a50 <USART3_IRQHandler+0x10>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	691b      	ldr	r3, [r3, #16]
 8000a4a:	4798      	blx	r3

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000020 	.word	0x20000020

08000a54 <__libc_init_array>:
 8000a54:	b570      	push	{r4, r5, r6, lr}
 8000a56:	2500      	movs	r5, #0
 8000a58:	4e0c      	ldr	r6, [pc, #48]	; (8000a8c <__libc_init_array+0x38>)
 8000a5a:	4c0d      	ldr	r4, [pc, #52]	; (8000a90 <__libc_init_array+0x3c>)
 8000a5c:	1ba4      	subs	r4, r4, r6
 8000a5e:	10a4      	asrs	r4, r4, #2
 8000a60:	42a5      	cmp	r5, r4
 8000a62:	d109      	bne.n	8000a78 <__libc_init_array+0x24>
 8000a64:	f000 f81a 	bl	8000a9c <_init>
 8000a68:	2500      	movs	r5, #0
 8000a6a:	4e0a      	ldr	r6, [pc, #40]	; (8000a94 <__libc_init_array+0x40>)
 8000a6c:	4c0a      	ldr	r4, [pc, #40]	; (8000a98 <__libc_init_array+0x44>)
 8000a6e:	1ba4      	subs	r4, r4, r6
 8000a70:	10a4      	asrs	r4, r4, #2
 8000a72:	42a5      	cmp	r5, r4
 8000a74:	d105      	bne.n	8000a82 <__libc_init_array+0x2e>
 8000a76:	bd70      	pop	{r4, r5, r6, pc}
 8000a78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a7c:	4798      	blx	r3
 8000a7e:	3501      	adds	r5, #1
 8000a80:	e7ee      	b.n	8000a60 <__libc_init_array+0xc>
 8000a82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a86:	4798      	blx	r3
 8000a88:	3501      	adds	r5, #1
 8000a8a:	e7f2      	b.n	8000a72 <__libc_init_array+0x1e>
 8000a8c:	08000ad0 	.word	0x08000ad0
 8000a90:	08000ad0 	.word	0x08000ad0
 8000a94:	08000ad0 	.word	0x08000ad0
 8000a98:	08000ad4 	.word	0x08000ad4

08000a9c <_init>:
 8000a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a9e:	bf00      	nop
 8000aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aa2:	bc08      	pop	{r3}
 8000aa4:	469e      	mov	lr, r3
 8000aa6:	4770      	bx	lr

08000aa8 <_fini>:
 8000aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aaa:	bf00      	nop
 8000aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aae:	bc08      	pop	{r3}
 8000ab0:	469e      	mov	lr, r3
 8000ab2:	4770      	bx	lr
