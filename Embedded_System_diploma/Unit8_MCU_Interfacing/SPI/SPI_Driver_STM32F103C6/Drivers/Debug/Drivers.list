
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d38  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000e68  08000e68  00010e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e84  08000e84  00010e8c  2**0
                  CONTENTS
  4 .ARM          00000000  08000e84  08000e84  00010e8c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e84  08000e8c  00010e8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e84  08000e84  00010e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e88  08000e88  00010e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000e8c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000e8c  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010e8c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005052  00000000  00000000  00010eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c6c  00000000  00000000  00015f07  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d94  00000000  00000000  00016b73  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000240  00000000  00000000  00017908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d8  00000000  00000000  00017b48  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000162c  00000000  00000000  00017d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000295c  00000000  00000000  0001934c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000bc8f  00000000  00000000  0001bca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00027937  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000728  00000000  00000000  000279b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e50 	.word	0x08000e50

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000e50 	.word	0x08000e50

08000170 <MAHMOUD_SPI_IRQ_Callback>:
void Enable_Clock();
unsigned char ch;
//#define MCU_Act_as_Master
#define MCU_Act_as_Slave
GPIO_Pinconfige_t GPIO_Pinconfige;
void MAHMOUD_SPI_IRQ_Callback(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	ch=0xf;
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <MAHMOUD_SPI_IRQ_Callback+0x24>)
 8000176:	220f      	movs	r2, #15
 8000178:	701a      	strb	r2, [r3, #0]
	MCAL_SPI_Tx_Rx(SPI1, &ch, SPI_ENABLE);
 800017a:	2200      	movs	r2, #0
 800017c:	4905      	ldr	r1, [pc, #20]	; (8000194 <MAHMOUD_SPI_IRQ_Callback+0x24>)
 800017e:	4806      	ldr	r0, [pc, #24]	; (8000198 <MAHMOUD_SPI_IRQ_Callback+0x28>)
 8000180:	f000 fc7c 	bl	8000a7c <MCAL_SPI_Tx_Rx>
	MCAL_UART_SendData(USART1, &ch, ENABLE);
 8000184:	2200      	movs	r2, #0
 8000186:	4903      	ldr	r1, [pc, #12]	; (8000194 <MAHMOUD_SPI_IRQ_Callback+0x24>)
 8000188:	4804      	ldr	r0, [pc, #16]	; (800019c <MAHMOUD_SPI_IRQ_Callback+0x2c>)
 800018a:	f000 fdfd 	bl	8000d88 <MCAL_UART_SendData>
}
 800018e:	bf00      	nop
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	20000028 	.word	0x20000028
 8000198:	40013000 	.word	0x40013000
 800019c:	40013800 	.word	0x40013800

080001a0 <UART_IRQ_Callback>:




void UART_IRQ_Callback (void)
{
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0
	MCAL_UART_SendData(USART1, &ch, ENABLE);
	GPIOx_WRITE_PIN(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
	MCAL_SPI_Tx_Rx(SPI1, &ch, SPI_ENABLE);
	GPIOx_WRITE_PIN(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
#endif
}
 80001a4:	bf00      	nop
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr

080001ac <main>:
int main(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b08a      	sub	sp, #40	; 0x28
 80001b0:	af00      	add	r7, sp, #0
	USART_Pinconfige_t USART_con;
	Enable_Clock();
 80001b2:	f000 f841 	bl	8000238 <Enable_Clock>
	 * Tx  --> PA9
	 * Rx  --> PA10
	 * CTS --> PA11
	 * RTS --> PA12
	 */
	USART_con.UART_Baud_Rate=USART_BaudRate_115200;
 80001b6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80001ba:	61bb      	str	r3, [r7, #24]
	USART_con.UART_HW_FLOW_CTL=USART_HW_FLOW_NON;
 80001bc:	2300      	movs	r3, #0
 80001be:	77fb      	strb	r3, [r7, #31]
	USART_con.IRQ_ENABLE=USART_IRQ_ENABLE_RXNEIE;
 80001c0:	2320      	movs	r3, #32
 80001c2:	f887 3020 	strb.w	r3, [r7, #32]
	USART_con.IRQ_FUNCTION=UART_IRQ_Callback;
 80001c6:	4b18      	ldr	r3, [pc, #96]	; (8000228 <main+0x7c>)
 80001c8:	627b      	str	r3, [r7, #36]	; 0x24
	USART_con.Parity=USART_NON_PARITY;
 80001ca:	2300      	movs	r3, #0
 80001cc:	777b      	strb	r3, [r7, #29]
	USART_con.DATA_SIZE=USART_8_BIT;
 80001ce:	2300      	movs	r3, #0
 80001d0:	773b      	strb	r3, [r7, #28]
	USART_con.STOP_MODE=USART_1_STOP_BIT;
 80001d2:	2300      	movs	r3, #0
 80001d4:	77bb      	strb	r3, [r7, #30]
	USART_con.UART_MODE=USART_TX_RX;
 80001d6:	230c      	movs	r3, #12
 80001d8:	753b      	strb	r3, [r7, #20]

	MCAL_UART_Init(USART1, & USART_con);
 80001da:	f107 0314 	add.w	r3, r7, #20
 80001de:	4619      	mov	r1, r3
 80001e0:	4812      	ldr	r0, [pc, #72]	; (800022c <main+0x80>)
 80001e2:	f000 fc89 	bl	8000af8 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 80001e6:	4811      	ldr	r0, [pc, #68]	; (800022c <main+0x80>)
 80001e8:	f000 fd68 	bl	8000cbc <MCAL_UART_GPIO_Set_Pins>
	 * MISO --> PA6
	 * NSS  --> PA4
	 */
	SPI_Pinconfige_t SPI1_CFG;
	/* Common Configuration */
	SPI1_CFG.CLKPhase=SPI_CPHA_Second_Clock;
 80001ec:	2301      	movs	r3, #1
 80001ee:	72fb      	strb	r3, [r7, #11]
	SPI1_CFG.CLK_Polarity=SPI_CPOL_1_idel;
 80001f0:	2302      	movs	r3, #2
 80001f2:	72bb      	strb	r3, [r7, #10]
	SPI1_CFG.DATA_SIZE=SPI_8_BIT;
 80001f4:	2300      	movs	r3, #0
 80001f6:	71fb      	strb	r3, [r7, #7]
	SPI1_CFG.Fram_Format=SPI_MSB;
 80001f8:	2300      	movs	r3, #0
 80001fa:	723b      	strb	r3, [r7, #8]
	SPI1_CFG.SPI_CLOCK_Freq=SPI_Freq_Div_8;
 80001fc:	2310      	movs	r3, #16
 80001fe:	71bb      	strb	r3, [r7, #6]
	SPI1_CFG.SPI_Communication_MODE=SPI_Directional_2Line;
 8000200:	2300      	movs	r3, #0
 8000202:	717b      	strb	r3, [r7, #5]

#endif


#ifdef MCU_Act_as_Slave
	SPI1_CFG.SPI_MODE=SPI_Device_Mode_Slave;
 8000204:	2300      	movs	r3, #0
 8000206:	713b      	strb	r3, [r7, #4]
	SPI1_CFG.NSS_MODE=SPI_NSS_Hardware_Slave;
 8000208:	2300      	movs	r3, #0
 800020a:	727b      	strb	r3, [r7, #9]
	SPI1_CFG.IRQ_ENABLE=SPI_IRQ_RX_EN;
 800020c:	2340      	movs	r3, #64	; 0x40
 800020e:	733b      	strb	r3, [r7, #12]
	SPI1_CFG.SPI_IRQ_FUNCTION=MAHMOUD_SPI_IRQ_Callback;
 8000210:	4b07      	ldr	r3, [pc, #28]	; (8000230 <main+0x84>)
 8000212:	613b      	str	r3, [r7, #16]



#endif
	MCAL_SPI_Init(SPI1, &SPI1_CFG);
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	4619      	mov	r1, r3
 8000218:	4806      	ldr	r0, [pc, #24]	; (8000234 <main+0x88>)
 800021a:	f000 fa79 	bl	8000710 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 800021e:	4805      	ldr	r0, [pc, #20]	; (8000234 <main+0x88>)
 8000220:	f000 fb2c 	bl	800087c <MCAL_SPI_GPIO_Set_Pins>



	while(1){
 8000224:	e7fe      	b.n	8000224 <main+0x78>
 8000226:	bf00      	nop
 8000228:	080001a1 	.word	0x080001a1
 800022c:	40013800 	.word	0x40013800
 8000230:	08000171 	.word	0x08000171
 8000234:	40013000 	.word	0x40013000

08000238 <Enable_Clock>:





void Enable_Clock(){
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 800023c:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <Enable_Clock+0x30>)
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	4a09      	ldr	r2, [pc, #36]	; (8000268 <Enable_Clock+0x30>)
 8000242:	f043 0304 	orr.w	r3, r3, #4
 8000246:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000248:	4b07      	ldr	r3, [pc, #28]	; (8000268 <Enable_Clock+0x30>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	4a06      	ldr	r2, [pc, #24]	; (8000268 <Enable_Clock+0x30>)
 800024e:	f043 0308 	orr.w	r3, r3, #8
 8000252:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <Enable_Clock+0x30>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a03      	ldr	r2, [pc, #12]	; (8000268 <Enable_Clock+0x30>)
 800025a:	f043 0301 	orr.w	r3, r3, #1
 800025e:	6193      	str	r3, [r2, #24]
}
 8000260:	bf00      	nop
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	40021000 	.word	0x40021000

0800026c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800026c:	480d      	ldr	r0, [pc, #52]	; (80002a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800026e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000270:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000274:	480c      	ldr	r0, [pc, #48]	; (80002a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000276:	490d      	ldr	r1, [pc, #52]	; (80002ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000278:	4a0d      	ldr	r2, [pc, #52]	; (80002b0 <LoopForever+0xe>)
  movs r3, #0
 800027a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800027c:	e002      	b.n	8000284 <LoopCopyDataInit>

0800027e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800027e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000282:	3304      	adds	r3, #4

08000284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000288:	d3f9      	bcc.n	800027e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800028a:	4a0a      	ldr	r2, [pc, #40]	; (80002b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800028c:	4c0a      	ldr	r4, [pc, #40]	; (80002b8 <LoopForever+0x16>)
  movs r3, #0
 800028e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000290:	e001      	b.n	8000296 <LoopFillZerobss>

08000292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000294:	3204      	adds	r2, #4

08000296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000298:	d3fb      	bcc.n	8000292 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800029a:	f000 fdb5 	bl	8000e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800029e:	f7ff ff85 	bl	80001ac <main>

080002a2 <LoopForever>:

LoopForever:
    b LoopForever
 80002a2:	e7fe      	b.n	80002a2 <LoopForever>
  ldr   r0, =_estack
 80002a4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b0:	08000e8c 	.word	0x08000e8c
  ldr r2, =_sbss
 80002b4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002b8:	20000068 	.word	0x20000068

080002bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002bc:	e7fe      	b.n	80002bc <ADC1_2_IRQHandler>
	...

080002c0 <EXTI0_IRQHandler>:

	Updata(P_EXTI_Confige);
}
//=========================================ISR==============================================
void EXTI0_IRQHandler(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	//write 1 to clear pending bit,to stop sending interrupt again
	EXTI->PR = 1<<0;
 80002c4:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <EXTI0_IRQHandler+0x14>)
 80002c6:	2201      	movs	r2, #1
 80002c8:	615a      	str	r2, [r3, #20]
	//callback
	Gp_call_back_func[0]();
 80002ca:	4b03      	ldr	r3, [pc, #12]	; (80002d8 <EXTI0_IRQHandler+0x18>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4798      	blx	r3
}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40010400 	.word	0x40010400
 80002d8:	2000002c 	.word	0x2000002c

080002dc <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<1;
 80002e0:	4b03      	ldr	r3, [pc, #12]	; (80002f0 <EXTI1_IRQHandler+0x14>)
 80002e2:	2202      	movs	r2, #2
 80002e4:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[1]();
 80002e6:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <EXTI1_IRQHandler+0x18>)
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	4798      	blx	r3
}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	40010400 	.word	0x40010400
 80002f4:	2000002c 	.word	0x2000002c

080002f8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<2;
 80002fc:	4b03      	ldr	r3, [pc, #12]	; (800030c <EXTI2_IRQHandler+0x14>)
 80002fe:	2204      	movs	r2, #4
 8000300:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[2]();
 8000302:	4b03      	ldr	r3, [pc, #12]	; (8000310 <EXTI2_IRQHandler+0x18>)
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	4798      	blx	r3
}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}
 800030c:	40010400 	.word	0x40010400
 8000310:	2000002c 	.word	0x2000002c

08000314 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<3;
 8000318:	4b03      	ldr	r3, [pc, #12]	; (8000328 <EXTI3_IRQHandler+0x14>)
 800031a:	2208      	movs	r2, #8
 800031c:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[3]();
 800031e:	4b03      	ldr	r3, [pc, #12]	; (800032c <EXTI3_IRQHandler+0x18>)
 8000320:	68db      	ldr	r3, [r3, #12]
 8000322:	4798      	blx	r3
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	40010400 	.word	0x40010400
 800032c:	2000002c 	.word	0x2000002c

08000330 <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<4;
 8000334:	4b03      	ldr	r3, [pc, #12]	; (8000344 <EXTI4_IRQHandler+0x14>)
 8000336:	2210      	movs	r2, #16
 8000338:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[4]();
 800033a:	4b03      	ldr	r3, [pc, #12]	; (8000348 <EXTI4_IRQHandler+0x18>)
 800033c:	691b      	ldr	r3, [r3, #16]
 800033e:	4798      	blx	r3
}
 8000340:	bf00      	nop
 8000342:	bd80      	pop	{r7, pc}
 8000344:	40010400 	.word	0x40010400
 8000348:	2000002c 	.word	0x2000002c

0800034c <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
    /* here i check which interrupt is that, cause all interrupts from
	 5---9  arrived on same pin at NVIC
	so we will know which interrupt for ,by checking PR register if its one so its
	and then we write 1 on PR reg to disable interrupt  */
	if(EXTI->PR & 1<<5) { EXTI->PR  = 1<<5;   Gp_call_back_func[5](); }
 8000350:	4b1f      	ldr	r3, [pc, #124]	; (80003d0 <EXTI9_5_IRQHandler+0x84>)
 8000352:	695b      	ldr	r3, [r3, #20]
 8000354:	f003 0320 	and.w	r3, r3, #32
 8000358:	2b00      	cmp	r3, #0
 800035a:	d005      	beq.n	8000368 <EXTI9_5_IRQHandler+0x1c>
 800035c:	4b1c      	ldr	r3, [pc, #112]	; (80003d0 <EXTI9_5_IRQHandler+0x84>)
 800035e:	2220      	movs	r2, #32
 8000360:	615a      	str	r2, [r3, #20]
 8000362:	4b1c      	ldr	r3, [pc, #112]	; (80003d4 <EXTI9_5_IRQHandler+0x88>)
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR  = 1<<6;   Gp_call_back_func[6](); }
 8000368:	4b19      	ldr	r3, [pc, #100]	; (80003d0 <EXTI9_5_IRQHandler+0x84>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000370:	2b00      	cmp	r3, #0
 8000372:	d005      	beq.n	8000380 <EXTI9_5_IRQHandler+0x34>
 8000374:	4b16      	ldr	r3, [pc, #88]	; (80003d0 <EXTI9_5_IRQHandler+0x84>)
 8000376:	2240      	movs	r2, #64	; 0x40
 8000378:	615a      	str	r2, [r3, #20]
 800037a:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <EXTI9_5_IRQHandler+0x88>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR  = 1<<7;   Gp_call_back_func[7](); }
 8000380:	4b13      	ldr	r3, [pc, #76]	; (80003d0 <EXTI9_5_IRQHandler+0x84>)
 8000382:	695b      	ldr	r3, [r3, #20]
 8000384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000388:	2b00      	cmp	r3, #0
 800038a:	d005      	beq.n	8000398 <EXTI9_5_IRQHandler+0x4c>
 800038c:	4b10      	ldr	r3, [pc, #64]	; (80003d0 <EXTI9_5_IRQHandler+0x84>)
 800038e:	2280      	movs	r2, #128	; 0x80
 8000390:	615a      	str	r2, [r3, #20]
 8000392:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <EXTI9_5_IRQHandler+0x88>)
 8000394:	69db      	ldr	r3, [r3, #28]
 8000396:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR  = 1<<8;   Gp_call_back_func[8](); }
 8000398:	4b0d      	ldr	r3, [pc, #52]	; (80003d0 <EXTI9_5_IRQHandler+0x84>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d006      	beq.n	80003b2 <EXTI9_5_IRQHandler+0x66>
 80003a4:	4b0a      	ldr	r3, [pc, #40]	; (80003d0 <EXTI9_5_IRQHandler+0x84>)
 80003a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003aa:	615a      	str	r2, [r3, #20]
 80003ac:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <EXTI9_5_IRQHandler+0x88>)
 80003ae:	6a1b      	ldr	r3, [r3, #32]
 80003b0:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR  = 1<<9;   Gp_call_back_func[9](); }
 80003b2:	4b07      	ldr	r3, [pc, #28]	; (80003d0 <EXTI9_5_IRQHandler+0x84>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d006      	beq.n	80003cc <EXTI9_5_IRQHandler+0x80>
 80003be:	4b04      	ldr	r3, [pc, #16]	; (80003d0 <EXTI9_5_IRQHandler+0x84>)
 80003c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003c4:	615a      	str	r2, [r3, #20]
 80003c6:	4b03      	ldr	r3, [pc, #12]	; (80003d4 <EXTI9_5_IRQHandler+0x88>)
 80003c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ca:	4798      	blx	r3
}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	40010400 	.word	0x40010400
 80003d4:	2000002c 	.word	0x2000002c

080003d8 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void){
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0

	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10; Gp_call_back_func[10](); }
 80003dc:	4b2d      	ldr	r3, [pc, #180]	; (8000494 <EXTI15_10_IRQHandler+0xbc>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d008      	beq.n	80003fa <EXTI15_10_IRQHandler+0x22>
 80003e8:	4b2a      	ldr	r3, [pc, #168]	; (8000494 <EXTI15_10_IRQHandler+0xbc>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	4a29      	ldr	r2, [pc, #164]	; (8000494 <EXTI15_10_IRQHandler+0xbc>)
 80003ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003f2:	6153      	str	r3, [r2, #20]
 80003f4:	4b28      	ldr	r3, [pc, #160]	; (8000498 <EXTI15_10_IRQHandler+0xc0>)
 80003f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003f8:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11; Gp_call_back_func[11](); }
 80003fa:	4b26      	ldr	r3, [pc, #152]	; (8000494 <EXTI15_10_IRQHandler+0xbc>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000402:	2b00      	cmp	r3, #0
 8000404:	d008      	beq.n	8000418 <EXTI15_10_IRQHandler+0x40>
 8000406:	4b23      	ldr	r3, [pc, #140]	; (8000494 <EXTI15_10_IRQHandler+0xbc>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	4a22      	ldr	r2, [pc, #136]	; (8000494 <EXTI15_10_IRQHandler+0xbc>)
 800040c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000410:	6153      	str	r3, [r2, #20]
 8000412:	4b21      	ldr	r3, [pc, #132]	; (8000498 <EXTI15_10_IRQHandler+0xc0>)
 8000414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000416:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12; Gp_call_back_func[12](); }
 8000418:	4b1e      	ldr	r3, [pc, #120]	; (8000494 <EXTI15_10_IRQHandler+0xbc>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000420:	2b00      	cmp	r3, #0
 8000422:	d008      	beq.n	8000436 <EXTI15_10_IRQHandler+0x5e>
 8000424:	4b1b      	ldr	r3, [pc, #108]	; (8000494 <EXTI15_10_IRQHandler+0xbc>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	4a1a      	ldr	r2, [pc, #104]	; (8000494 <EXTI15_10_IRQHandler+0xbc>)
 800042a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800042e:	6153      	str	r3, [r2, #20]
 8000430:	4b19      	ldr	r3, [pc, #100]	; (8000498 <EXTI15_10_IRQHandler+0xc0>)
 8000432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000434:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13; Gp_call_back_func[13](); }
 8000436:	4b17      	ldr	r3, [pc, #92]	; (8000494 <EXTI15_10_IRQHandler+0xbc>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800043e:	2b00      	cmp	r3, #0
 8000440:	d008      	beq.n	8000454 <EXTI15_10_IRQHandler+0x7c>
 8000442:	4b14      	ldr	r3, [pc, #80]	; (8000494 <EXTI15_10_IRQHandler+0xbc>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	4a13      	ldr	r2, [pc, #76]	; (8000494 <EXTI15_10_IRQHandler+0xbc>)
 8000448:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800044c:	6153      	str	r3, [r2, #20]
 800044e:	4b12      	ldr	r3, [pc, #72]	; (8000498 <EXTI15_10_IRQHandler+0xc0>)
 8000450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000452:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14; Gp_call_back_func[14](); }
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <EXTI15_10_IRQHandler+0xbc>)
 8000456:	695b      	ldr	r3, [r3, #20]
 8000458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800045c:	2b00      	cmp	r3, #0
 800045e:	d008      	beq.n	8000472 <EXTI15_10_IRQHandler+0x9a>
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <EXTI15_10_IRQHandler+0xbc>)
 8000462:	695b      	ldr	r3, [r3, #20]
 8000464:	4a0b      	ldr	r2, [pc, #44]	; (8000494 <EXTI15_10_IRQHandler+0xbc>)
 8000466:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800046a:	6153      	str	r3, [r2, #20]
 800046c:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <EXTI15_10_IRQHandler+0xc0>)
 800046e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000470:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<15; Gp_call_back_func[15](); }
 8000472:	4b08      	ldr	r3, [pc, #32]	; (8000494 <EXTI15_10_IRQHandler+0xbc>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800047a:	2b00      	cmp	r3, #0
 800047c:	d008      	beq.n	8000490 <EXTI15_10_IRQHandler+0xb8>
 800047e:	4b05      	ldr	r3, [pc, #20]	; (8000494 <EXTI15_10_IRQHandler+0xbc>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	4a04      	ldr	r2, [pc, #16]	; (8000494 <EXTI15_10_IRQHandler+0xbc>)
 8000484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000488:	6153      	str	r3, [r2, #20]
 800048a:	4b03      	ldr	r3, [pc, #12]	; (8000498 <EXTI15_10_IRQHandler+0xc0>)
 800048c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800048e:	4798      	blx	r3
}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	40010400 	.word	0x40010400
 8000498:	2000002c 	.word	0x2000002c

0800049c <get_pin>:
//----------------------------
//include
//-----------------------------
#include "Stm32f103x8_gpio_drivers.h"
//-----------------------------
uint8_t get_pin(uint16_t Pin_Number){
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4603      	mov	r3, r0
 80004a4:	80fb      	strh	r3, [r7, #6]
	switch (Pin_Number)
 80004a6:	88fb      	ldrh	r3, [r7, #6]
 80004a8:	2b80      	cmp	r3, #128	; 0x80
 80004aa:	d042      	beq.n	8000532 <get_pin+0x96>
 80004ac:	2b80      	cmp	r3, #128	; 0x80
 80004ae:	dc11      	bgt.n	80004d4 <get_pin+0x38>
 80004b0:	2b08      	cmp	r3, #8
 80004b2:	d036      	beq.n	8000522 <get_pin+0x86>
 80004b4:	2b08      	cmp	r3, #8
 80004b6:	dc06      	bgt.n	80004c6 <get_pin+0x2a>
 80004b8:	2b02      	cmp	r3, #2
 80004ba:	d02e      	beq.n	800051a <get_pin+0x7e>
 80004bc:	2b04      	cmp	r3, #4
 80004be:	d02e      	beq.n	800051e <get_pin+0x82>
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	d028      	beq.n	8000516 <get_pin+0x7a>
 80004c4:	e047      	b.n	8000556 <get_pin+0xba>
 80004c6:	2b20      	cmp	r3, #32
 80004c8:	d02f      	beq.n	800052a <get_pin+0x8e>
 80004ca:	2b40      	cmp	r3, #64	; 0x40
 80004cc:	d02f      	beq.n	800052e <get_pin+0x92>
 80004ce:	2b10      	cmp	r3, #16
 80004d0:	d029      	beq.n	8000526 <get_pin+0x8a>
 80004d2:	e040      	b.n	8000556 <get_pin+0xba>
 80004d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004d8:	d033      	beq.n	8000542 <get_pin+0xa6>
 80004da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004de:	dc09      	bgt.n	80004f4 <get_pin+0x58>
 80004e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004e4:	d029      	beq.n	800053a <get_pin+0x9e>
 80004e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004ea:	d028      	beq.n	800053e <get_pin+0xa2>
 80004ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004f0:	d021      	beq.n	8000536 <get_pin+0x9a>
 80004f2:	e030      	b.n	8000556 <get_pin+0xba>
 80004f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004f8:	d027      	beq.n	800054a <get_pin+0xae>
 80004fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004fe:	dc03      	bgt.n	8000508 <get_pin+0x6c>
 8000500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000504:	d01f      	beq.n	8000546 <get_pin+0xaa>
 8000506:	e026      	b.n	8000556 <get_pin+0xba>
 8000508:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800050c:	d01f      	beq.n	800054e <get_pin+0xb2>
 800050e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000512:	d01e      	beq.n	8000552 <get_pin+0xb6>
 8000514:	e01f      	b.n	8000556 <get_pin+0xba>
		{
		//from pin 0 t0 7 CRL
		case GPIO_PIN_0:
			return 0 ;
 8000516:	2300      	movs	r3, #0
 8000518:	e01d      	b.n	8000556 <get_pin+0xba>
			break ;
		case GPIO_PIN_1:
			return 4 ;
 800051a:	2304      	movs	r3, #4
 800051c:	e01b      	b.n	8000556 <get_pin+0xba>
			break ;
		case GPIO_PIN_2:
			return 8 ;
 800051e:	2308      	movs	r3, #8
 8000520:	e019      	b.n	8000556 <get_pin+0xba>
			break ;
		case GPIO_PIN_3:
			return 12 ;
 8000522:	230c      	movs	r3, #12
 8000524:	e017      	b.n	8000556 <get_pin+0xba>
			break ;

		case GPIO_PIN_4:
			return 16 ;
 8000526:	2310      	movs	r3, #16
 8000528:	e015      	b.n	8000556 <get_pin+0xba>
			break ;

		case GPIO_PIN_5:
			return 20 ;
 800052a:	2314      	movs	r3, #20
 800052c:	e013      	b.n	8000556 <get_pin+0xba>
			break ;

		case GPIO_PIN_6:
			return 24 ;
 800052e:	2318      	movs	r3, #24
 8000530:	e011      	b.n	8000556 <get_pin+0xba>
			break ;

		case GPIO_PIN_7:
			return 28 ;
 8000532:	231c      	movs	r3, #28
 8000534:	e00f      	b.n	8000556 <get_pin+0xba>
			break ;

			//from pin 8 t0 15 CRH
		case GPIO_PIN_8:
			return 0 ;
 8000536:	2300      	movs	r3, #0
 8000538:	e00d      	b.n	8000556 <get_pin+0xba>
			break ;
		case GPIO_PIN_9:
			return 4 ;
 800053a:	2304      	movs	r3, #4
 800053c:	e00b      	b.n	8000556 <get_pin+0xba>
			break ;

		case GPIO_PIN_10:
			return 8 ;
 800053e:	2308      	movs	r3, #8
 8000540:	e009      	b.n	8000556 <get_pin+0xba>
			break ;

		case GPIO_PIN_11:
			return 12 ;
 8000542:	230c      	movs	r3, #12
 8000544:	e007      	b.n	8000556 <get_pin+0xba>
			break ;

		case GPIO_PIN_12:
			return 16 ;
 8000546:	2310      	movs	r3, #16
 8000548:	e005      	b.n	8000556 <get_pin+0xba>
			break ;


		case GPIO_PIN_13:
			return 20 ;
 800054a:	2314      	movs	r3, #20
 800054c:	e003      	b.n	8000556 <get_pin+0xba>
			break ;

		case GPIO_PIN_14:
			return 24 ;
 800054e:	2318      	movs	r3, #24
 8000550:	e001      	b.n	8000556 <get_pin+0xba>
			break ;

		case GPIO_PIN_15:
			return 28 ;
 8000552:	231c      	movs	r3, #28
 8000554:	e7ff      	b.n	8000556 <get_pin+0xba>



		}

}
 8000556:	4618      	mov	r0, r3
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr

08000560 <GPIOx_init>:
* @param [in]    -GPIOx: where x can be (A..E depending on device used) to select the GPIO peripheral
* @param [out]   -GPIO_conf pointer to a GPIO PinConfig t structure that contains the configuration information for the specified GPIO PIN
* @retval        -non
* Note           -Stm32F103C6 MCU has GPIO A, B, C,D, E Modules But LQFP48 Package has only GPIO A, B, PART of C/D exported as external PINS from MCU
*/
void GPIOx_init (typedef_GPIO* GPIOx,GPIO_Pinconfige_t* GPIO_conf){
 8000560:	b590      	push	{r4, r7, lr}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
	uint32_t* config=NULL;
 800056a:	2300      	movs	r3, #0
 800056c:	60bb      	str	r3, [r7, #8]
	config=(GPIO_conf->Pin_Number)>GPIO_PIN_8?&GPIOx->CRH:&GPIOx->CRL;
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000576:	d902      	bls.n	800057e <GPIOx_init+0x1e>
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	3304      	adds	r3, #4
 800057c:	e000      	b.n	8000580 <GPIOx_init+0x20>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	60bb      	str	r3, [r7, #8]
	uint8_t pinVal =0;
 8000582:	2300      	movs	r3, #0
 8000584:	73fb      	strb	r3, [r7, #15]
	*(config) &= (~(0xf <<get_pin(GPIO_conf->Pin_Number)));
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	881b      	ldrh	r3, [r3, #0]
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff ff86 	bl	800049c <get_pin>
 8000590:	4603      	mov	r3, r0
 8000592:	461a      	mov	r2, r3
 8000594:	230f      	movs	r3, #15
 8000596:	4093      	lsls	r3, r2
 8000598:	43da      	mvns	r2, r3
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	401a      	ands	r2, r3
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	601a      	str	r2, [r3, #0]



	if(GPIO_conf->Mode==GPIO_MODE_OUTPUT_PP||GPIO_conf->Mode==GPIO_MODE_OUTPUT_OD||GPIO_conf->Mode==GPIO_MODE_OUTPUT_AF_PP||GPIO_conf->Mode==GPIO_MODE_OUTPUT_AF_OD){
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	789b      	ldrb	r3, [r3, #2]
 80005a8:	2b04      	cmp	r3, #4
 80005aa:	d00b      	beq.n	80005c4 <GPIOx_init+0x64>
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	789b      	ldrb	r3, [r3, #2]
 80005b0:	2b05      	cmp	r3, #5
 80005b2:	d007      	beq.n	80005c4 <GPIOx_init+0x64>
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	789b      	ldrb	r3, [r3, #2]
 80005b8:	2b06      	cmp	r3, #6
 80005ba:	d003      	beq.n	80005c4 <GPIOx_init+0x64>
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	789b      	ldrb	r3, [r3, #2]
 80005c0:	2b07      	cmp	r3, #7
 80005c2:	d10e      	bne.n	80005e2 <GPIOx_init+0x82>
		pinVal= (((GPIO_conf->Mode -4)<<2) | (GPIO_conf->Speed) & 0x0f);
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	789b      	ldrb	r3, [r3, #2]
 80005c8:	3b04      	subs	r3, #4
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	b25a      	sxtb	r2, r3
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	78db      	ldrb	r3, [r3, #3]
 80005d2:	b25b      	sxtb	r3, r3
 80005d4:	f003 030f 	and.w	r3, r3, #15
 80005d8:	b25b      	sxtb	r3, r3
 80005da:	4313      	orrs	r3, r2
 80005dc:	b25b      	sxtb	r3, r3
 80005de:	73fb      	strb	r3, [r7, #15]
 80005e0:	e02a      	b.n	8000638 <GPIOx_init+0xd8>


	}else{


		if(GPIO_conf->Mode==GPIO_MODE_ANALOG||GPIO_conf->Mode==GPIO_MODE_INPUT_FLO){
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	789b      	ldrb	r3, [r3, #2]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d003      	beq.n	80005f2 <GPIOx_init+0x92>
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	789b      	ldrb	r3, [r3, #2]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d107      	bne.n	8000602 <GPIOx_init+0xa2>
			pinVal=(((GPIO_conf->Mode<<2)|0x00)& 0x0f);
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	789b      	ldrb	r3, [r3, #2]
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	f003 030f 	and.w	r3, r3, #15
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e01a      	b.n	8000638 <GPIOx_init+0xd8>



		}
		else if (GPIO_conf->Mode == GPIO_MODE_AF_INPUT) // consider it floating input
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	789b      	ldrb	r3, [r3, #2]
 8000606:	2b08      	cmp	r3, #8
 8000608:	d102      	bne.n	8000610 <GPIOx_init+0xb0>
		{
			pinVal = ((((GPIO_MODE_INPUT_FLO)<<2) | 0x0) & 0xf );
 800060a:	2304      	movs	r3, #4
 800060c:	73fb      	strb	r3, [r7, #15]
 800060e:	e013      	b.n	8000638 <GPIOx_init+0xd8>
		}

		//in case of PULL UP & PULL DOWN
		else
		{
			pinVal = ((((GPIO_MODE_INPUT_PU)<<2) | 0x0) & 0xf );
 8000610:	2308      	movs	r3, #8
 8000612:	73fb      	strb	r3, [r7, #15]
			if(GPIO_conf->Mode == GPIO_MODE_INPUT_PU)
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	789b      	ldrb	r3, [r3, #2]
 8000618:	2b02      	cmp	r3, #2
 800061a:	d105      	bne.n	8000628 <GPIOx_init+0xc8>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR = GPIO_conf->Pin_Number;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	461a      	mov	r2, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	e007      	b.n	8000638 <GPIOx_init+0xd8>

			}
			else
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR &= ~(GPIO_conf->Pin_Number);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	683a      	ldr	r2, [r7, #0]
 800062e:	8812      	ldrh	r2, [r2, #0]
 8000630:	43d2      	mvns	r2, r2
 8000632:	401a      	ands	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	60da      	str	r2, [r3, #12]
			}

		}
	}
	(*config) |= ((pinVal)<< get_pin(GPIO_conf->Pin_Number));
 8000638:	7bfc      	ldrb	r4, [r7, #15]
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ff2c 	bl	800049c <get_pin>
 8000644:	4603      	mov	r3, r0
 8000646:	fa04 f203 	lsl.w	r2, r4, r3
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	431a      	orrs	r2, r3
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	601a      	str	r2, [r3, #0]

}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	bd90      	pop	{r4, r7, pc}

0800065c <MCAL_RCC_GET_SYSCLK>:
//-----------------------------
const uint8_t APB[8U]={0,0,0,0,1,2,3,4};

const uint8_t AHB[20U]={0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9};
//------------------------------------
uint32_t MCAL_RCC_GET_SYSCLK(void){
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0

	switch((RCC->CFGR >>2) & 0b11){
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <MCAL_RCC_GET_SYSCLK+0x30>)
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	089b      	lsrs	r3, r3, #2
 8000666:	f003 0303 	and.w	r3, r3, #3
 800066a:	2b01      	cmp	r3, #1
 800066c:	d006      	beq.n	800067c <MCAL_RCC_GET_SYSCLK+0x20>
 800066e:	2b01      	cmp	r3, #1
 8000670:	d302      	bcc.n	8000678 <MCAL_RCC_GET_SYSCLK+0x1c>
 8000672:	2b02      	cmp	r3, #2
 8000674:	d004      	beq.n	8000680 <MCAL_RCC_GET_SYSCLK+0x24>
 8000676:	e005      	b.n	8000684 <MCAL_RCC_GET_SYSCLK+0x28>
	case 0:
		return HSI_RC_CLK;
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <MCAL_RCC_GET_SYSCLK+0x34>)
 800067a:	e003      	b.n	8000684 <MCAL_RCC_GET_SYSCLK+0x28>
		break;
	case 1:
		return HSE_RC_CLK;
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <MCAL_RCC_GET_SYSCLK+0x38>)
 800067e:	e001      	b.n	8000684 <MCAL_RCC_GET_SYSCLK+0x28>
		break;
	case 2:
		return 16000000;
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <MCAL_RCC_GET_SYSCLK+0x38>)
 8000682:	e7ff      	b.n	8000684 <MCAL_RCC_GET_SYSCLK+0x28>
		break;
	}

}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr
 800068c:	40021000 	.word	0x40021000
 8000690:	007a1200 	.word	0x007a1200
 8000694:	00f42400 	.word	0x00f42400

08000698 <MCAL_RCC_GET_AHB>:
uint32_t MCAL_RCC_GET_AHB(void){
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GET_SYSCLK() >> AHB[(RCC->CFGR >> 4) & 0xF]);
 800069c:	f7ff ffde 	bl	800065c <MCAL_RCC_GET_SYSCLK>
 80006a0:	4601      	mov	r1, r0
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <MCAL_RCC_GET_AHB+0x20>)
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	091b      	lsrs	r3, r3, #4
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	4a03      	ldr	r2, [pc, #12]	; (80006bc <MCAL_RCC_GET_AHB+0x24>)
 80006ae:	5cd3      	ldrb	r3, [r2, r3]
 80006b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000
 80006bc:	08000e70 	.word	0x08000e70

080006c0 <MCAL_RCC_GET_PCLK1>:
//MCAL_RCC_GET_PCLK1 Path ABP1
uint32_t MCAL_RCC_GET_PCLK1(void){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GET_AHB()>> APB[(RCC->CFGR >>8) & 0b111]);
 80006c4:	f7ff ffe8 	bl	8000698 <MCAL_RCC_GET_AHB>
 80006c8:	4601      	mov	r1, r0
 80006ca:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <MCAL_RCC_GET_PCLK1+0x20>)
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	0a1b      	lsrs	r3, r3, #8
 80006d0:	f003 0307 	and.w	r3, r3, #7
 80006d4:	4a03      	ldr	r2, [pc, #12]	; (80006e4 <MCAL_RCC_GET_PCLK1+0x24>)
 80006d6:	5cd3      	ldrb	r3, [r2, r3]
 80006d8:	fa21 f303 	lsr.w	r3, r1, r3

}
 80006dc:	4618      	mov	r0, r3
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40021000 	.word	0x40021000
 80006e4:	08000e68 	.word	0x08000e68

080006e8 <MCAL_RCC_GET_PCLK2>:
//MCAL_RCC_GET_PCLK2 Path ABP2
uint32_t MCAL_RCC_GET_PCLK2(void){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GET_AHB() >> APB[( RCC->CFGR >>11) & 0b111]);
 80006ec:	f7ff ffd4 	bl	8000698 <MCAL_RCC_GET_AHB>
 80006f0:	4601      	mov	r1, r0
 80006f2:	4b05      	ldr	r3, [pc, #20]	; (8000708 <MCAL_RCC_GET_PCLK2+0x20>)
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	0adb      	lsrs	r3, r3, #11
 80006f8:	f003 0307 	and.w	r3, r3, #7
 80006fc:	4a03      	ldr	r2, [pc, #12]	; (800070c <MCAL_RCC_GET_PCLK2+0x24>)
 80006fe:	5cd3      	ldrb	r3, [r2, r3]
 8000700:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000704:	4618      	mov	r0, r3
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40021000 	.word	0x40021000
 800070c:	08000e68 	.word	0x08000e68

08000710 <MCAL_SPI_Init>:

SPI_Pinconfige_t* SPI_confige=NULL;

//uint32_t DIV,FRACTION,Freq,Mode_,boudrade;

void MCAL_SPI_Init(typedef_SPI* SPIx,SPI_Pinconfige_t* SPI_conf){
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
	SPI_confige=SPI_conf;
 800071a:	4a52      	ldr	r2, [pc, #328]	; (8000864 <MCAL_SPI_Init+0x154>)
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	6013      	str	r3, [r2, #0]
		//uint32_t pclk ,BRR  ;
	//Sefety register
	uint16_t Tmpreg_CR1 = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	81fb      	strh	r3, [r7, #14]
	uint16_t Tmpreg_CR2 = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	81bb      	strh	r3, [r7, #12]
	//RCC_SPI
		if(SPIx ==SPI1){
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a4f      	ldr	r2, [pc, #316]	; (8000868 <MCAL_SPI_Init+0x158>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d106      	bne.n	800073e <MCAL_SPI_Init+0x2e>
			RCC_SPI1_CLK_EN();
 8000730:	4b4e      	ldr	r3, [pc, #312]	; (800086c <MCAL_SPI_Init+0x15c>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	4a4d      	ldr	r2, [pc, #308]	; (800086c <MCAL_SPI_Init+0x15c>)
 8000736:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	e014      	b.n	8000768 <MCAL_SPI_Init+0x58>
		}else if(SPIx==SPI2){
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a4b      	ldr	r2, [pc, #300]	; (8000870 <MCAL_SPI_Init+0x160>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d106      	bne.n	8000754 <MCAL_SPI_Init+0x44>
			RCC_SPI2_CLK_EN();
 8000746:	4b49      	ldr	r3, [pc, #292]	; (800086c <MCAL_SPI_Init+0x15c>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	4a48      	ldr	r2, [pc, #288]	; (800086c <MCAL_SPI_Init+0x15c>)
 800074c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000750:	6193      	str	r3, [r2, #24]
 8000752:	e009      	b.n	8000768 <MCAL_SPI_Init+0x58>
		}else if(SPIx==SPI3){
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a47      	ldr	r2, [pc, #284]	; (8000874 <MCAL_SPI_Init+0x164>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d105      	bne.n	8000768 <MCAL_SPI_Init+0x58>
			RCC_SPI3_CLK_EN();
 800075c:	4b43      	ldr	r3, [pc, #268]	; (800086c <MCAL_SPI_Init+0x15c>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a42      	ldr	r2, [pc, #264]	; (800086c <MCAL_SPI_Init+0x15c>)
 8000762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000766:	6193      	str	r3, [r2, #24]
		}

		/*Bit 6 SPE: SPI enable
		0: Peripheral disabled
		1: Peripheral enabled*/
		Tmpreg_CR1 |=(1<<6);
 8000768:	89fb      	ldrh	r3, [r7, #14]
 800076a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800076e:	81fb      	strh	r3, [r7, #14]
// Set the DFF bit to define 8- or 16-bit data frame format
		Tmpreg_CR1 |= (SPI_confige->DATA_SIZE);
 8000770:	4b3c      	ldr	r3, [pc, #240]	; (8000864 <MCAL_SPI_Init+0x154>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	78db      	ldrb	r3, [r3, #3]
 8000776:	b29a      	uxth	r2, r3
 8000778:	89fb      	ldrh	r3, [r7, #14]
 800077a:	4313      	orrs	r3, r2
 800077c:	81fb      	strh	r3, [r7, #14]
//Select the CPOL and CPHA bits to define one of the four relationships between the
//		data transfer and the serial clock
		Tmpreg_CR1 |= (SPI_confige->CLK_Polarity);
 800077e:	4b39      	ldr	r3, [pc, #228]	; (8000864 <MCAL_SPI_Init+0x154>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	799b      	ldrb	r3, [r3, #6]
 8000784:	b29a      	uxth	r2, r3
 8000786:	89fb      	ldrh	r3, [r7, #14]
 8000788:	4313      	orrs	r3, r2
 800078a:	81fb      	strh	r3, [r7, #14]
		Tmpreg_CR1 |= (SPI_confige->CLKPhase);
 800078c:	4b35      	ldr	r3, [pc, #212]	; (8000864 <MCAL_SPI_Init+0x154>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	79db      	ldrb	r3, [r3, #7]
 8000792:	b29a      	uxth	r2, r3
 8000794:	89fb      	ldrh	r3, [r7, #14]
 8000796:	4313      	orrs	r3, r2
 8000798:	81fb      	strh	r3, [r7, #14]
//The frame format (MSB-first or LSB-first depending on the value of the LSBFIRST bit in
//		the SPI_CR1 register)
		Tmpreg_CR1 |= (SPI_confige->Fram_Format);
 800079a:	4b32      	ldr	r3, [pc, #200]	; (8000864 <MCAL_SPI_Init+0x154>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	791b      	ldrb	r3, [r3, #4]
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	89fb      	ldrh	r3, [r7, #14]
 80007a4:	4313      	orrs	r3, r2
 80007a6:	81fb      	strh	r3, [r7, #14]
//NSS MODE
		if(SPI_confige->NSS_MODE== SPI_NSS_Hardware_Master_SS_Output_Enable){
 80007a8:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <MCAL_SPI_Init+0x154>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	795b      	ldrb	r3, [r3, #5]
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	d106      	bne.n	80007c0 <MCAL_SPI_Init+0xb0>
			Tmpreg_CR2 |= SPI_conf->NSS_MODE;
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	795b      	ldrb	r3, [r3, #5]
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	89bb      	ldrh	r3, [r7, #12]
 80007ba:	4313      	orrs	r3, r2
 80007bc:	81bb      	strh	r3, [r7, #12]
 80007be:	e005      	b.n	80007cc <MCAL_SPI_Init+0xbc>

			Tmpreg_CR2 |= SPI_conf->NSS_MODE;
		}

		else{
			Tmpreg_CR1 |= SPI_conf->NSS_MODE;
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	795b      	ldrb	r3, [r3, #5]
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	89fb      	ldrh	r3, [r7, #14]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	81fb      	strh	r3, [r7, #14]
		}
	//SPI Mode
		Tmpreg_CR1 |= (SPI_confige->SPI_MODE);
 80007cc:	4b25      	ldr	r3, [pc, #148]	; (8000864 <MCAL_SPI_Init+0x154>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	89fb      	ldrh	r3, [r7, #14]
 80007d6:	4313      	orrs	r3, r2
 80007d8:	81fb      	strh	r3, [r7, #14]
	//SPI Communication
		Tmpreg_CR1 |= (SPI_confige->SPI_Communication_MODE);
 80007da:	4b22      	ldr	r3, [pc, #136]	; (8000864 <MCAL_SPI_Init+0x154>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	785b      	ldrb	r3, [r3, #1]
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	89fb      	ldrh	r3, [r7, #14]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	81fb      	strh	r3, [r7, #14]
	//SPI Freq
		Tmpreg_CR1 |= (SPI_confige->SPI_CLOCK_Freq);
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <MCAL_SPI_Init+0x154>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	789b      	ldrb	r3, [r3, #2]
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	89fb      	ldrh	r3, [r7, #14]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	81fb      	strh	r3, [r7, #14]
	//SPI IRQ
		if( SPI_confige->IRQ_ENABLE!=SPI_IRQ_NON){
 80007f6:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MCAL_SPI_Init+0x154>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	7a1b      	ldrb	r3, [r3, #8]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d025      	beq.n	800084c <MCAL_SPI_Init+0x13c>



			Tmpreg_CR2 |= SPI_conf->IRQ_ENABLE;
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	7a1b      	ldrb	r3, [r3, #8]
 8000804:	b29a      	uxth	r2, r3
 8000806:	89bb      	ldrh	r3, [r7, #12]
 8000808:	4313      	orrs	r3, r2
 800080a:	81bb      	strh	r3, [r7, #12]



			if(SPIx==SPI1){
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a16      	ldr	r2, [pc, #88]	; (8000868 <MCAL_SPI_Init+0x158>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d106      	bne.n	8000822 <MCAL_SPI_Init+0x112>


				NVIC_IRQ35_SPI1_EN;
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MCAL_SPI_Init+0x168>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a17      	ldr	r2, [pc, #92]	; (8000878 <MCAL_SPI_Init+0x168>)
 800081a:	f043 0308 	orr.w	r3, r3, #8
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	e014      	b.n	800084c <MCAL_SPI_Init+0x13c>


			}else if(SPIx==SPI2){
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a12      	ldr	r2, [pc, #72]	; (8000870 <MCAL_SPI_Init+0x160>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d106      	bne.n	8000838 <MCAL_SPI_Init+0x128>


				NVIC_IRQ36_SPI2_EN;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MCAL_SPI_Init+0x168>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a12      	ldr	r2, [pc, #72]	; (8000878 <MCAL_SPI_Init+0x168>)
 8000830:	f043 0310 	orr.w	r3, r3, #16
 8000834:	6013      	str	r3, [r2, #0]
 8000836:	e009      	b.n	800084c <MCAL_SPI_Init+0x13c>


			}else if(SPIx==SPI3){
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <MCAL_SPI_Init+0x164>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d105      	bne.n	800084c <MCAL_SPI_Init+0x13c>


				NVIC_IRQ51_SPI3_EN;
 8000840:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <MCAL_SPI_Init+0x168>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a0c      	ldr	r2, [pc, #48]	; (8000878 <MCAL_SPI_Init+0x168>)
 8000846:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800084a:	6013      	str	r3, [r2, #0]
			}
		}

   SPIx->SPI_CR1=Tmpreg_CR1;
 800084c:	89fa      	ldrh	r2, [r7, #14]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	601a      	str	r2, [r3, #0]
   SPIx->SPI_CR2=Tmpreg_CR2;
 8000852:	89ba      	ldrh	r2, [r7, #12]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	605a      	str	r2, [r3, #4]

}
 8000858:	bf00      	nop
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	2000001c 	.word	0x2000001c
 8000868:	40013000 	.word	0x40013000
 800086c:	40021000 	.word	0x40021000
 8000870:	40003c00 	.word	0x40003c00
 8000874:	40003800 	.word	0x40003800
 8000878:	e000e104 	.word	0xe000e104

0800087c <MCAL_SPI_GPIO_Set_Pins>:


}


void MCAL_SPI_GPIO_Set_Pins(typedef_SPI* SPIx){
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	 * NSS:
	 * 		Hardware master /slave 						--> Input floating/ Input pull-up / Input pull-down
	 * 		Hardware master/ NSS output enabled			--> Alternate function push-pull
	 * 		Software Not used. 							--> Can be used as a GPIO
	 */
	if(SPIx==SPI1){
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a78      	ldr	r2, [pc, #480]	; (8000a68 <MCAL_SPI_GPIO_Set_Pins+0x1ec>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d170      	bne.n	800096e <MCAL_SPI_GPIO_Set_Pins+0xf2>

		if(SPI_confige->SPI_MODE==SPI_Device_Mode_Master){
 800088c:	4b77      	ldr	r3, [pc, #476]	; (8000a6c <MCAL_SPI_GPIO_Set_Pins+0x1f0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b04      	cmp	r3, #4
 8000894:	d134      	bne.n	8000900 <MCAL_SPI_GPIO_Set_Pins+0x84>
			//SCK
			GPIO_Pinconfige.Pin_Number=GPIO_PIN_5;
 8000896:	2320      	movs	r3, #32
 8000898:	81bb      	strh	r3, [r7, #12]
			GPIO_Pinconfige.Mode=GPIO_MODE_OUTPUT_AF_PP;
 800089a:	2306      	movs	r3, #6
 800089c:	73bb      	strb	r3, [r7, #14]
			GPIO_Pinconfige.Speed=GPIO_MODE_speed_10_MHz;
 800089e:	2301      	movs	r3, #1
 80008a0:	73fb      	strb	r3, [r7, #15]
			GPIOx_init(GPIOA, &GPIO_Pinconfige);
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	4619      	mov	r1, r3
 80008a8:	4871      	ldr	r0, [pc, #452]	; (8000a70 <MCAL_SPI_GPIO_Set_Pins+0x1f4>)
 80008aa:	f7ff fe59 	bl	8000560 <GPIOx_init>

			//MOSI_PIN
			GPIO_Pinconfige.Pin_Number=GPIO_PIN_7;
 80008ae:	2380      	movs	r3, #128	; 0x80
 80008b0:	81bb      	strh	r3, [r7, #12]
			GPIO_Pinconfige.Mode=GPIO_MODE_OUTPUT_AF_PP;
 80008b2:	2306      	movs	r3, #6
 80008b4:	73bb      	strb	r3, [r7, #14]
			GPIO_Pinconfige.Speed=GPIO_MODE_speed_10_MHz;
 80008b6:	2301      	movs	r3, #1
 80008b8:	73fb      	strb	r3, [r7, #15]
			GPIOx_init(GPIOA, &GPIO_Pinconfige);
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	4619      	mov	r1, r3
 80008c0:	486b      	ldr	r0, [pc, #428]	; (8000a70 <MCAL_SPI_GPIO_Set_Pins+0x1f4>)
 80008c2:	f7ff fe4d 	bl	8000560 <GPIOx_init>

			//MISO_PIN
			GPIO_Pinconfige.Pin_Number=GPIO_PIN_6;
 80008c6:	2340      	movs	r3, #64	; 0x40
 80008c8:	81bb      	strh	r3, [r7, #12]
			GPIO_Pinconfige.Mode=GPIO_MODE_INPUT_FLO;
 80008ca:	2301      	movs	r3, #1
 80008cc:	73bb      	strb	r3, [r7, #14]
			GPIOx_init(GPIOA, &GPIO_Pinconfige);
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	4619      	mov	r1, r3
 80008d4:	4866      	ldr	r0, [pc, #408]	; (8000a70 <MCAL_SPI_GPIO_Set_Pins+0x1f4>)
 80008d6:	f7ff fe43 	bl	8000560 <GPIOx_init>

				//NSS
				GPIO_Pinconfige.Pin_Number=GPIO_PIN_4;
				GPIO_Pinconfige.Mode=GPIO_MODE_INPUT_FLO;
				GPIOx_init(GPIOA, &GPIO_Pinconfige);
			}else if(SPI_confige->NSS_MODE==SPI_NSS_Hardware_Master_SS_Output_Enable){
 80008da:	4b64      	ldr	r3, [pc, #400]	; (8000a6c <MCAL_SPI_GPIO_Set_Pins+0x1f0>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	795b      	ldrb	r3, [r3, #5]
 80008e0:	2b04      	cmp	r3, #4
 80008e2:	f040 80bd 	bne.w	8000a60 <MCAL_SPI_GPIO_Set_Pins+0x1e4>
				//NSS
				GPIO_Pinconfige.Pin_Number=GPIO_PIN_4;
 80008e6:	2310      	movs	r3, #16
 80008e8:	81bb      	strh	r3, [r7, #12]
				GPIO_Pinconfige.Mode=GPIO_MODE_OUTPUT_AF_PP;
 80008ea:	2306      	movs	r3, #6
 80008ec:	73bb      	strb	r3, [r7, #14]
				GPIO_Pinconfige.Speed=GPIO_MODE_speed_10_MHz;
 80008ee:	2301      	movs	r3, #1
 80008f0:	73fb      	strb	r3, [r7, #15]
				GPIOx_init(GPIOA, &GPIO_Pinconfige);
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	4619      	mov	r1, r3
 80008f8:	485d      	ldr	r0, [pc, #372]	; (8000a70 <MCAL_SPI_GPIO_Set_Pins+0x1f4>)
 80008fa:	f7ff fe31 	bl	8000560 <GPIOx_init>


	}else if(SPIx==SPI3){

	}
}
 80008fe:	e0af      	b.n	8000a60 <MCAL_SPI_GPIO_Set_Pins+0x1e4>
		}else if(SPI_confige->SPI_MODE==SPI_Device_Mode_Slave){
 8000900:	4b5a      	ldr	r3, [pc, #360]	; (8000a6c <MCAL_SPI_GPIO_Set_Pins+0x1f0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	f040 80aa 	bne.w	8000a60 <MCAL_SPI_GPIO_Set_Pins+0x1e4>
			GPIO_Pinconfige.Pin_Number=GPIO_PIN_5;
 800090c:	2320      	movs	r3, #32
 800090e:	81bb      	strh	r3, [r7, #12]
			GPIO_Pinconfige.Mode=GPIO_MODE_INPUT_FLO;
 8000910:	2301      	movs	r3, #1
 8000912:	73bb      	strb	r3, [r7, #14]
			GPIOx_init(GPIOA, &GPIO_Pinconfige);
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	4619      	mov	r1, r3
 800091a:	4855      	ldr	r0, [pc, #340]	; (8000a70 <MCAL_SPI_GPIO_Set_Pins+0x1f4>)
 800091c:	f7ff fe20 	bl	8000560 <GPIOx_init>
			GPIO_Pinconfige.Pin_Number=GPIO_PIN_7;
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	81bb      	strh	r3, [r7, #12]
			GPIO_Pinconfige.Mode=GPIO_MODE_INPUT_FLO;
 8000924:	2301      	movs	r3, #1
 8000926:	73bb      	strb	r3, [r7, #14]
			GPIOx_init(GPIOA, &GPIO_Pinconfige);
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	4619      	mov	r1, r3
 800092e:	4850      	ldr	r0, [pc, #320]	; (8000a70 <MCAL_SPI_GPIO_Set_Pins+0x1f4>)
 8000930:	f7ff fe16 	bl	8000560 <GPIOx_init>
			GPIO_Pinconfige.Pin_Number=GPIO_PIN_6;
 8000934:	2340      	movs	r3, #64	; 0x40
 8000936:	81bb      	strh	r3, [r7, #12]
			GPIO_Pinconfige.Mode=GPIO_MODE_OUTPUT_AF_PP;
 8000938:	2306      	movs	r3, #6
 800093a:	73bb      	strb	r3, [r7, #14]
			GPIO_Pinconfige.Speed=GPIO_MODE_speed_10_MHz;
 800093c:	2301      	movs	r3, #1
 800093e:	73fb      	strb	r3, [r7, #15]
			GPIOx_init(GPIOA, &GPIO_Pinconfige);
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	4619      	mov	r1, r3
 8000946:	484a      	ldr	r0, [pc, #296]	; (8000a70 <MCAL_SPI_GPIO_Set_Pins+0x1f4>)
 8000948:	f7ff fe0a 	bl	8000560 <GPIOx_init>
			if(SPI_confige->NSS_MODE==SPI_NSS_Hardware_Slave){
 800094c:	4b47      	ldr	r3, [pc, #284]	; (8000a6c <MCAL_SPI_GPIO_Set_Pins+0x1f0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	795b      	ldrb	r3, [r3, #5]
 8000952:	2b00      	cmp	r3, #0
 8000954:	f040 8084 	bne.w	8000a60 <MCAL_SPI_GPIO_Set_Pins+0x1e4>
				GPIO_Pinconfige.Pin_Number=GPIO_PIN_4;
 8000958:	2310      	movs	r3, #16
 800095a:	81bb      	strh	r3, [r7, #12]
				GPIO_Pinconfige.Mode=GPIO_MODE_INPUT_FLO;
 800095c:	2301      	movs	r3, #1
 800095e:	73bb      	strb	r3, [r7, #14]
				GPIOx_init(GPIOA, &GPIO_Pinconfige);
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	4619      	mov	r1, r3
 8000966:	4842      	ldr	r0, [pc, #264]	; (8000a70 <MCAL_SPI_GPIO_Set_Pins+0x1f4>)
 8000968:	f7ff fdfa 	bl	8000560 <GPIOx_init>
}
 800096c:	e078      	b.n	8000a60 <MCAL_SPI_GPIO_Set_Pins+0x1e4>
	}else if(SPIx==SPI2){
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a40      	ldr	r2, [pc, #256]	; (8000a74 <MCAL_SPI_GPIO_Set_Pins+0x1f8>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d174      	bne.n	8000a60 <MCAL_SPI_GPIO_Set_Pins+0x1e4>
		if(SPI_confige->SPI_MODE==SPI_Device_Mode_Master){
 8000976:	4b3d      	ldr	r3, [pc, #244]	; (8000a6c <MCAL_SPI_GPIO_Set_Pins+0x1f0>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b04      	cmp	r3, #4
 800097e:	d137      	bne.n	80009f0 <MCAL_SPI_GPIO_Set_Pins+0x174>
			GPIO_Pinconfige.Pin_Number=GPIO_PIN_13;
 8000980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000984:	81bb      	strh	r3, [r7, #12]
			GPIO_Pinconfige.Mode=GPIO_MODE_OUTPUT_AF_PP;
 8000986:	2306      	movs	r3, #6
 8000988:	73bb      	strb	r3, [r7, #14]
			GPIO_Pinconfige.Speed=GPIO_MODE_speed_10_MHz;
 800098a:	2301      	movs	r3, #1
 800098c:	73fb      	strb	r3, [r7, #15]
			GPIOx_init(GPIOB, &GPIO_Pinconfige);
 800098e:	f107 030c 	add.w	r3, r7, #12
 8000992:	4619      	mov	r1, r3
 8000994:	4838      	ldr	r0, [pc, #224]	; (8000a78 <MCAL_SPI_GPIO_Set_Pins+0x1fc>)
 8000996:	f7ff fde3 	bl	8000560 <GPIOx_init>
			GPIO_Pinconfige.Pin_Number=GPIO_PIN_15;
 800099a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800099e:	81bb      	strh	r3, [r7, #12]
			GPIO_Pinconfige.Mode=GPIO_MODE_OUTPUT_AF_PP;
 80009a0:	2306      	movs	r3, #6
 80009a2:	73bb      	strb	r3, [r7, #14]
			GPIO_Pinconfige.Speed=GPIO_MODE_speed_10_MHz;
 80009a4:	2301      	movs	r3, #1
 80009a6:	73fb      	strb	r3, [r7, #15]
			GPIOx_init(GPIOB, &GPIO_Pinconfige);
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	4619      	mov	r1, r3
 80009ae:	4832      	ldr	r0, [pc, #200]	; (8000a78 <MCAL_SPI_GPIO_Set_Pins+0x1fc>)
 80009b0:	f7ff fdd6 	bl	8000560 <GPIOx_init>
			GPIO_Pinconfige.Pin_Number=GPIO_PIN_14;
 80009b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009b8:	81bb      	strh	r3, [r7, #12]
			GPIO_Pinconfige.Mode=GPIO_MODE_INPUT_FLO;
 80009ba:	2301      	movs	r3, #1
 80009bc:	73bb      	strb	r3, [r7, #14]
			GPIOx_init(GPIOB, &GPIO_Pinconfige);
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	4619      	mov	r1, r3
 80009c4:	482c      	ldr	r0, [pc, #176]	; (8000a78 <MCAL_SPI_GPIO_Set_Pins+0x1fc>)
 80009c6:	f7ff fdcb 	bl	8000560 <GPIOx_init>
			}else if(SPI_confige->NSS_MODE==SPI_NSS_Hardware_Master_SS_Output_Enable){
 80009ca:	4b28      	ldr	r3, [pc, #160]	; (8000a6c <MCAL_SPI_GPIO_Set_Pins+0x1f0>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	795b      	ldrb	r3, [r3, #5]
 80009d0:	2b04      	cmp	r3, #4
 80009d2:	d145      	bne.n	8000a60 <MCAL_SPI_GPIO_Set_Pins+0x1e4>
				GPIO_Pinconfige.Pin_Number=GPIO_PIN_12;
 80009d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d8:	81bb      	strh	r3, [r7, #12]
				GPIO_Pinconfige.Mode=GPIO_MODE_OUTPUT_AF_PP;
 80009da:	2306      	movs	r3, #6
 80009dc:	73bb      	strb	r3, [r7, #14]
				GPIO_Pinconfige.Speed=GPIO_MODE_speed_10_MHz;
 80009de:	2301      	movs	r3, #1
 80009e0:	73fb      	strb	r3, [r7, #15]
				GPIOx_init(GPIOB, &GPIO_Pinconfige);
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	4619      	mov	r1, r3
 80009e8:	4823      	ldr	r0, [pc, #140]	; (8000a78 <MCAL_SPI_GPIO_Set_Pins+0x1fc>)
 80009ea:	f7ff fdb9 	bl	8000560 <GPIOx_init>
}
 80009ee:	e037      	b.n	8000a60 <MCAL_SPI_GPIO_Set_Pins+0x1e4>
		}else if(SPI_confige->SPI_MODE==SPI_Device_Mode_Slave){
 80009f0:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <MCAL_SPI_GPIO_Set_Pins+0x1f0>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d132      	bne.n	8000a60 <MCAL_SPI_GPIO_Set_Pins+0x1e4>
			GPIO_Pinconfige.Pin_Number=GPIO_PIN_13;
 80009fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fe:	81bb      	strh	r3, [r7, #12]
			GPIO_Pinconfige.Mode=GPIO_MODE_INPUT_FLO;
 8000a00:	2301      	movs	r3, #1
 8000a02:	73bb      	strb	r3, [r7, #14]
			GPIOx_init(GPIOB, &GPIO_Pinconfige);
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	4619      	mov	r1, r3
 8000a0a:	481b      	ldr	r0, [pc, #108]	; (8000a78 <MCAL_SPI_GPIO_Set_Pins+0x1fc>)
 8000a0c:	f7ff fda8 	bl	8000560 <GPIOx_init>
			GPIO_Pinconfige.Pin_Number=GPIO_PIN_15;
 8000a10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a14:	81bb      	strh	r3, [r7, #12]
			GPIO_Pinconfige.Mode=GPIO_MODE_INPUT_FLO;
 8000a16:	2301      	movs	r3, #1
 8000a18:	73bb      	strb	r3, [r7, #14]
			GPIOx_init(GPIOB, &GPIO_Pinconfige);
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4815      	ldr	r0, [pc, #84]	; (8000a78 <MCAL_SPI_GPIO_Set_Pins+0x1fc>)
 8000a22:	f7ff fd9d 	bl	8000560 <GPIOx_init>
			GPIO_Pinconfige.Pin_Number=GPIO_PIN_14;
 8000a26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a2a:	81bb      	strh	r3, [r7, #12]
			GPIO_Pinconfige.Mode=GPIO_MODE_OUTPUT_AF_PP;
 8000a2c:	2306      	movs	r3, #6
 8000a2e:	73bb      	strb	r3, [r7, #14]
			GPIO_Pinconfige.Speed=GPIO_MODE_speed_10_MHz;
 8000a30:	2301      	movs	r3, #1
 8000a32:	73fb      	strb	r3, [r7, #15]
			GPIOx_init(GPIOB, &GPIO_Pinconfige);
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	4619      	mov	r1, r3
 8000a3a:	480f      	ldr	r0, [pc, #60]	; (8000a78 <MCAL_SPI_GPIO_Set_Pins+0x1fc>)
 8000a3c:	f7ff fd90 	bl	8000560 <GPIOx_init>
			if(SPI_confige->NSS_MODE==SPI_NSS_Hardware_Slave){
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <MCAL_SPI_GPIO_Set_Pins+0x1f0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	795b      	ldrb	r3, [r3, #5]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d10a      	bne.n	8000a60 <MCAL_SPI_GPIO_Set_Pins+0x1e4>
				GPIO_Pinconfige.Pin_Number=GPIO_PIN_12;
 8000a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4e:	81bb      	strh	r3, [r7, #12]
				GPIO_Pinconfige.Mode=GPIO_MODE_INPUT_FLO;
 8000a50:	2301      	movs	r3, #1
 8000a52:	73bb      	strb	r3, [r7, #14]
				GPIOx_init(GPIOB, &GPIO_Pinconfige);
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4807      	ldr	r0, [pc, #28]	; (8000a78 <MCAL_SPI_GPIO_Set_Pins+0x1fc>)
 8000a5c:	f7ff fd80 	bl	8000560 <GPIOx_init>
}
 8000a60:	bf00      	nop
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40013000 	.word	0x40013000
 8000a6c:	2000001c 	.word	0x2000001c
 8000a70:	40010800 	.word	0x40010800
 8000a74:	40003c00 	.word	0x40003c00
 8000a78:	40010c00 	.word	0x40010c00

08000a7c <MCAL_SPI_Tx_Rx>:

		*DATA=(uint16_t)SPIx->SPI_DR;

}

void MCAL_SPI_Tx_Rx(typedef_SPI *SPIx, uint16_t *DATA, enum Poling_Micanism Enable){
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	4613      	mov	r3, r2
 8000a88:	71fb      	strb	r3, [r7, #7]
	if(Enable== SPI_ENABLE){
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	2b00      	cmp	r3, #0
		while(!(SPIx->SPI_SR)&(1<<1));
	}
	SPIx->SPI_DR=*DATA;
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	461a      	mov	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	60da      	str	r2, [r3, #12]

	if(Enable== SPI_ENABLE){
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d104      	bne.n	8000aa8 <MCAL_SPI_Tx_Rx+0x2c>
		while(!(SPIx->SPI_SR)&(1<<0));
 8000a9e:	bf00      	nop
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d0fb      	beq.n	8000aa0 <MCAL_SPI_Tx_Rx+0x24>
	}
	*DATA=SPIx->SPI_DR;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	801a      	strh	r2, [r3, #0]
}
 8000ab2:	bf00      	nop
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <SPI1_IRQHandler>:


/* SPI1 global interrupt                          */
void SPI1_IRQHandler (void){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	/*struct S_IRQ_Source irq_src;
	irq_src.TXE = ((SPI1->SR >> 1) & 1);
	irq_src.RXNE = ((SPI1->SR >> 2) & 1);
	irq_src.ERRI = ((SPI1->SR >> 5) & 1);*/
	SPI_confige->SPI_IRQ_FUNCTION();
 8000ac0:	4b02      	ldr	r3, [pc, #8]	; (8000acc <SPI1_IRQHandler+0x10>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	4798      	blx	r3

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	2000001c 	.word	0x2000001c

08000ad0 <SPI2_IRQHandler>:
/* SPI2 global interrupt                          */
void SPI2_IRQHandler (void){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	/*struct S_IRQ_Source irq_src;
	irq_src.TXE = ((SPI1->SR >> 1) & 1);
	irq_src.RXNE = ((SPI1->SR >> 2) & 1);
	irq_src.ERRI = ((SPI1->SR >> 5) & 1);*/
	SPI_confige->SPI_IRQ_FUNCTION();
 8000ad4:	4b02      	ldr	r3, [pc, #8]	; (8000ae0 <SPI2_IRQHandler+0x10>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	4798      	blx	r3

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	2000001c 	.word	0x2000001c

08000ae4 <SPI3_IRQHandler>:
/* SPI3 global interrupt                          */
void SPI3_IRQHandler(void){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	/*struct S_IRQ_Source irq_src;
	irq_src.TXE = ((SPI1->SR >> 1) & 1);
	irq_src.RXNE = ((SPI1->SR >> 2) & 1);
	irq_src.ERRI = ((SPI1->SR >> 5) & 1);*/
	SPI_confige->SPI_IRQ_FUNCTION();
 8000ae8:	4b02      	ldr	r3, [pc, #8]	; (8000af4 <SPI3_IRQHandler+0x10>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	4798      	blx	r3

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	2000001c 	.word	0x2000001c

08000af8 <MCAL_UART_Init>:

USART_Pinconfige_t* USART_confige=NULL;

//uint32_t DIV,FRACTION,Freq,Mode_,boudrade;

void MCAL_UART_Init(typedef_USART* USARTx,USART_Pinconfige_t* USART_conf){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
	USART_confige=USART_conf;
 8000b02:	4a65      	ldr	r2, [pc, #404]	; (8000c98 <MCAL_UART_Init+0x1a0>)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	6013      	str	r3, [r2, #0]
	uint32_t pclk ,BRR  ;
//RCC_USART&UART
	if(USARTx==USART1){
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a64      	ldr	r2, [pc, #400]	; (8000c9c <MCAL_UART_Init+0x1a4>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d106      	bne.n	8000b1e <MCAL_UART_Init+0x26>
		RCC_USART1_CLK_EN();
 8000b10:	4b63      	ldr	r3, [pc, #396]	; (8000ca0 <MCAL_UART_Init+0x1a8>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a62      	ldr	r2, [pc, #392]	; (8000ca0 <MCAL_UART_Init+0x1a8>)
 8000b16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	e014      	b.n	8000b48 <MCAL_UART_Init+0x50>
	}else if(USARTx==USART2){
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a60      	ldr	r2, [pc, #384]	; (8000ca4 <MCAL_UART_Init+0x1ac>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d106      	bne.n	8000b34 <MCAL_UART_Init+0x3c>
		RCC_USART2_CLK_EN();
 8000b26:	4b5e      	ldr	r3, [pc, #376]	; (8000ca0 <MCAL_UART_Init+0x1a8>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	4a5d      	ldr	r2, [pc, #372]	; (8000ca0 <MCAL_UART_Init+0x1a8>)
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b30:	61d3      	str	r3, [r2, #28]
 8000b32:	e009      	b.n	8000b48 <MCAL_UART_Init+0x50>
	}else if(USARTx==USART3){
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a5c      	ldr	r2, [pc, #368]	; (8000ca8 <MCAL_UART_Init+0x1b0>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d105      	bne.n	8000b48 <MCAL_UART_Init+0x50>
		RCC_USART3_CLK_EN();
 8000b3c:	4b58      	ldr	r3, [pc, #352]	; (8000ca0 <MCAL_UART_Init+0x1a8>)
 8000b3e:	69db      	ldr	r3, [r3, #28]
 8000b40:	4a57      	ldr	r2, [pc, #348]	; (8000ca0 <MCAL_UART_Init+0x1a8>)
 8000b42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b46:	61d3      	str	r3, [r2, #28]
		 RCC_UART4_CLK_EN();
	}else if(USARTx==UART5){
		RCC_UART5_CLK_EN();
	}*/
//Enable the USART by writing the UE bit in USART_CR1 register to 1
	USARTx->USART_CR1|= (1<<13);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	60da      	str	r2, [r3, #12]
//choise TX or RX confige
	USARTx->USART_CR1|=(USART_confige->UART_MODE);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	4a4f      	ldr	r2, [pc, #316]	; (8000c98 <MCAL_UART_Init+0x1a0>)
 8000b5a:	6812      	ldr	r2, [r2, #0]
 8000b5c:	7812      	ldrb	r2, [r2, #0]
 8000b5e:	431a      	orrs	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	60da      	str	r2, [r3, #12]
//Program the M bit in USART_CR1 to define the word length
	USARTx->USART_CR1|=(USART_confige->DATA_SIZE);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	4a4b      	ldr	r2, [pc, #300]	; (8000c98 <MCAL_UART_Init+0x1a0>)
 8000b6a:	6812      	ldr	r2, [r2, #0]
 8000b6c:	7a12      	ldrb	r2, [r2, #8]
 8000b6e:	431a      	orrs	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	60da      	str	r2, [r3, #12]
//Program the number of stop bits in USART_CR2.
	USARTx->USART_CR2|=(USART_confige->STOP_MODE);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	4a47      	ldr	r2, [pc, #284]	; (8000c98 <MCAL_UART_Init+0x1a0>)
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	7a92      	ldrb	r2, [r2, #10]
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	611a      	str	r2, [r3, #16]
//Program the Type of parity (even or odd) to save data in USART_CR1.
	USARTx->USART_CR1|=(USART_confige->Parity);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	4a43      	ldr	r2, [pc, #268]	; (8000c98 <MCAL_UART_Init+0x1a0>)
 8000b8a:	6812      	ldr	r2, [r2, #0]
 8000b8c:	7a52      	ldrb	r2, [r2, #9]
 8000b8e:	431a      	orrs	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	60da      	str	r2, [r3, #12]
Bit 8 RTSE: RTS enable
0: RTS hardware flow control disabled
1: RTS interrupt enabled, data is only requested when there is space in the receive buffer

*/
	USARTx->USART_CR3|=(USART_confige->UART_HW_FLOW_CTL);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	695b      	ldr	r3, [r3, #20]
 8000b98:	4a3f      	ldr	r2, [pc, #252]	; (8000c98 <MCAL_UART_Init+0x1a0>)
 8000b9a:	6812      	ldr	r2, [r2, #0]
 8000b9c:	7ad2      	ldrb	r2, [r2, #11]
 8000b9e:	431a      	orrs	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	615a      	str	r2, [r3, #20]

//confige Boude_Rate
//ABP1------> USART1
//ABP2------> USART2,USART3,UART4 and UART5
	if(USARTx==USART1){
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a3d      	ldr	r2, [pc, #244]	; (8000c9c <MCAL_UART_Init+0x1a4>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d103      	bne.n	8000bb4 <MCAL_UART_Init+0xbc>
		pclk=MCAL_RCC_GET_PCLK2();
 8000bac:	f7ff fd9c 	bl	80006e8 <MCAL_RCC_GET_PCLK2>
 8000bb0:	60f8      	str	r0, [r7, #12]
 8000bb2:	e002      	b.n	8000bba <MCAL_UART_Init+0xc2>

	}else{
		pclk=MCAL_RCC_GET_PCLK1();
 8000bb4:	f7ff fd84 	bl	80006c0 <MCAL_RCC_GET_PCLK1>
 8000bb8:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, USART_conf->UART_Baud_Rate) ;
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	011b      	lsls	r3, r3, #4
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc6:	0119      	lsls	r1, r3, #4
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	4413      	add	r3, r2
 8000bd0:	009a      	lsls	r2, r3, #2
 8000bd2:	441a      	add	r2, r3
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	011b      	lsls	r3, r3, #4
 8000be4:	68f8      	ldr	r0, [r7, #12]
 8000be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000bea:	2064      	movs	r0, #100	; 0x64
 8000bec:	fb00 f303 	mul.w	r3, r0, r3
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	011b      	lsls	r3, r3, #4
 8000bf4:	4a2d      	ldr	r2, [pc, #180]	; (8000cac <MCAL_UART_Init+0x1b4>)
 8000bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	f003 030f 	and.w	r3, r3, #15
 8000c00:	430b      	orrs	r3, r1
 8000c02:	60bb      	str	r3, [r7, #8]

	 USARTx->USART_BRR = BRR ;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	609a      	str	r2, [r3, #8]

	if(USART_confige->IRQ_ENABLE !=USART_IRQ_ENABLE_NON){
 8000c0a:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <MCAL_UART_Init+0x1a0>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	7b1b      	ldrb	r3, [r3, #12]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d03d      	beq.n	8000c90 <MCAL_UART_Init+0x198>



		USARTx->USART_CR1|=(USART_confige->IRQ_ENABLE);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	4a1f      	ldr	r2, [pc, #124]	; (8000c98 <MCAL_UART_Init+0x1a0>)
 8000c1a:	6812      	ldr	r2, [r2, #0]
 8000c1c:	7b12      	ldrb	r2, [r2, #12]
 8000c1e:	431a      	orrs	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	60da      	str	r2, [r3, #12]



		if(USARTx==USART1){
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a1d      	ldr	r2, [pc, #116]	; (8000c9c <MCAL_UART_Init+0x1a4>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d106      	bne.n	8000c3a <MCAL_UART_Init+0x142>


			NVIC_IRQ37_USART1_EN;
 8000c2c:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <MCAL_UART_Init+0x1b8>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a1f      	ldr	r2, [pc, #124]	; (8000cb0 <MCAL_UART_Init+0x1b8>)
 8000c32:	f043 0320 	orr.w	r3, r3, #32
 8000c36:	6013      	str	r3, [r2, #0]

			}else if(USARTx==UART5){
				NVIC_IRQ53_UART4_EN;
			}
	}
}
 8000c38:	e02a      	b.n	8000c90 <MCAL_UART_Init+0x198>
			}else if(USARTx==USART2){
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <MCAL_UART_Init+0x1ac>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d106      	bne.n	8000c50 <MCAL_UART_Init+0x158>
				NVIC_IRQ38_USART2_EN;
 8000c42:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <MCAL_UART_Init+0x1b8>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a1a      	ldr	r2, [pc, #104]	; (8000cb0 <MCAL_UART_Init+0x1b8>)
 8000c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c4c:	6013      	str	r3, [r2, #0]
}
 8000c4e:	e01f      	b.n	8000c90 <MCAL_UART_Init+0x198>
			}else if(USARTx==USART3){
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a15      	ldr	r2, [pc, #84]	; (8000ca8 <MCAL_UART_Init+0x1b0>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d106      	bne.n	8000c66 <MCAL_UART_Init+0x16e>
				NVIC_IRQ39_USART3_EN;
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <MCAL_UART_Init+0x1b8>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <MCAL_UART_Init+0x1b8>)
 8000c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c62:	6013      	str	r3, [r2, #0]
}
 8000c64:	e014      	b.n	8000c90 <MCAL_UART_Init+0x198>
			}else if(USARTx==UART4){
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <MCAL_UART_Init+0x1bc>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d106      	bne.n	8000c7c <MCAL_UART_Init+0x184>
				NVIC_IRQ52_UART3_EN;
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <MCAL_UART_Init+0x1b8>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a0f      	ldr	r2, [pc, #60]	; (8000cb0 <MCAL_UART_Init+0x1b8>)
 8000c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c78:	6013      	str	r3, [r2, #0]
}
 8000c7a:	e009      	b.n	8000c90 <MCAL_UART_Init+0x198>
			}else if(USARTx==UART5){
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <MCAL_UART_Init+0x1c0>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d105      	bne.n	8000c90 <MCAL_UART_Init+0x198>
				NVIC_IRQ53_UART4_EN;
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <MCAL_UART_Init+0x1b8>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a09      	ldr	r2, [pc, #36]	; (8000cb0 <MCAL_UART_Init+0x1b8>)
 8000c8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c8e:	6013      	str	r3, [r2, #0]
}
 8000c90:	bf00      	nop
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000020 	.word	0x20000020
 8000c9c:	40013800 	.word	0x40013800
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40004400 	.word	0x40004400
 8000ca8:	40004800 	.word	0x40004800
 8000cac:	51eb851f 	.word	0x51eb851f
 8000cb0:	e000e104 	.word	0xe000e104
 8000cb4:	40004c00 	.word	0x40004c00
 8000cb8:	40005000 	.word	0x40005000

08000cbc <MCAL_UART_GPIO_Set_Pins>:

}



void MCAL_UART_GPIO_Set_Pins(typedef_USART* USARTx){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

	GPIO_Pinconfige_t GPIO_Pinconfige;

	if(USARTx==USART1){
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a2b      	ldr	r2, [pc, #172]	; (8000d74 <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d118      	bne.n	8000cfe <MCAL_UART_GPIO_Set_Pins+0x42>

		//TX-------->PA9------>30
		GPIO_Pinconfige.Pin_Number=GPIO_PIN_9;
 8000ccc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cd0:	81bb      	strh	r3, [r7, #12]
		GPIO_Pinconfige.Mode=GPIO_MODE_OUTPUT_AF_PP;
 8000cd2:	2306      	movs	r3, #6
 8000cd4:	73bb      	strb	r3, [r7, #14]
		GPIO_Pinconfige.Speed=GPIO_MODE_speed_10_MHz;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	73fb      	strb	r3, [r7, #15]
		GPIOx_init(GPIOA, &GPIO_Pinconfige);
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4825      	ldr	r0, [pc, #148]	; (8000d78 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000ce2:	f7ff fc3d 	bl	8000560 <GPIOx_init>
		//RX-------->PA10------>31
		GPIO_Pinconfige.Pin_Number=GPIO_PIN_10;
 8000ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cea:	81bb      	strh	r3, [r7, #12]
		GPIO_Pinconfige.Mode=GPIO_MODE_AF_INPUT;
 8000cec:	2308      	movs	r3, #8
 8000cee:	73bb      	strb	r3, [r7, #14]
		GPIOx_init(GPIOA, &GPIO_Pinconfige);
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4820      	ldr	r0, [pc, #128]	; (8000d78 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000cf8:	f7ff fc32 	bl	8000560 <GPIOx_init>

	}



}
 8000cfc:	e036      	b.n	8000d6c <MCAL_UART_GPIO_Set_Pins+0xb0>
	}else if(USARTx==USART2){
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a1e      	ldr	r2, [pc, #120]	; (8000d7c <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d116      	bne.n	8000d34 <MCAL_UART_GPIO_Set_Pins+0x78>
		GPIO_Pinconfige.Pin_Number=GPIO_PIN_2;
 8000d06:	2304      	movs	r3, #4
 8000d08:	81bb      	strh	r3, [r7, #12]
		GPIO_Pinconfige.Mode=GPIO_MODE_OUTPUT_AF_PP;
 8000d0a:	2306      	movs	r3, #6
 8000d0c:	73bb      	strb	r3, [r7, #14]
		GPIO_Pinconfige.Speed=GPIO_MODE_speed_10_MHz;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	73fb      	strb	r3, [r7, #15]
		GPIOx_init(GPIOA, &GPIO_Pinconfige);
 8000d12:	f107 030c 	add.w	r3, r7, #12
 8000d16:	4619      	mov	r1, r3
 8000d18:	4817      	ldr	r0, [pc, #92]	; (8000d78 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000d1a:	f7ff fc21 	bl	8000560 <GPIOx_init>
		GPIO_Pinconfige.Pin_Number=GPIO_PIN_3;
 8000d1e:	2308      	movs	r3, #8
 8000d20:	81bb      	strh	r3, [r7, #12]
		GPIO_Pinconfige.Mode=GPIO_MODE_AF_INPUT;
 8000d22:	2308      	movs	r3, #8
 8000d24:	73bb      	strb	r3, [r7, #14]
		GPIOx_init(GPIOA, &GPIO_Pinconfige);
 8000d26:	f107 030c 	add.w	r3, r7, #12
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4812      	ldr	r0, [pc, #72]	; (8000d78 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000d2e:	f7ff fc17 	bl	8000560 <GPIOx_init>
}
 8000d32:	e01b      	b.n	8000d6c <MCAL_UART_GPIO_Set_Pins+0xb0>
	}else if(USARTx==USART3){
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d117      	bne.n	8000d6c <MCAL_UART_GPIO_Set_Pins+0xb0>
		GPIO_Pinconfige.Pin_Number=GPIO_PIN_10;
 8000d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d40:	81bb      	strh	r3, [r7, #12]
		GPIO_Pinconfige.Mode=GPIO_MODE_OUTPUT_AF_PP;
 8000d42:	2306      	movs	r3, #6
 8000d44:	73bb      	strb	r3, [r7, #14]
		GPIO_Pinconfige.Speed=GPIO_MODE_speed_10_MHz;
 8000d46:	2301      	movs	r3, #1
 8000d48:	73fb      	strb	r3, [r7, #15]
		GPIOx_init(GPIOB, &GPIO_Pinconfige);
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480c      	ldr	r0, [pc, #48]	; (8000d84 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000d52:	f7ff fc05 	bl	8000560 <GPIOx_init>
		GPIO_Pinconfige.Pin_Number=GPIO_PIN_11;
 8000d56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d5a:	81bb      	strh	r3, [r7, #12]
		GPIO_Pinconfige.Mode=GPIO_MODE_AF_INPUT;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	73bb      	strb	r3, [r7, #14]
		GPIOx_init(GPIOB, &GPIO_Pinconfige);
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	4619      	mov	r1, r3
 8000d66:	4807      	ldr	r0, [pc, #28]	; (8000d84 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000d68:	f7ff fbfa 	bl	8000560 <GPIOx_init>
}
 8000d6c:	bf00      	nop
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40013800 	.word	0x40013800
 8000d78:	40010800 	.word	0x40010800
 8000d7c:	40004400 	.word	0x40004400
 8000d80:	40004800 	.word	0x40004800
 8000d84:	40010c00 	.word	0x40010c00

08000d88 <MCAL_UART_SendData>:
void MCAL_UART_SendData(typedef_USART* USARTx,uint16_t* DATA,enum Booling_Micanism Enable){
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	4613      	mov	r3, r2
 8000d94:	71fb      	strb	r3, [r7, #7]



	//wait Utile TXE full
//Bit 7 TXE: Transmit data register empty
	if(Enable==ENABLE){
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d106      	bne.n	8000daa <MCAL_UART_SendData+0x22>
		while(!((USARTx->USART_SR) &(1<<7)));
 8000d9c:	bf00      	nop
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0f9      	beq.n	8000d9e <MCAL_UART_SendData+0x16>


	if(USART_confige->DATA_SIZE ==USART_9_BIT){
		USARTx->USART_DR=((*DATA)& (uint16_t)0x01FF);

	}else if(USART_confige->DATA_SIZE ==USART_8_BIT){
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <MCAL_UART_SendData+0x40>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	7a1b      	ldrb	r3, [r3, #8]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d104      	bne.n	8000dbe <MCAL_UART_SendData+0x36>
		USARTx->USART_DR=((*DATA)& (uint8_t) 0xFF);
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	605a      	str	r2, [r3, #4]
	}
}
 8000dbe:	bf00      	nop
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	20000020 	.word	0x20000020

08000dcc <USART1_IRQHandler>:
}



/* USART1 global interrupt                          */
void USART1_IRQHandler (void){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	USART_confige->IRQ_FUNCTION();
 8000dd0:	4b02      	ldr	r3, [pc, #8]	; (8000ddc <USART1_IRQHandler+0x10>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	691b      	ldr	r3, [r3, #16]
 8000dd6:	4798      	blx	r3

}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000020 	.word	0x20000020

08000de0 <USART2_IRQHandler>:
/* USART2 global interrupt                          */
void USART2_IRQHandler (void){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	USART_confige->IRQ_FUNCTION();
 8000de4:	4b02      	ldr	r3, [pc, #8]	; (8000df0 <USART2_IRQHandler+0x10>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	691b      	ldr	r3, [r3, #16]
 8000dea:	4798      	blx	r3

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000020 	.word	0x20000020

08000df4 <USART3_IRQHandler>:
/* USART3 global interrupt                          */
void USART3_IRQHandler(void){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	USART_confige->IRQ_FUNCTION();
 8000df8:	4b02      	ldr	r3, [pc, #8]	; (8000e04 <USART3_IRQHandler+0x10>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	691b      	ldr	r3, [r3, #16]
 8000dfe:	4798      	blx	r3

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000020 	.word	0x20000020

08000e08 <__libc_init_array>:
 8000e08:	b570      	push	{r4, r5, r6, lr}
 8000e0a:	2500      	movs	r5, #0
 8000e0c:	4e0c      	ldr	r6, [pc, #48]	; (8000e40 <__libc_init_array+0x38>)
 8000e0e:	4c0d      	ldr	r4, [pc, #52]	; (8000e44 <__libc_init_array+0x3c>)
 8000e10:	1ba4      	subs	r4, r4, r6
 8000e12:	10a4      	asrs	r4, r4, #2
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	d109      	bne.n	8000e2c <__libc_init_array+0x24>
 8000e18:	f000 f81a 	bl	8000e50 <_init>
 8000e1c:	2500      	movs	r5, #0
 8000e1e:	4e0a      	ldr	r6, [pc, #40]	; (8000e48 <__libc_init_array+0x40>)
 8000e20:	4c0a      	ldr	r4, [pc, #40]	; (8000e4c <__libc_init_array+0x44>)
 8000e22:	1ba4      	subs	r4, r4, r6
 8000e24:	10a4      	asrs	r4, r4, #2
 8000e26:	42a5      	cmp	r5, r4
 8000e28:	d105      	bne.n	8000e36 <__libc_init_array+0x2e>
 8000e2a:	bd70      	pop	{r4, r5, r6, pc}
 8000e2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e30:	4798      	blx	r3
 8000e32:	3501      	adds	r5, #1
 8000e34:	e7ee      	b.n	8000e14 <__libc_init_array+0xc>
 8000e36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e3a:	4798      	blx	r3
 8000e3c:	3501      	adds	r5, #1
 8000e3e:	e7f2      	b.n	8000e26 <__libc_init_array+0x1e>
 8000e40:	08000e84 	.word	0x08000e84
 8000e44:	08000e84 	.word	0x08000e84
 8000e48:	08000e84 	.word	0x08000e84
 8000e4c:	08000e88 	.word	0x08000e88

08000e50 <_init>:
 8000e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e52:	bf00      	nop
 8000e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e56:	bc08      	pop	{r3}
 8000e58:	469e      	mov	lr, r3
 8000e5a:	4770      	bx	lr

08000e5c <_fini>:
 8000e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e5e:	bf00      	nop
 8000e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e62:	bc08      	pop	{r3}
 8000e64:	469e      	mov	lr, r3
 8000e66:	4770      	bx	lr
