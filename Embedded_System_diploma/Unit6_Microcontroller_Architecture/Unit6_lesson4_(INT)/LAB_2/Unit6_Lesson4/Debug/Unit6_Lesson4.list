
Unit6_Lesson4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000228  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000358  08000360  00010360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000358  08000358  00010360  2**0
                  CONTENTS
  4 .ARM          00000000  08000358  08000358  00010360  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000358  08000360  00010360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000358  08000358  00010358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800035c  0800035c  0001035c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000360  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000360  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010360  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a7d  00000000  00000000  00010389  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001d4  00000000  00000000  00010e06  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000208  00000000  00000000  00010fda  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000080  00000000  00000000  000111e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000068  00000000  00000000  00011268  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001d32  00000000  00000000  000112d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000691  00000000  00000000  00013002  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00008136  00000000  00000000  00013693  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001b7c9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000013c  00000000  00000000  0001b844  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000340 	.word	0x08000340

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000340 	.word	0x08000340

08000170 <init_AFIO>:
#define AFIO      0x40010000
#define AFIO_EXTICR1   *(volatile uint32_t *)(AFIO + 0x08)
//NVIC
#define NVIC_ISER0   *(volatile uint32_t *)(0xE000E100)

void init_AFIO(void){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

    AFIO_EXTICR1 |= 0b0000<<0;
 8000174:	4b03      	ldr	r3, [pc, #12]	; (8000184 <init_AFIO+0x14>)
 8000176:	4a03      	ldr	r2, [pc, #12]	; (8000184 <init_AFIO+0x14>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	6013      	str	r3, [r2, #0]
}
 800017c:	bf00      	nop
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	40010008 	.word	0x40010008

08000188 <clock>:
void clock (void){
 8000188:	b480      	push	{r7}
 800018a:	af00      	add	r7, sp, #0
	//clock_GPIO
	RCC_APB2ENR |= 1<<2;
 800018c:	4b07      	ldr	r3, [pc, #28]	; (80001ac <clock+0x24>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a06      	ldr	r2, [pc, #24]	; (80001ac <clock+0x24>)
 8000192:	f043 0304 	orr.w	r3, r3, #4
 8000196:	6013      	str	r3, [r2, #0]
	//clock_AFIO
	RCC_APB2ENR |=1<<0;
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <clock+0x24>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a03      	ldr	r2, [pc, #12]	; (80001ac <clock+0x24>)
 800019e:	f043 0301 	orr.w	r3, r3, #1
 80001a2:	6013      	str	r3, [r2, #0]
}
 80001a4:	bf00      	nop
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	40021018 	.word	0x40021018

080001b0 <init_GPIO>:
void init_GPIO(void){
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0

	//register_GPIO
	GPIOA_CRH &= 0xFF0FFFFF;
 80001b4:	4b0a      	ldr	r3, [pc, #40]	; (80001e0 <init_GPIO+0x30>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a09      	ldr	r2, [pc, #36]	; (80001e0 <init_GPIO+0x30>)
 80001ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001be:	6013      	str	r3, [r2, #0]
    GPIOA_CRH |= 0x00200000;
 80001c0:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <init_GPIO+0x30>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4a06      	ldr	r2, [pc, #24]	; (80001e0 <init_GPIO+0x30>)
 80001c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001ca:	6013      	str	r3, [r2, #0]
    GPIOA_CRL |= 0b01<<2;
 80001cc:	4b05      	ldr	r3, [pc, #20]	; (80001e4 <init_GPIO+0x34>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a04      	ldr	r2, [pc, #16]	; (80001e4 <init_GPIO+0x34>)
 80001d2:	f043 0304 	orr.w	r3, r3, #4
 80001d6:	6013      	str	r3, [r2, #0]
}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr
 80001e0:	40010804 	.word	0x40010804
 80001e4:	40010800 	.word	0x40010800

080001e8 <init_intrrupt>:
void init_intrrupt (void){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	//masked
	EXTI_IMR |= (1<<0) ;
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <init_intrrupt+0x2c>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a08      	ldr	r2, [pc, #32]	; (8000214 <init_intrrupt+0x2c>)
 80001f2:	f043 0301 	orr.w	r3, r3, #1
 80001f6:	6013      	str	r3, [r2, #0]
	//Raised
	EXTI_RTSR |= (1<<0);
 80001f8:	4b07      	ldr	r3, [pc, #28]	; (8000218 <init_intrrupt+0x30>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a06      	ldr	r2, [pc, #24]	; (8000218 <init_intrrupt+0x30>)
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	6013      	str	r3, [r2, #0]
	//panding
	EXTI_PR |= (0<<0);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <init_intrrupt+0x34>)
 8000206:	4a05      	ldr	r2, [pc, #20]	; (800021c <init_intrrupt+0x34>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	6013      	str	r3, [r2, #0]
}
 800020c:	bf00      	nop
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	40010400 	.word	0x40010400
 8000218:	40010408 	.word	0x40010408
 800021c:	40010414 	.word	0x40010414

08000220 <NVIC>:
void NVIC (void){
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
	//NVIC
	NVIC_ISER0 |= (1<<6);
 8000224:	4b04      	ldr	r3, [pc, #16]	; (8000238 <NVIC+0x18>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a03      	ldr	r2, [pc, #12]	; (8000238 <NVIC+0x18>)
 800022a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800022e:	6013      	str	r3, [r2, #0]
}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	e000e100 	.word	0xe000e100

0800023c <Toggel>:
void Toggel(unsigned char Pin){
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
	GPIOA_ODR ^= 1<<Pin ;
 8000246:	4b07      	ldr	r3, [pc, #28]	; (8000264 <Toggel+0x28>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	79fa      	ldrb	r2, [r7, #7]
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f202 	lsl.w	r2, r1, r2
 8000252:	4611      	mov	r1, r2
 8000254:	4a03      	ldr	r2, [pc, #12]	; (8000264 <Toggel+0x28>)
 8000256:	404b      	eors	r3, r1
 8000258:	6013      	str	r3, [r2, #0]
}
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr
 8000264:	4001080c 	.word	0x4001080c

08000268 <main>:
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	clock();
 800026c:	f7ff ff8c 	bl	8000188 <clock>
	init_GPIO();
 8000270:	f7ff ff9e 	bl	80001b0 <init_GPIO>
	init_AFIO();
 8000274:	f7ff ff7c 	bl	8000170 <init_AFIO>
	init_intrrupt();
 8000278:	f7ff ffb6 	bl	80001e8 <init_intrrupt>
	NVIC();
 800027c:	f7ff ffd0 	bl	8000220 <NVIC>
    while(1);
 8000280:	e7fe      	b.n	8000280 <main+0x18>
	...

08000284 <EXTI0_IRQHandler>:
       for (int i = 0; i < 5000; i++); // arbitrary delay
       GPIOA_ODR &= ~(1<<13) ;
       for (int i = 0; i < 5000; i++); // arbitrary delay
    }*/
}
void EXTI0_IRQHandler (void){
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	Toggel(13);
 8000288:	200d      	movs	r0, #13
 800028a:	f7ff ffd7 	bl	800023c <Toggel>
	EXTI_PR |= (1<<0);
 800028e:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <EXTI0_IRQHandler+0x1c>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4a03      	ldr	r2, [pc, #12]	; (80002a0 <EXTI0_IRQHandler+0x1c>)
 8000294:	f043 0301 	orr.w	r3, r3, #1
 8000298:	6013      	str	r3, [r2, #0]
}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40010414 	.word	0x40010414

080002a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a4:	480d      	ldr	r0, [pc, #52]	; (80002dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002ac:	480c      	ldr	r0, [pc, #48]	; (80002e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ae:	490d      	ldr	r1, [pc, #52]	; (80002e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b0:	4a0d      	ldr	r2, [pc, #52]	; (80002e8 <LoopForever+0xe>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b4:	e002      	b.n	80002bc <LoopCopyDataInit>

080002b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ba:	3304      	adds	r3, #4

080002bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c0:	d3f9      	bcc.n	80002b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c2:	4a0a      	ldr	r2, [pc, #40]	; (80002ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c4:	4c0a      	ldr	r4, [pc, #40]	; (80002f0 <LoopForever+0x16>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c8:	e001      	b.n	80002ce <LoopFillZerobss>

080002ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002cc:	3204      	adds	r2, #4

080002ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d0:	d3fb      	bcc.n	80002ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d2:	f000 f811 	bl	80002f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d6:	f7ff ffc7 	bl	8000268 <main>

080002da <LoopForever>:

LoopForever:
    b LoopForever
 80002da:	e7fe      	b.n	80002da <LoopForever>
  ldr   r0, =_estack
 80002dc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e8:	08000360 	.word	0x08000360
  ldr r2, =_sbss
 80002ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f0:	2000001c 	.word	0x2000001c

080002f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f4:	e7fe      	b.n	80002f4 <ADC1_2_IRQHandler>
	...

080002f8 <__libc_init_array>:
 80002f8:	b570      	push	{r4, r5, r6, lr}
 80002fa:	2500      	movs	r5, #0
 80002fc:	4e0c      	ldr	r6, [pc, #48]	; (8000330 <__libc_init_array+0x38>)
 80002fe:	4c0d      	ldr	r4, [pc, #52]	; (8000334 <__libc_init_array+0x3c>)
 8000300:	1ba4      	subs	r4, r4, r6
 8000302:	10a4      	asrs	r4, r4, #2
 8000304:	42a5      	cmp	r5, r4
 8000306:	d109      	bne.n	800031c <__libc_init_array+0x24>
 8000308:	f000 f81a 	bl	8000340 <_init>
 800030c:	2500      	movs	r5, #0
 800030e:	4e0a      	ldr	r6, [pc, #40]	; (8000338 <__libc_init_array+0x40>)
 8000310:	4c0a      	ldr	r4, [pc, #40]	; (800033c <__libc_init_array+0x44>)
 8000312:	1ba4      	subs	r4, r4, r6
 8000314:	10a4      	asrs	r4, r4, #2
 8000316:	42a5      	cmp	r5, r4
 8000318:	d105      	bne.n	8000326 <__libc_init_array+0x2e>
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000320:	4798      	blx	r3
 8000322:	3501      	adds	r5, #1
 8000324:	e7ee      	b.n	8000304 <__libc_init_array+0xc>
 8000326:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800032a:	4798      	blx	r3
 800032c:	3501      	adds	r5, #1
 800032e:	e7f2      	b.n	8000316 <__libc_init_array+0x1e>
 8000330:	08000358 	.word	0x08000358
 8000334:	08000358 	.word	0x08000358
 8000338:	08000358 	.word	0x08000358
 800033c:	0800035c 	.word	0x0800035c

08000340 <_init>:
 8000340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000342:	bf00      	nop
 8000344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000346:	bc08      	pop	{r3}
 8000348:	469e      	mov	lr, r3
 800034a:	4770      	bx	lr

0800034c <_fini>:
 800034c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034e:	bf00      	nop
 8000350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000352:	bc08      	pop	{r3}
 8000354:	469e      	mov	lr, r3
 8000356:	4770      	bx	lr
