
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000538  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000668  08000670  00010670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000668  08000668  00010670  2**0
                  CONTENTS
  4 .ARM          00000000  08000668  08000668  00010670  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000668  08000670  00010670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000668  08000668  00010668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800066c  0800066c  0001066c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000000  08000670  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08000670  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010670  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004741  00000000  00000000  00010699  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000aa8  00000000  00000000  00014dda  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000e5c  00000000  00000000  00015882  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000230  00000000  00000000  000166e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d8  00000000  00000000  00016910  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000191f  00000000  00000000  00016ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000261a  00000000  00000000  00018407  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000d948  00000000  00000000  0001aa21  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00028369  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000750  00000000  00000000  000283e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000650 	.word	0x08000650

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000650 	.word	0x08000650

08000170 <main>:
#include "Keypad.h"



int main(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0


	while(1){
 8000174:	e7fe      	b.n	8000174 <main+0x4>
	...

08000178 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000178:	480d      	ldr	r0, [pc, #52]	; (80001b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800017a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800017c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000180:	480c      	ldr	r0, [pc, #48]	; (80001b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000182:	490d      	ldr	r1, [pc, #52]	; (80001b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000184:	4a0d      	ldr	r2, [pc, #52]	; (80001bc <LoopForever+0xe>)
  movs r3, #0
 8000186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000188:	e002      	b.n	8000190 <LoopCopyDataInit>

0800018a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800018a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800018c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800018e:	3304      	adds	r3, #4

08000190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000194:	d3f9      	bcc.n	800018a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000196:	4a0a      	ldr	r2, [pc, #40]	; (80001c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000198:	4c0a      	ldr	r4, [pc, #40]	; (80001c4 <LoopForever+0x16>)
  movs r3, #0
 800019a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800019c:	e001      	b.n	80001a2 <LoopFillZerobss>

0800019e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800019e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001a0:	3204      	adds	r2, #4

080001a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001a4:	d3fb      	bcc.n	800019e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001a6:	f000 fa2f 	bl	8000608 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001aa:	f7ff ffe1 	bl	8000170 <main>

080001ae <LoopForever>:

LoopForever:
    b LoopForever
 80001ae:	e7fe      	b.n	80001ae <LoopForever>
  ldr   r0, =_estack
 80001b0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80001b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80001bc:	08000670 	.word	0x08000670
  ldr r2, =_sbss
 80001c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80001c4:	20000098 	.word	0x20000098

080001c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001c8:	e7fe      	b.n	80001c8 <ADC1_2_IRQHandler>
	...

080001cc <EXTI0_IRQHandler>:

	Updata(P_EXTI_Confige);
}
//=========================================ISR==============================================
void EXTI0_IRQHandler(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
	//write 1 to clear pending bit,to stop sending interrupt again
	EXTI->PR = 1<<0;
 80001d0:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <EXTI0_IRQHandler+0x14>)
 80001d2:	2201      	movs	r2, #1
 80001d4:	615a      	str	r2, [r3, #20]
	//callback
	Gp_call_back_func[0]();
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <EXTI0_IRQHandler+0x18>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4798      	blx	r3
}
 80001dc:	bf00      	nop
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	40010400 	.word	0x40010400
 80001e4:	20000024 	.word	0x20000024

080001e8 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<1;
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI1_IRQHandler+0x14>)
 80001ee:	2202      	movs	r2, #2
 80001f0:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[1]();
 80001f2:	4b03      	ldr	r3, [pc, #12]	; (8000200 <EXTI1_IRQHandler+0x18>)
 80001f4:	685b      	ldr	r3, [r3, #4]
 80001f6:	4798      	blx	r3
}
 80001f8:	bf00      	nop
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	40010400 	.word	0x40010400
 8000200:	20000024 	.word	0x20000024

08000204 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<2;
 8000208:	4b03      	ldr	r3, [pc, #12]	; (8000218 <EXTI2_IRQHandler+0x14>)
 800020a:	2204      	movs	r2, #4
 800020c:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[2]();
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <EXTI2_IRQHandler+0x18>)
 8000210:	689b      	ldr	r3, [r3, #8]
 8000212:	4798      	blx	r3
}
 8000214:	bf00      	nop
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40010400 	.word	0x40010400
 800021c:	20000024 	.word	0x20000024

08000220 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<3;
 8000224:	4b03      	ldr	r3, [pc, #12]	; (8000234 <EXTI3_IRQHandler+0x14>)
 8000226:	2208      	movs	r2, #8
 8000228:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[3]();
 800022a:	4b03      	ldr	r3, [pc, #12]	; (8000238 <EXTI3_IRQHandler+0x18>)
 800022c:	68db      	ldr	r3, [r3, #12]
 800022e:	4798      	blx	r3
}
 8000230:	bf00      	nop
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40010400 	.word	0x40010400
 8000238:	20000024 	.word	0x20000024

0800023c <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<4;
 8000240:	4b03      	ldr	r3, [pc, #12]	; (8000250 <EXTI4_IRQHandler+0x14>)
 8000242:	2210      	movs	r2, #16
 8000244:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[4]();
 8000246:	4b03      	ldr	r3, [pc, #12]	; (8000254 <EXTI4_IRQHandler+0x18>)
 8000248:	691b      	ldr	r3, [r3, #16]
 800024a:	4798      	blx	r3
}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	40010400 	.word	0x40010400
 8000254:	20000024 	.word	0x20000024

08000258 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
    /* here i check which interrupt is that, cause all interrupts from
	 5---9  arrived on same pin at NVIC
	so we will know which interrupt for ,by checking PR register if its one so its
	and then we write 1 on PR reg to disable interrupt  */
	if(EXTI->PR & 1<<5) { EXTI->PR  = 1<<5;   Gp_call_back_func[5](); }
 800025c:	4b1f      	ldr	r3, [pc, #124]	; (80002dc <EXTI9_5_IRQHandler+0x84>)
 800025e:	695b      	ldr	r3, [r3, #20]
 8000260:	f003 0320 	and.w	r3, r3, #32
 8000264:	2b00      	cmp	r3, #0
 8000266:	d005      	beq.n	8000274 <EXTI9_5_IRQHandler+0x1c>
 8000268:	4b1c      	ldr	r3, [pc, #112]	; (80002dc <EXTI9_5_IRQHandler+0x84>)
 800026a:	2220      	movs	r2, #32
 800026c:	615a      	str	r2, [r3, #20]
 800026e:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <EXTI9_5_IRQHandler+0x88>)
 8000270:	695b      	ldr	r3, [r3, #20]
 8000272:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR  = 1<<6;   Gp_call_back_func[6](); }
 8000274:	4b19      	ldr	r3, [pc, #100]	; (80002dc <EXTI9_5_IRQHandler+0x84>)
 8000276:	695b      	ldr	r3, [r3, #20]
 8000278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800027c:	2b00      	cmp	r3, #0
 800027e:	d005      	beq.n	800028c <EXTI9_5_IRQHandler+0x34>
 8000280:	4b16      	ldr	r3, [pc, #88]	; (80002dc <EXTI9_5_IRQHandler+0x84>)
 8000282:	2240      	movs	r2, #64	; 0x40
 8000284:	615a      	str	r2, [r3, #20]
 8000286:	4b16      	ldr	r3, [pc, #88]	; (80002e0 <EXTI9_5_IRQHandler+0x88>)
 8000288:	699b      	ldr	r3, [r3, #24]
 800028a:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR  = 1<<7;   Gp_call_back_func[7](); }
 800028c:	4b13      	ldr	r3, [pc, #76]	; (80002dc <EXTI9_5_IRQHandler+0x84>)
 800028e:	695b      	ldr	r3, [r3, #20]
 8000290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000294:	2b00      	cmp	r3, #0
 8000296:	d005      	beq.n	80002a4 <EXTI9_5_IRQHandler+0x4c>
 8000298:	4b10      	ldr	r3, [pc, #64]	; (80002dc <EXTI9_5_IRQHandler+0x84>)
 800029a:	2280      	movs	r2, #128	; 0x80
 800029c:	615a      	str	r2, [r3, #20]
 800029e:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <EXTI9_5_IRQHandler+0x88>)
 80002a0:	69db      	ldr	r3, [r3, #28]
 80002a2:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR  = 1<<8;   Gp_call_back_func[8](); }
 80002a4:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <EXTI9_5_IRQHandler+0x84>)
 80002a6:	695b      	ldr	r3, [r3, #20]
 80002a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d006      	beq.n	80002be <EXTI9_5_IRQHandler+0x66>
 80002b0:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <EXTI9_5_IRQHandler+0x84>)
 80002b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002b6:	615a      	str	r2, [r3, #20]
 80002b8:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <EXTI9_5_IRQHandler+0x88>)
 80002ba:	6a1b      	ldr	r3, [r3, #32]
 80002bc:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR  = 1<<9;   Gp_call_back_func[9](); }
 80002be:	4b07      	ldr	r3, [pc, #28]	; (80002dc <EXTI9_5_IRQHandler+0x84>)
 80002c0:	695b      	ldr	r3, [r3, #20]
 80002c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d006      	beq.n	80002d8 <EXTI9_5_IRQHandler+0x80>
 80002ca:	4b04      	ldr	r3, [pc, #16]	; (80002dc <EXTI9_5_IRQHandler+0x84>)
 80002cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002d0:	615a      	str	r2, [r3, #20]
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <EXTI9_5_IRQHandler+0x88>)
 80002d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002d6:	4798      	blx	r3
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40010400 	.word	0x40010400
 80002e0:	20000024 	.word	0x20000024

080002e4 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0

	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10; Gp_call_back_func[10](); }
 80002e8:	4b2d      	ldr	r3, [pc, #180]	; (80003a0 <EXTI15_10_IRQHandler+0xbc>)
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d008      	beq.n	8000306 <EXTI15_10_IRQHandler+0x22>
 80002f4:	4b2a      	ldr	r3, [pc, #168]	; (80003a0 <EXTI15_10_IRQHandler+0xbc>)
 80002f6:	695b      	ldr	r3, [r3, #20]
 80002f8:	4a29      	ldr	r2, [pc, #164]	; (80003a0 <EXTI15_10_IRQHandler+0xbc>)
 80002fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002fe:	6153      	str	r3, [r2, #20]
 8000300:	4b28      	ldr	r3, [pc, #160]	; (80003a4 <EXTI15_10_IRQHandler+0xc0>)
 8000302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000304:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11; Gp_call_back_func[11](); }
 8000306:	4b26      	ldr	r3, [pc, #152]	; (80003a0 <EXTI15_10_IRQHandler+0xbc>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800030e:	2b00      	cmp	r3, #0
 8000310:	d008      	beq.n	8000324 <EXTI15_10_IRQHandler+0x40>
 8000312:	4b23      	ldr	r3, [pc, #140]	; (80003a0 <EXTI15_10_IRQHandler+0xbc>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	4a22      	ldr	r2, [pc, #136]	; (80003a0 <EXTI15_10_IRQHandler+0xbc>)
 8000318:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800031c:	6153      	str	r3, [r2, #20]
 800031e:	4b21      	ldr	r3, [pc, #132]	; (80003a4 <EXTI15_10_IRQHandler+0xc0>)
 8000320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000322:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12; Gp_call_back_func[12](); }
 8000324:	4b1e      	ldr	r3, [pc, #120]	; (80003a0 <EXTI15_10_IRQHandler+0xbc>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800032c:	2b00      	cmp	r3, #0
 800032e:	d008      	beq.n	8000342 <EXTI15_10_IRQHandler+0x5e>
 8000330:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <EXTI15_10_IRQHandler+0xbc>)
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	4a1a      	ldr	r2, [pc, #104]	; (80003a0 <EXTI15_10_IRQHandler+0xbc>)
 8000336:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800033a:	6153      	str	r3, [r2, #20]
 800033c:	4b19      	ldr	r3, [pc, #100]	; (80003a4 <EXTI15_10_IRQHandler+0xc0>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000340:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13; Gp_call_back_func[13](); }
 8000342:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <EXTI15_10_IRQHandler+0xbc>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800034a:	2b00      	cmp	r3, #0
 800034c:	d008      	beq.n	8000360 <EXTI15_10_IRQHandler+0x7c>
 800034e:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <EXTI15_10_IRQHandler+0xbc>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	4a13      	ldr	r2, [pc, #76]	; (80003a0 <EXTI15_10_IRQHandler+0xbc>)
 8000354:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000358:	6153      	str	r3, [r2, #20]
 800035a:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <EXTI15_10_IRQHandler+0xc0>)
 800035c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800035e:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14; Gp_call_back_func[14](); }
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <EXTI15_10_IRQHandler+0xbc>)
 8000362:	695b      	ldr	r3, [r3, #20]
 8000364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000368:	2b00      	cmp	r3, #0
 800036a:	d008      	beq.n	800037e <EXTI15_10_IRQHandler+0x9a>
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <EXTI15_10_IRQHandler+0xbc>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	4a0b      	ldr	r2, [pc, #44]	; (80003a0 <EXTI15_10_IRQHandler+0xbc>)
 8000372:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000376:	6153      	str	r3, [r2, #20]
 8000378:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <EXTI15_10_IRQHandler+0xc0>)
 800037a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800037c:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<15; Gp_call_back_func[15](); }
 800037e:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <EXTI15_10_IRQHandler+0xbc>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000386:	2b00      	cmp	r3, #0
 8000388:	d008      	beq.n	800039c <EXTI15_10_IRQHandler+0xb8>
 800038a:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <EXTI15_10_IRQHandler+0xbc>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a04      	ldr	r2, [pc, #16]	; (80003a0 <EXTI15_10_IRQHandler+0xbc>)
 8000390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000394:	6153      	str	r3, [r2, #20]
 8000396:	4b03      	ldr	r3, [pc, #12]	; (80003a4 <EXTI15_10_IRQHandler+0xc0>)
 8000398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800039a:	4798      	blx	r3
}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	40010400 	.word	0x40010400
 80003a4:	20000024 	.word	0x20000024

080003a8 <Slave_States>:
 * @param [in] 	-State: it is the a flag that determine which ISR should we call it
 * @retval 		-none
 * Note			-none
================================================================**/
void Slave_States(I2C_TypeDef *I2Cx,Slave_State_t State)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	70fb      	strb	r3, [r7, #3]
	uint8_t index = (I2Cx == I2C1) ? I2C1_INDEX : I2C2_INDEX ;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a32      	ldr	r2, [pc, #200]	; (8000480 <Slave_States+0xd8>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	bf14      	ite	ne
 80003bc:	2301      	movne	r3, #1
 80003be:	2300      	moveq	r3, #0
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	73fb      	strb	r3, [r7, #15]

	switch(State)
 80003c4:	78fb      	ldrb	r3, [r7, #3]
 80003c6:	2b04      	cmp	r3, #4
 80003c8:	d856      	bhi.n	8000478 <Slave_States+0xd0>
 80003ca:	a201      	add	r2, pc, #4	; (adr r2, 80003d0 <Slave_States+0x28>)
 80003cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d0:	080003eb 	.word	0x080003eb
 80003d4:	080003e5 	.word	0x080003e5
 80003d8:	0800040f 	.word	0x0800040f
 80003dc:	08000427 	.word	0x08000427
 80003e0:	0800044b 	.word	0x0800044b
	{
	//*******************************************************************************
	case I2C_ERROR_AF:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	699b      	ldr	r3, [r3, #24]
		{
			//Slave shouldn't send anything else
		}
		break;
 80003e8:	e046      	b.n	8000478 <Slave_States+0xd0>
	//*******************************************************************************

	//*******************************************************************************
	case I2C_EV_STOP:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	f003 0304 	and.w	r3, r3, #4
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d03b      	beq.n	800046e <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is Sent by the master
			Gl_AI2C_CFG[index].PF_Slave_Event_CallBack(I2C_EV_STOP);
 80003f6:	7bfa      	ldrb	r2, [r7, #15]
 80003f8:	4922      	ldr	r1, [pc, #136]	; (8000484 <Slave_States+0xdc>)
 80003fa:	4613      	mov	r3, r2
 80003fc:	00db      	lsls	r3, r3, #3
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	009b      	lsls	r3, r3, #2
 8000402:	440b      	add	r3, r1
 8000404:	3318      	adds	r3, #24
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	2000      	movs	r0, #0
 800040a:	4798      	blx	r3
		}
		break;
 800040c:	e02f      	b.n	800046e <Slave_States+0xc6>
	//*******************************************************************************

	//*******************************************************************************
	case I2C_EV_ADDR_Matched:
		//Notify APP that The address is matched with The slave address
		Gl_AI2C_CFG[index].PF_Slave_Event_CallBack(I2C_EV_ADDR_Matched);
 800040e:	7bfa      	ldrb	r2, [r7, #15]
 8000410:	491c      	ldr	r1, [pc, #112]	; (8000484 <Slave_States+0xdc>)
 8000412:	4613      	mov	r3, r2
 8000414:	00db      	lsls	r3, r3, #3
 8000416:	1a9b      	subs	r3, r3, r2
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	440b      	add	r3, r1
 800041c:	3318      	adds	r3, #24
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2002      	movs	r0, #2
 8000422:	4798      	blx	r3
		break;
 8000424:	e028      	b.n	8000478 <Slave_States+0xd0>
	//*******************************************************************************

	//*******************************************************************************
	case I2C_EV_DATA_REQ:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	f003 0304 	and.w	r3, r3, #4
 800042e:	2b00      	cmp	r3, #0
 8000430:	d01f      	beq.n	8000472 <Slave_States+0xca>
		{
			//The APP Layer should send the data (MCAL_I2C_Slave_Tx)in this state
			Gl_AI2C_CFG[index].PF_Slave_Event_CallBack(I2C_EV_DATA_REQ);
 8000432:	7bfa      	ldrb	r2, [r7, #15]
 8000434:	4913      	ldr	r1, [pc, #76]	; (8000484 <Slave_States+0xdc>)
 8000436:	4613      	mov	r3, r2
 8000438:	00db      	lsls	r3, r3, #3
 800043a:	1a9b      	subs	r3, r3, r2
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	440b      	add	r3, r1
 8000440:	3318      	adds	r3, #24
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2003      	movs	r0, #3
 8000446:	4798      	blx	r3
		}
		break;
 8000448:	e013      	b.n	8000472 <Slave_States+0xca>
	//*******************************************************************************

	//*******************************************************************************
	case I2C_EV_DATA_RCV:
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & (I2C_SR2_TRA)) )
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	f003 0304 	and.w	r3, r3, #4
 8000452:	2b00      	cmp	r3, #0
 8000454:	d10f      	bne.n	8000476 <Slave_States+0xce>
		{
			//The APP Layer should read the data (MCAL_I2C_Slave_Rx)in this state
			Gl_AI2C_CFG[index].PF_Slave_Event_CallBack(I2C_EV_DATA_RCV);
 8000456:	7bfa      	ldrb	r2, [r7, #15]
 8000458:	490a      	ldr	r1, [pc, #40]	; (8000484 <Slave_States+0xdc>)
 800045a:	4613      	mov	r3, r2
 800045c:	00db      	lsls	r3, r3, #3
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	440b      	add	r3, r1
 8000464:	3318      	adds	r3, #24
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2004      	movs	r0, #4
 800046a:	4798      	blx	r3
		}
		break;
 800046c:	e003      	b.n	8000476 <Slave_States+0xce>
		break;
 800046e:	bf00      	nop
 8000470:	e002      	b.n	8000478 <Slave_States+0xd0>
		break;
 8000472:	bf00      	nop
 8000474:	e000      	b.n	8000478 <Slave_States+0xd0>
		break;
 8000476:	bf00      	nop
	//*******************************************************************************
	}
}
 8000478:	bf00      	nop
 800047a:	3710      	adds	r7, #16
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40005400 	.word	0x40005400
 8000484:	20000060 	.word	0x20000060

08000488 <I2C1_EV_IRQHandler>:
{
	return (uint8_t)(I2Cx->DR);
}

void I2C1_EV_IRQHandler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af00      	add	r7, sp, #0
	volatile uint32_t dummy_Read = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	607b      	str	r3, [r7, #4]
	I2C_TypeDef *I2Cx = I2C1;
 8000492:	4b35      	ldr	r3, [pc, #212]	; (8000568 <I2C1_EV_IRQHandler+0xe0>)
 8000494:	617b      	str	r3, [r7, #20]

	//interrupt handling for Master & Slave mode of a device
	uint32_t temp1, temp2, temp3;

	//*******************************************************************************
	temp1 = ( (I2Cx->CR2) & (I2C_CR2_ITEVTEN) );
 8000496:	697b      	ldr	r3, [r7, #20]
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800049e:	613b      	str	r3, [r7, #16]
	temp2 = ( (I2Cx->CR2) & (I2C_CR2_ITBUFEN) );
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004a8:	60fb      	str	r3, [r7, #12]
	//*******************************************************************************

	//*******************************************************************************
	temp3 = ( (I2Cx->SR1) & (I2C_SR1_STOPF) );
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	f003 0310 	and.w	r3, r3, #16
 80004b2:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by STOPF event
	//Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 80004b4:	693b      	ldr	r3, [r7, #16]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d00c      	beq.n	80004d4 <I2C1_EV_IRQHandler+0x4c>
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d009      	beq.n	80004d4 <I2C1_EV_IRQHandler+0x4c>
	{
		// STOP Flag is Set
		// Clear the STOPF by reading SR1 register followed by writing to CR1 register
		dummy_Read = I2Cx->SR1;
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	607b      	str	r3, [r7, #4]
		I2Cx->CR1 = 0x0000;
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 80004cc:	2100      	movs	r1, #0
 80004ce:	6978      	ldr	r0, [r7, #20]
 80004d0:	f7ff ff6a 	bl	80003a8 <Slave_States>
	}
	//*******************************************************************************

	//*******************************************************************************
	temp3 = I2Cx->SR1 & (I2C_SR1_ADDR);
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	695b      	ldr	r3, [r3, #20]
 80004d8:	f003 0302 	and.w	r3, r3, #2
 80004dc:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by ADDR event
	//Note :When master mode : Address is sent
	//		When slave mode  : Address is matched with own address
	if(temp1 && temp3)
 80004de:	693b      	ldr	r3, [r7, #16]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d012      	beq.n	800050a <I2C1_EV_IRQHandler+0x82>
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d00f      	beq.n	800050a <I2C1_EV_IRQHandler+0x82>
	{
		// Interrupt is generated because of ADDR event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d109      	bne.n	800050a <I2C1_EV_IRQHandler+0x82>
		}
		else
		{
			//Slave mode
			//Clear the ADDR flag (Read SR1 , Read SR2)
			dummy_Read = I2Cx->SR1;
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	607b      	str	r3, [r7, #4]
			dummy_Read = I2Cx->SR2;
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	607b      	str	r3, [r7, #4]
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8000502:	2102      	movs	r1, #2
 8000504:	6978      	ldr	r0, [r7, #20]
 8000506:	f7ff ff4f 	bl	80003a8 <Slave_States>
		}
	}
	//*******************************************************************************

	//*******************************************************************************
	temp3 = I2Cx->SR1 & (I2C_SR1_TXE);
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000512:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by TXE event
	if(temp1 && temp3)
 8000514:	693b      	ldr	r3, [r7, #16]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d00c      	beq.n	8000534 <I2C1_EV_IRQHandler+0xac>
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d009      	beq.n	8000534 <I2C1_EV_IRQHandler+0xac>
	{
		// Interrupt is generated because of TXE event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0301 	and.w	r3, r3, #1
 8000528:	2b00      	cmp	r3, #0
 800052a:	d103      	bne.n	8000534 <I2C1_EV_IRQHandler+0xac>
			//Master mode
		}
		else
		{
			//Slave mode
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 800052c:	2103      	movs	r1, #3
 800052e:	6978      	ldr	r0, [r7, #20]
 8000530:	f7ff ff3a 	bl	80003a8 <Slave_States>
		}
	}
	//*******************************************************************************

	//*******************************************************************************
	temp3 = I2Cx->SR1 & (I2C_SR1_RXNE);
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	695b      	ldr	r3, [r3, #20]
 8000538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800053c:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by RXNE event
	if(temp1 && temp3)
 800053e:	693b      	ldr	r3, [r7, #16]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d00c      	beq.n	800055e <I2C1_EV_IRQHandler+0xd6>
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d009      	beq.n	800055e <I2C1_EV_IRQHandler+0xd6>
	{
		// Interrupt is generated because of RXNE event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	2b00      	cmp	r3, #0
 8000554:	d103      	bne.n	800055e <I2C1_EV_IRQHandler+0xd6>
			//Master mode
		}
		else
		{
			//Slave mode
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8000556:	2104      	movs	r1, #4
 8000558:	6978      	ldr	r0, [r7, #20]
 800055a:	f7ff ff25 	bl	80003a8 <Slave_States>
		}
	}
	//*******************************************************************************
}
 800055e:	bf00      	nop
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40005400 	.word	0x40005400

0800056c <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0

}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr

08000578 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0

}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0

}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <SPI1_IRQHandler>:
	*DATA=SPIx->SPI_DR;
}


/* SPI1 global interrupt                          */
void SPI1_IRQHandler (void){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	/*struct S_IRQ_Source irq_src;
	irq_src.TXE = ((SPI1->SR >> 1) & 1);
	irq_src.RXNE = ((SPI1->SR >> 2) & 1);
	irq_src.ERRI = ((SPI1->SR >> 5) & 1);*/
	SPI_confige->SPI_IRQ_FUNCTION();
 8000594:	4b02      	ldr	r3, [pc, #8]	; (80005a0 <SPI1_IRQHandler+0x10>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	4798      	blx	r3

}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	2000001c 	.word	0x2000001c

080005a4 <SPI2_IRQHandler>:
/* SPI2 global interrupt                          */
void SPI2_IRQHandler (void){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	/*struct S_IRQ_Source irq_src;
	irq_src.TXE = ((SPI1->SR >> 1) & 1);
	irq_src.RXNE = ((SPI1->SR >> 2) & 1);
	irq_src.ERRI = ((SPI1->SR >> 5) & 1);*/
	SPI_confige->SPI_IRQ_FUNCTION();
 80005a8:	4b02      	ldr	r3, [pc, #8]	; (80005b4 <SPI2_IRQHandler+0x10>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	4798      	blx	r3

}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	2000001c 	.word	0x2000001c

080005b8 <SPI3_IRQHandler>:
/* SPI3 global interrupt                          */
void SPI3_IRQHandler(void){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	/*struct S_IRQ_Source irq_src;
	irq_src.TXE = ((SPI1->SR >> 1) & 1);
	irq_src.RXNE = ((SPI1->SR >> 2) & 1);
	irq_src.ERRI = ((SPI1->SR >> 5) & 1);*/
	SPI_confige->SPI_IRQ_FUNCTION();
 80005bc:	4b02      	ldr	r3, [pc, #8]	; (80005c8 <SPI3_IRQHandler+0x10>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	4798      	blx	r3

}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	2000001c 	.word	0x2000001c

080005cc <USART1_IRQHandler>:
}



/* USART1 global interrupt                          */
void USART1_IRQHandler (void){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	USART_confige->IRQ_FUNCTION();
 80005d0:	4b02      	ldr	r3, [pc, #8]	; (80005dc <USART1_IRQHandler+0x10>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	691b      	ldr	r3, [r3, #16]
 80005d6:	4798      	blx	r3

}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000020 	.word	0x20000020

080005e0 <USART2_IRQHandler>:
/* USART2 global interrupt                          */
void USART2_IRQHandler (void){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	USART_confige->IRQ_FUNCTION();
 80005e4:	4b02      	ldr	r3, [pc, #8]	; (80005f0 <USART2_IRQHandler+0x10>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	691b      	ldr	r3, [r3, #16]
 80005ea:	4798      	blx	r3

}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000020 	.word	0x20000020

080005f4 <USART3_IRQHandler>:
/* USART3 global interrupt                          */
void USART3_IRQHandler(void){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	USART_confige->IRQ_FUNCTION();
 80005f8:	4b02      	ldr	r3, [pc, #8]	; (8000604 <USART3_IRQHandler+0x10>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	691b      	ldr	r3, [r3, #16]
 80005fe:	4798      	blx	r3

}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000020 	.word	0x20000020

08000608 <__libc_init_array>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	2500      	movs	r5, #0
 800060c:	4e0c      	ldr	r6, [pc, #48]	; (8000640 <__libc_init_array+0x38>)
 800060e:	4c0d      	ldr	r4, [pc, #52]	; (8000644 <__libc_init_array+0x3c>)
 8000610:	1ba4      	subs	r4, r4, r6
 8000612:	10a4      	asrs	r4, r4, #2
 8000614:	42a5      	cmp	r5, r4
 8000616:	d109      	bne.n	800062c <__libc_init_array+0x24>
 8000618:	f000 f81a 	bl	8000650 <_init>
 800061c:	2500      	movs	r5, #0
 800061e:	4e0a      	ldr	r6, [pc, #40]	; (8000648 <__libc_init_array+0x40>)
 8000620:	4c0a      	ldr	r4, [pc, #40]	; (800064c <__libc_init_array+0x44>)
 8000622:	1ba4      	subs	r4, r4, r6
 8000624:	10a4      	asrs	r4, r4, #2
 8000626:	42a5      	cmp	r5, r4
 8000628:	d105      	bne.n	8000636 <__libc_init_array+0x2e>
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000630:	4798      	blx	r3
 8000632:	3501      	adds	r5, #1
 8000634:	e7ee      	b.n	8000614 <__libc_init_array+0xc>
 8000636:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800063a:	4798      	blx	r3
 800063c:	3501      	adds	r5, #1
 800063e:	e7f2      	b.n	8000626 <__libc_init_array+0x1e>
 8000640:	08000668 	.word	0x08000668
 8000644:	08000668 	.word	0x08000668
 8000648:	08000668 	.word	0x08000668
 800064c:	0800066c 	.word	0x0800066c

08000650 <_init>:
 8000650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000652:	bf00      	nop
 8000654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000656:	bc08      	pop	{r3}
 8000658:	469e      	mov	lr, r3
 800065a:	4770      	bx	lr

0800065c <_fini>:
 800065c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800065e:	bf00      	nop
 8000660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000662:	bc08      	pop	{r3}
 8000664:	469e      	mov	lr, r3
 8000666:	4770      	bx	lr
