
Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bd0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000d00  08000d00  00010d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d0c  08000d0c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000d0c  08000d0c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d0c  08000d0c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d0c  08000d0c  00010d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d10  08000d10  00010d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000d14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000004  08000d18  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08000d18  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000047ab  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000ade  00000000  00000000  000247d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000ddc  00000000  00000000  000252b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000230  00000000  00000000  00026098  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d8  00000000  00000000  000262c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002614  00000000  00000000  000264a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000026b0  00000000  00000000  00028ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0001238e  00000000  00000000  0002b164  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003d4f2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000073c  00000000  00000000  0003d570  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ce8 	.word	0x08000ce8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000ce8 	.word	0x08000ce8

08000170 <TaskA_Fun>:
		AND R0, R0, R1 \n\t MSR CONTROL, R0")

#define OS_Generate_Exception_Inerrupt					__asm("SVC #0x3")

void TaskA_Fun(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	/* Turn on Led on PortB Pin0 & Turn off Led on PortB Pin1 */
		GPIOx_WRITE_PIN(GPIOB, GPIO_PIN_0,GPIO_PIN_SET );
 8000174:	2201      	movs	r2, #1
 8000176:	2101      	movs	r1, #1
 8000178:	4804      	ldr	r0, [pc, #16]	; (800018c <TaskA_Fun+0x1c>)
 800017a:	f000 fd3d 	bl	8000bf8 <GPIOx_WRITE_PIN>
		GPIOx_WRITE_PIN(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET );
 800017e:	2200      	movs	r2, #0
 8000180:	2101      	movs	r1, #1
 8000182:	4802      	ldr	r0, [pc, #8]	; (800018c <TaskA_Fun+0x1c>)
 8000184:	f000 fd38 	bl	8000bf8 <GPIOx_WRITE_PIN>
}
 8000188:	bf00      	nop
 800018a:	bd80      	pop	{r7, pc}
 800018c:	40010c00 	.word	0x40010c00

08000190 <TaskB_Fun>:

void TaskB_Fun(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
	/* Turn on Led on PortB Pin1 & Turn off Led on PortB Pin0 */
		GPIOx_WRITE_PIN(GPIOB, GPIO_PIN_1,GPIO_PIN_SET );
 8000194:	2201      	movs	r2, #1
 8000196:	2102      	movs	r1, #2
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <TaskB_Fun+0x1c>)
 800019a:	f000 fd2d 	bl	8000bf8 <GPIOx_WRITE_PIN>
		GPIOx_WRITE_PIN(GPIOB, GPIO_PIN_1,GPIO_PIN_RESET );
 800019e:	2200      	movs	r2, #0
 80001a0:	2102      	movs	r1, #2
 80001a2:	4802      	ldr	r0, [pc, #8]	; (80001ac <TaskB_Fun+0x1c>)
 80001a4:	f000 fd28 	bl	8000bf8 <GPIOx_WRITE_PIN>
}
 80001a8:	bf00      	nop
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	40010c00 	.word	0x40010c00

080001b0 <OS_SVC_Services>:

void OS_SVC_Services(unsigned int *Stack_Pointer)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b085      	sub	sp, #20
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
	unsigned char SVC_ID;
	SVC_ID = *((unsigned char *)(((unsigned char *)Stack_Pointer[6])-2));
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	3318      	adds	r3, #24
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	3b02      	subs	r3, #2
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	73fb      	strb	r3, [r7, #15]

	switch(SVC_ID)
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	2b01      	cmp	r3, #1
 80001c8:	d002      	beq.n	80001d0 <OS_SVC_Services+0x20>
 80001ca:	2b02      	cmp	r3, #2
 80001cc:	d016      	beq.n	80001fc <OS_SVC_Services+0x4c>
		OS_Set_PSP_Val(_S_PSP_TaskB);
		OS_Set_SP_shadowto_PSP;
		OS_Switch_Privileged_to_Unprivileged;
		break;
	}
}
 80001ce:	e02b      	b.n	8000228 <OS_SVC_Services+0x78>
		OS_Set_PSP_Val(_S_PSP_TaskA);
 80001d0:	4b18      	ldr	r3, [pc, #96]	; (8000234 <OS_SVC_Services+0x84>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4618      	mov	r0, r3
 80001d6:	f380 8809 	msr	PSP, r0
		OS_Set_SP_shadowto_PSP;
 80001da:	f3ef 8014 	mrs	r0, CONTROL
 80001de:	f04f 0102 	mov.w	r1, #2
 80001e2:	ea40 0001 	orr.w	r0, r0, r1
 80001e6:	f380 8814 	msr	CONTROL, r0
		OS_Switch_Privileged_to_Unprivileged;
 80001ea:	f3ef 8014 	mrs	r0, CONTROL
 80001ee:	f04f 0101 	mov.w	r1, #1
 80001f2:	ea40 0001 	orr.w	r0, r0, r1
 80001f6:	f380 8814 	msr	CONTROL, r0
		break;
 80001fa:	e015      	b.n	8000228 <OS_SVC_Services+0x78>
		OS_Set_PSP_Val(_S_PSP_TaskB);
 80001fc:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <OS_SVC_Services+0x88>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4618      	mov	r0, r3
 8000202:	f380 8809 	msr	PSP, r0
		OS_Set_SP_shadowto_PSP;
 8000206:	f3ef 8014 	mrs	r0, CONTROL
 800020a:	f04f 0102 	mov.w	r1, #2
 800020e:	ea40 0001 	orr.w	r0, r0, r1
 8000212:	f380 8814 	msr	CONTROL, r0
		OS_Switch_Privileged_to_Unprivileged;
 8000216:	f3ef 8014 	mrs	r0, CONTROL
 800021a:	f04f 0101 	mov.w	r1, #1
 800021e:	ea40 0001 	orr.w	r0, r0, r1
 8000222:	f380 8814 	msr	CONTROL, r0
		break;
 8000226:	bf00      	nop
}
 8000228:	bf00      	nop
 800022a:	3714      	adds	r7, #20
 800022c:	46bd      	mov	sp, r7
 800022e:	bc80      	pop	{r7}
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	20000034 	.word	0x20000034
 8000238:	2000003c 	.word	0x2000003c

0800023c <OS_SVC_Set_First_Task>:

void OS_SVC_Set_First_Task(int SVC_ID)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	switch(SVC_ID)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2b01      	cmp	r3, #1
 8000248:	d002      	beq.n	8000250 <OS_SVC_Set_First_Task+0x14>
 800024a:	2b02      	cmp	r3, #2
 800024c:	d002      	beq.n	8000254 <OS_SVC_Set_First_Task+0x18>

	case 2:	//TaskB
		__asm("SVC #2");
		break;
	}
}
 800024e:	e003      	b.n	8000258 <OS_SVC_Set_First_Task+0x1c>
		__asm("SVC #1");
 8000250:	df01      	svc	1
		break;
 8000252:	e001      	b.n	8000258 <OS_SVC_Set_First_Task+0x1c>
		__asm("SVC #2");
 8000254:	df02      	svc	2
		break;
 8000256:	bf00      	nop
}
 8000258:	bf00      	nop
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr

08000262 <SVC_Handler>:

__attribute((naked)) void SVC_Handler(void)
{
	// Check which stack we use before stacking MSP or PSP
	__asm("TST LR, #0x4 \n\t"
 8000262:	f01e 0f04 	tst.w	lr, #4
 8000266:	bf0c      	ite	eq
 8000268:	f3ef 8008 	mrseq	r0, MSP
 800026c:	f3ef 8009 	mrsne	r0, PSP
 8000270:	f7ff bf9e 	b.w	80001b0 <OS_SVC_Services>
			"ITE EQ \n\t"
			"MRSEQ R0, MSP \n\t"
			"MRSNE R0, PSP \n\t"
			"B OS_SVC_Services");
}
 8000274:	bf00      	nop
	...

08000278 <PendSV_Handler>:

void PendSV_Handler(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
	if(Task_Flag == TaskA)		//switch to TaskA
 800027c:	4b13      	ldr	r3, [pc, #76]	; (80002cc <PendSV_Handler+0x54>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	2b01      	cmp	r3, #1
 8000282:	d10d      	bne.n	80002a0 <PendSV_Handler+0x28>
	{
		OS_Set_PSP_Val(_S_PSP_TaskA);
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <PendSV_Handler+0x58>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4618      	mov	r0, r3
 800028a:	f380 8809 	msr	PSP, r0
		OS_Set_SP_shadowto_PSP;
 800028e:	f3ef 8014 	mrs	r0, CONTROL
 8000292:	f04f 0102 	mov.w	r1, #2
 8000296:	ea40 0001 	orr.w	r0, r0, r1
 800029a:	f380 8814 	msr	CONTROL, r0
	}
	else
	{

	}
}
 800029e:	e010      	b.n	80002c2 <PendSV_Handler+0x4a>
	else if(Task_Flag == TaskB)	//switch to TaskB
 80002a0:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <PendSV_Handler+0x54>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b02      	cmp	r3, #2
 80002a6:	d10c      	bne.n	80002c2 <PendSV_Handler+0x4a>
		OS_Set_PSP_Val(_S_PSP_TaskB);
 80002a8:	4b0a      	ldr	r3, [pc, #40]	; (80002d4 <PendSV_Handler+0x5c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4618      	mov	r0, r3
 80002ae:	f380 8809 	msr	PSP, r0
		OS_Set_SP_shadowto_PSP;
 80002b2:	f3ef 8014 	mrs	r0, CONTROL
 80002b6:	f04f 0102 	mov.w	r1, #2
 80002ba:	ea40 0001 	orr.w	r0, r0, r1
 80002be:	f380 8814 	msr	CONTROL, r0
}
 80002c2:	bf00      	nop
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	20000021 	.word	0x20000021
 80002d0:	20000034 	.word	0x20000034
 80002d4:	2000003c 	.word	0x2000003c

080002d8 <Main_OS>:

void Main_OS(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	/* OS Stack */
	_E_MSP = (_S_MSP - OS_Stack_Size);
 80002dc:	4b16      	ldr	r3, [pc, #88]	; (8000338 <Main_OS+0x60>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80002e4:	4a15      	ldr	r2, [pc, #84]	; (800033c <Main_OS+0x64>)
 80002e6:	6013      	str	r3, [r2, #0]

	/* TaskA Stack */
	_S_PSP_TaskA = (_E_MSP - 8);
 80002e8:	4b14      	ldr	r3, [pc, #80]	; (800033c <Main_OS+0x64>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	3b08      	subs	r3, #8
 80002ee:	4a14      	ldr	r2, [pc, #80]	; (8000340 <Main_OS+0x68>)
 80002f0:	6013      	str	r3, [r2, #0]
	_E_PSP_TaskA = (_S_PSP_TaskA - TaskA_Stack_Size);
 80002f2:	4b13      	ldr	r3, [pc, #76]	; (8000340 <Main_OS+0x68>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	3b64      	subs	r3, #100	; 0x64
 80002f8:	4a12      	ldr	r2, [pc, #72]	; (8000344 <Main_OS+0x6c>)
 80002fa:	6013      	str	r3, [r2, #0]

	/* TaskB Stack */
	_S_PSP_TaskB = (_E_PSP_TaskA - 8);
 80002fc:	4b11      	ldr	r3, [pc, #68]	; (8000344 <Main_OS+0x6c>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	3b08      	subs	r3, #8
 8000302:	4a11      	ldr	r2, [pc, #68]	; (8000348 <Main_OS+0x70>)
 8000304:	6013      	str	r3, [r2, #0]
	_E_PSP_TaskB = (_S_PSP_TaskB - TaskB_Stack_Size);
 8000306:	4b10      	ldr	r3, [pc, #64]	; (8000348 <Main_OS+0x70>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	3b64      	subs	r3, #100	; 0x64
 800030c:	4a0f      	ldr	r2, [pc, #60]	; (800034c <Main_OS+0x74>)
 800030e:	6013      	str	r3, [r2, #0]

	OS_SVC_Set_First_Task(Task_Flag);
 8000310:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <Main_OS+0x78>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	4618      	mov	r0, r3
 8000316:	f7ff ff91 	bl	800023c <OS_SVC_Set_First_Task>

	while(1)
	{
		if(Task_Flag == TaskA)
 800031a:	4b0d      	ldr	r3, [pc, #52]	; (8000350 <Main_OS+0x78>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d102      	bne.n	8000328 <Main_OS+0x50>
		{
			TaskA_Fun();
 8000322:	f7ff ff25 	bl	8000170 <TaskA_Fun>
 8000326:	e7f8      	b.n	800031a <Main_OS+0x42>
		}
		else if(Task_Flag == TaskB)
 8000328:	4b09      	ldr	r3, [pc, #36]	; (8000350 <Main_OS+0x78>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b02      	cmp	r3, #2
 800032e:	d1f4      	bne.n	800031a <Main_OS+0x42>
		{
			TaskB_Fun();
 8000330:	f7ff ff2e 	bl	8000190 <TaskB_Fun>
		if(Task_Flag == TaskA)
 8000334:	e7f1      	b.n	800031a <Main_OS+0x42>
 8000336:	bf00      	nop
 8000338:	20000000 	.word	0x20000000
 800033c:	2000002c 	.word	0x2000002c
 8000340:	20000034 	.word	0x20000034
 8000344:	20000030 	.word	0x20000030
 8000348:	2000003c 	.word	0x2000003c
 800034c:	20000038 	.word	0x20000038
 8000350:	20000021 	.word	0x20000021

08000354 <EXTI9_CallBack>:
	privileged,
	unprivileged
};

void EXTI9_CallBack(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
	/* rise the flag of the task that its own order */
	if(IRQ_Flag == 0)
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <EXTI9_CallBack+0x44>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d106      	bne.n	800036e <EXTI9_CallBack+0x1a>
	{
		Task_Flag = TaskA;
 8000360:	4b0e      	ldr	r3, [pc, #56]	; (800039c <EXTI9_CallBack+0x48>)
 8000362:	2201      	movs	r2, #1
 8000364:	701a      	strb	r2, [r3, #0]
		IRQ_Flag = 1;
 8000366:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <EXTI9_CallBack+0x44>)
 8000368:	2201      	movs	r2, #1
 800036a:	701a      	strb	r2, [r3, #0]
 800036c:	e009      	b.n	8000382 <EXTI9_CallBack+0x2e>
	}
	else if(IRQ_Flag == 1)
 800036e:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <EXTI9_CallBack+0x44>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	2b01      	cmp	r3, #1
 8000374:	d105      	bne.n	8000382 <EXTI9_CallBack+0x2e>
	{
		Task_Flag = TaskB;
 8000376:	4b09      	ldr	r3, [pc, #36]	; (800039c <EXTI9_CallBack+0x48>)
 8000378:	2202      	movs	r2, #2
 800037a:	701a      	strb	r2, [r3, #0]
		IRQ_Flag = 0;
 800037c:	4b06      	ldr	r3, [pc, #24]	; (8000398 <EXTI9_CallBack+0x44>)
 800037e:	2200      	movs	r2, #0
 8000380:	701a      	strb	r2, [r3, #0]
	{

	}

	/* set PendSV */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000382:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <EXTI9_CallBack+0x4c>)
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	4a06      	ldr	r2, [pc, #24]	; (80003a0 <EXTI9_CallBack+0x4c>)
 8000388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800038c:	6053      	str	r3, [r2, #4]
}
 800038e:	bf00      	nop
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	20000020 	.word	0x20000020
 800039c:	20000021 	.word	0x20000021
 80003a0:	e000ed00 	.word	0xe000ed00

080003a4 <main>:

int main(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0
	RCC_AFIO_CLK_EN();
 80003aa:	4b2c      	ldr	r3, [pc, #176]	; (800045c <main+0xb8>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	4a2b      	ldr	r2, [pc, #172]	; (800045c <main+0xb8>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80003b6:	4b29      	ldr	r3, [pc, #164]	; (800045c <main+0xb8>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	4a28      	ldr	r2, [pc, #160]	; (800045c <main+0xb8>)
 80003bc:	f043 0308 	orr.w	r3, r3, #8
 80003c0:	6193      	str	r3, [r2, #24]

	GPIO_Pinconfige_t pin_config ;

	//PA1: (Mode >> Input mode(00)) (CNF >>  Floating input(01))
	pin_config.Pin_Number = GPIO_PIN_1;
 80003c2:	2302      	movs	r3, #2
 80003c4:	82bb      	strh	r3, [r7, #20]
	pin_config.Mode = GPIO_MODE_INPUT_FLO;
 80003c6:	2301      	movs	r3, #1
 80003c8:	75bb      	strb	r3, [r7, #22]
	GPIOx_init(GPIOA, &pin_config);
 80003ca:	f107 0314 	add.w	r3, r7, #20
 80003ce:	4619      	mov	r1, r3
 80003d0:	4823      	ldr	r0, [pc, #140]	; (8000460 <main+0xbc>)
 80003d2:	f000 fb93 	bl	8000afc <GPIOx_init>

	//PA13: (Mode >> Input mode(00)) (CNF >>  Floating input(01))
	pin_config.Pin_Number = GPIO_PIN_13;
 80003d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003da:	82bb      	strh	r3, [r7, #20]
	pin_config.Mode = GPIO_MODE_INPUT_FLO;
 80003dc:	2301      	movs	r3, #1
 80003de:	75bb      	strb	r3, [r7, #22]
	GPIOx_init(GPIOA, &pin_config);
 80003e0:	f107 0314 	add.w	r3, r7, #20
 80003e4:	4619      	mov	r1, r3
 80003e6:	481e      	ldr	r0, [pc, #120]	; (8000460 <main+0xbc>)
 80003e8:	f000 fb88 	bl	8000afc <GPIOx_init>

	//PB1: (Mode >> Output mode, max speed 10 MHz(01)) (CNF >> General purpose output push-pull(00))

	pin_config.Pin_Number = GPIO_PIN_1;
 80003ec:	2302      	movs	r3, #2
 80003ee:	82bb      	strh	r3, [r7, #20]
	pin_config.Mode = GPIO_MODE_OUTPUT_PP;
 80003f0:	2304      	movs	r3, #4
 80003f2:	75bb      	strb	r3, [r7, #22]
	pin_config.Speed = GPIO_MODE_speed_10_MHz;
 80003f4:	2301      	movs	r3, #1
 80003f6:	75fb      	strb	r3, [r7, #23]
	GPIOx_init(GPIOB, &pin_config);
 80003f8:	f107 0314 	add.w	r3, r7, #20
 80003fc:	4619      	mov	r1, r3
 80003fe:	4819      	ldr	r0, [pc, #100]	; (8000464 <main+0xc0>)
 8000400:	f000 fb7c 	bl	8000afc <GPIOx_init>

	//Pin13: (Mode >> Output mode, max speed 10 MHz(01)) (CNF >> General purpose output push-pull(00))
	pin_config.Pin_Number = GPIO_PIN_13;
 8000404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000408:	82bb      	strh	r3, [r7, #20]
	pin_config.Mode = GPIO_MODE_OUTPUT_PP;
 800040a:	2304      	movs	r3, #4
 800040c:	75bb      	strb	r3, [r7, #22]
	pin_config.Speed = GPIO_MODE_speed_10_MHz;
 800040e:	2301      	movs	r3, #1
 8000410:	75fb      	strb	r3, [r7, #23]
	GPIOx_init(GPIOB, &pin_config);
 8000412:	f107 0314 	add.w	r3, r7, #20
 8000416:	4619      	mov	r1, r3
 8000418:	4812      	ldr	r0, [pc, #72]	; (8000464 <main+0xc0>)
 800041a:	f000 fb6f 	bl	8000afc <GPIOx_init>

	EXTI_Configer_t EXTI_CONGIG;
	EXTI_CONGIG.exti_conf = EXTI9PB9;
 800041e:	4a12      	ldr	r2, [pc, #72]	; (8000468 <main+0xc4>)
 8000420:	463b      	mov	r3, r7
 8000422:	ca07      	ldmia	r2, {r0, r1, r2}
 8000424:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CONGIG.trigger_case = EXTI_Trigger_Falling;
 8000428:	2300      	movs	r3, #0
 800042a:	733b      	strb	r3, [r7, #12]
	EXTI_CONGIG.IRQ_EN = EXTI_IRQ_Enable;
 800042c:	2301      	movs	r3, #1
 800042e:	737b      	strb	r3, [r7, #13]
	EXTI_CONGIG.P_IRQ_call_back = EXTI9_CallBack;
 8000430:	4b0e      	ldr	r3, [pc, #56]	; (800046c <main+0xc8>)
 8000432:	613b      	str	r3, [r7, #16]
	MCAL_EXTI_GPIO_INIT(&EXTI_CONGIG);
 8000434:	463b      	mov	r3, r7
 8000436:	4618      	mov	r0, r3
 8000438:	f000 fa04 	bl	8000844 <MCAL_EXTI_GPIO_INIT>
	//SWITCH_CPU_ACCESS_LEVEL(unprivileged);

	IRQ_Flag = 1;
 800043c:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <main+0xcc>)
 800043e:	2201      	movs	r2, #1
 8000440:	701a      	strb	r2, [r3, #0]
	Task_Flag = TaskA;
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <main+0xd0>)
 8000444:	2201      	movs	r2, #1
 8000446:	701a      	strb	r2, [r3, #0]

	Main_OS();
 8000448:	f7ff ff46 	bl	80002d8 <Main_OS>

	/* Loop forever */
	while(1)
	{
		if(IRQ_Flag)
 800044c:	4b08      	ldr	r3, [pc, #32]	; (8000470 <main+0xcc>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d0fb      	beq.n	800044c <main+0xa8>
		{
			IRQ_Flag = 0;
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <main+0xcc>)
 8000456:	2200      	movs	r2, #0
 8000458:	701a      	strb	r2, [r3, #0]
		if(IRQ_Flag)
 800045a:	e7f7      	b.n	800044c <main+0xa8>
 800045c:	40021000 	.word	0x40021000
 8000460:	40010800 	.word	0x40010800
 8000464:	40010c00 	.word	0x40010c00
 8000468:	08000d00 	.word	0x08000d00
 800046c:	08000355 	.word	0x08000355
 8000470:	20000020 	.word	0x20000020
 8000474:	20000021 	.word	0x20000021

08000478 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000478:	480d      	ldr	r0, [pc, #52]	; (80004b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800047a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800047c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000480:	480c      	ldr	r0, [pc, #48]	; (80004b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000482:	490d      	ldr	r1, [pc, #52]	; (80004b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000484:	4a0d      	ldr	r2, [pc, #52]	; (80004bc <LoopForever+0xe>)
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000488:	e002      	b.n	8000490 <LoopCopyDataInit>

0800048a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800048a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800048c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800048e:	3304      	adds	r3, #4

08000490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000494:	d3f9      	bcc.n	800048a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000496:	4a0a      	ldr	r2, [pc, #40]	; (80004c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000498:	4c0a      	ldr	r4, [pc, #40]	; (80004c4 <LoopForever+0x16>)
  movs r3, #0
 800049a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800049c:	e001      	b.n	80004a2 <LoopFillZerobss>

0800049e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800049e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a0:	3204      	adds	r2, #4

080004a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a4:	d3fb      	bcc.n	800049e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004a6:	f000 fbfb 	bl	8000ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004aa:	f7ff ff7b 	bl	80003a4 <main>

080004ae <LoopForever>:

LoopForever:
    b LoopForever
 80004ae:	e7fe      	b.n	80004ae <LoopForever>
  ldr   r0, =_estack
 80004b0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80004b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004bc:	08000d14 	.word	0x08000d14
  ldr r2, =_sbss
 80004c0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004c4:	2000007c 	.word	0x2000007c

080004c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c8:	e7fe      	b.n	80004c8 <ADC1_2_IRQHandler>
	...

080004cc <NVIC_ENABLE>:
 * =======================================================================================
 * 										GENERIC FUNCTIONS
 * =======================================================================================
 */

void NVIC_ENABLE(uint16_t IRQ){
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	2b0f      	cmp	r3, #15
 80004da:	d854      	bhi.n	8000586 <NVIC_ENABLE+0xba>
 80004dc:	a201      	add	r2, pc, #4	; (adr r2, 80004e4 <NVIC_ENABLE+0x18>)
 80004de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e2:	bf00      	nop
 80004e4:	08000525 	.word	0x08000525
 80004e8:	08000533 	.word	0x08000533
 80004ec:	08000541 	.word	0x08000541
 80004f0:	0800054f 	.word	0x0800054f
 80004f4:	0800055d 	.word	0x0800055d
 80004f8:	0800056b 	.word	0x0800056b
 80004fc:	0800056b 	.word	0x0800056b
 8000500:	0800056b 	.word	0x0800056b
 8000504:	0800056b 	.word	0x0800056b
 8000508:	0800056b 	.word	0x0800056b
 800050c:	08000579 	.word	0x08000579
 8000510:	08000579 	.word	0x08000579
 8000514:	08000579 	.word	0x08000579
 8000518:	08000579 	.word	0x08000579
 800051c:	08000579 	.word	0x08000579
 8000520:	08000579 	.word	0x08000579
	case EXTI0:
		NVIC_IRQ6_EXTI0_EN;
 8000524:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <NVIC_ENABLE+0xc4>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a19      	ldr	r2, [pc, #100]	; (8000590 <NVIC_ENABLE+0xc4>)
 800052a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800052e:	6013      	str	r3, [r2, #0]
		break;
 8000530:	e029      	b.n	8000586 <NVIC_ENABLE+0xba>
	case EXTI1:
		NVIC_IRQ7_EXTI1_EN;
 8000532:	4b17      	ldr	r3, [pc, #92]	; (8000590 <NVIC_ENABLE+0xc4>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a16      	ldr	r2, [pc, #88]	; (8000590 <NVIC_ENABLE+0xc4>)
 8000538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800053c:	6013      	str	r3, [r2, #0]
		break;
 800053e:	e022      	b.n	8000586 <NVIC_ENABLE+0xba>
	case EXTI2:
		NVIC_IRQ8_EXTI2_EN;
 8000540:	4b13      	ldr	r3, [pc, #76]	; (8000590 <NVIC_ENABLE+0xc4>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a12      	ldr	r2, [pc, #72]	; (8000590 <NVIC_ENABLE+0xc4>)
 8000546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800054a:	6013      	str	r3, [r2, #0]
		break;
 800054c:	e01b      	b.n	8000586 <NVIC_ENABLE+0xba>
	case EXTI3:
		NVIC_IRQ9_EXTI3_EN ;
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <NVIC_ENABLE+0xc4>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a0f      	ldr	r2, [pc, #60]	; (8000590 <NVIC_ENABLE+0xc4>)
 8000554:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000558:	6013      	str	r3, [r2, #0]
		break;
 800055a:	e014      	b.n	8000586 <NVIC_ENABLE+0xba>
	case EXTI4:
		NVIC_IRQ10_EXTI4_EN ;
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <NVIC_ENABLE+0xc4>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a0b      	ldr	r2, [pc, #44]	; (8000590 <NVIC_ENABLE+0xc4>)
 8000562:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000566:	6013      	str	r3, [r2, #0]
		break;
 8000568:	e00d      	b.n	8000586 <NVIC_ENABLE+0xba>
	case EXTI5:
	case EXTI6:
	case EXTI7:
	case EXTI8:
	case EXTI9:
		NVIC_IRQ23_EXTI5_9_EN ;
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <NVIC_ENABLE+0xc4>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a08      	ldr	r2, [pc, #32]	; (8000590 <NVIC_ENABLE+0xc4>)
 8000570:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000574:	6013      	str	r3, [r2, #0]
		break;
 8000576:	e006      	b.n	8000586 <NVIC_ENABLE+0xba>
	case EXTI11:
	case EXTI12:
	case EXTI13:
	case EXTI14:
	case EXTI15:
		NVIC_IRQ40_EXTI10_15_EN ;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <NVIC_ENABLE+0xc8>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a05      	ldr	r2, [pc, #20]	; (8000594 <NVIC_ENABLE+0xc8>)
 800057e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000582:	6013      	str	r3, [r2, #0]
		break;
 8000584:	bf00      	nop
	}

}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr
 8000590:	e000e100 	.word	0xe000e100
 8000594:	e000e104 	.word	0xe000e104

08000598 <NVIC_DISABLE>:


void NVIC_DISABLE(uint16_t IRQ)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 80005a2:	88fb      	ldrh	r3, [r7, #6]
 80005a4:	2b0f      	cmp	r3, #15
 80005a6:	d854      	bhi.n	8000652 <NVIC_DISABLE+0xba>
 80005a8:	a201      	add	r2, pc, #4	; (adr r2, 80005b0 <NVIC_DISABLE+0x18>)
 80005aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ae:	bf00      	nop
 80005b0:	080005f1 	.word	0x080005f1
 80005b4:	080005ff 	.word	0x080005ff
 80005b8:	0800060d 	.word	0x0800060d
 80005bc:	0800061b 	.word	0x0800061b
 80005c0:	08000629 	.word	0x08000629
 80005c4:	08000637 	.word	0x08000637
 80005c8:	08000637 	.word	0x08000637
 80005cc:	08000637 	.word	0x08000637
 80005d0:	08000637 	.word	0x08000637
 80005d4:	08000637 	.word	0x08000637
 80005d8:	08000645 	.word	0x08000645
 80005dc:	08000645 	.word	0x08000645
 80005e0:	08000645 	.word	0x08000645
 80005e4:	08000645 	.word	0x08000645
 80005e8:	08000645 	.word	0x08000645
 80005ec:	08000645 	.word	0x08000645
	{
	case EXTI0:
		NVIC_IRQ6_EXTI0_Dis ;
 80005f0:	4b1a      	ldr	r3, [pc, #104]	; (800065c <NVIC_DISABLE+0xc4>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a19      	ldr	r2, [pc, #100]	; (800065c <NVIC_DISABLE+0xc4>)
 80005f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005fa:	6013      	str	r3, [r2, #0]
		break;
 80005fc:	e029      	b.n	8000652 <NVIC_DISABLE+0xba>

	case EXTI1:
		NVIC_IRQ7_EXTI1_Dis ;
 80005fe:	4b17      	ldr	r3, [pc, #92]	; (800065c <NVIC_DISABLE+0xc4>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a16      	ldr	r2, [pc, #88]	; (800065c <NVIC_DISABLE+0xc4>)
 8000604:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000608:	6013      	str	r3, [r2, #0]
		break;
 800060a:	e022      	b.n	8000652 <NVIC_DISABLE+0xba>

	case EXTI2:
		NVIC_IRQ8_EXTI2_Dis ;
 800060c:	4b13      	ldr	r3, [pc, #76]	; (800065c <NVIC_DISABLE+0xc4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a12      	ldr	r2, [pc, #72]	; (800065c <NVIC_DISABLE+0xc4>)
 8000612:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000616:	6013      	str	r3, [r2, #0]
		break;
 8000618:	e01b      	b.n	8000652 <NVIC_DISABLE+0xba>

	case EXTI3:
		NVIC_IRQ9_EXTI3_Dis ;
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <NVIC_DISABLE+0xc4>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a0f      	ldr	r2, [pc, #60]	; (800065c <NVIC_DISABLE+0xc4>)
 8000620:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000624:	6013      	str	r3, [r2, #0]
		break;
 8000626:	e014      	b.n	8000652 <NVIC_DISABLE+0xba>

	case EXTI4:
		NVIC_IRQ10_EXTI4_Dis ;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <NVIC_DISABLE+0xc4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a0b      	ldr	r2, [pc, #44]	; (800065c <NVIC_DISABLE+0xc4>)
 800062e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000632:	6013      	str	r3, [r2, #0]
		break;
 8000634:	e00d      	b.n	8000652 <NVIC_DISABLE+0xba>
	case EXTI5:
	case EXTI6:
	case EXTI7:
	case EXTI8:
	case EXTI9:
		NVIC_IRQ23_EXTI5_9_Dis ;
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <NVIC_DISABLE+0xc4>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a08      	ldr	r2, [pc, #32]	; (800065c <NVIC_DISABLE+0xc4>)
 800063c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000640:	6013      	str	r3, [r2, #0]
		break;
 8000642:	e006      	b.n	8000652 <NVIC_DISABLE+0xba>
	case EXTI11:
	case EXTI12:
	case EXTI13:
	case EXTI14:
	case EXTI15:
		NVIC_IRQ40_EXTI10_15_Dis ;
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <NVIC_DISABLE+0xc8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a05      	ldr	r2, [pc, #20]	; (8000660 <NVIC_DISABLE+0xc8>)
 800064a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800064e:	6013      	str	r3, [r2, #0]
		break;
 8000650:	bf00      	nop
	}
}
 8000652:	bf00      	nop
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	e000e180 	.word	0xe000e180
 8000660:	e000e184 	.word	0xe000e184

08000664 <Updata>:
/*//internal function
 *
 */
void Updata(EXTI_Configer_t* P_EXTI_Confige){
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	//1-EXTI input pin FOIN
	    GPIO_Pinconfige_t  GPIO_Confi_t;
	    GPIO_Confi_t.Pin_Number=P_EXTI_Confige->exti_conf.PIN_NUM;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	891b      	ldrh	r3, [r3, #8]
 8000670:	813b      	strh	r3, [r7, #8]
	    GPIO_Confi_t.Mode=GPIO_MODE_INPUT_FLO;
 8000672:	2301      	movs	r3, #1
 8000674:	72bb      	strb	r3, [r7, #10]
		GPIOx_init(P_EXTI_Confige->exti_conf.PORT_NUM, &GPIO_Confi_t);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	f107 0208 	add.w	r2, r7, #8
 800067e:	4611      	mov	r1, r2
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fa3b 	bl	8000afc <GPIOx_init>


	//2-Enable AFIO PIN
		uint8_t index    = (P_EXTI_Confige->exti_conf.EXTI_NUM)/4;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	089b      	lsrs	r3, r3, #2
 800068c:	73fb      	strb	r3, [r7, #15]
		uint8_t position = (P_EXTI_Confige->exti_conf.EXTI_NUM %4)*4;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	f003 0303 	and.w	r3, r3, #3
 8000696:	b2db      	uxtb	r3, r3
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	73bb      	strb	r3, [r7, #14]
		AAFIO->EXTICR[index]&=~(0xf<<position);
 800069c:	4a62      	ldr	r2, [pc, #392]	; (8000828 <Updata+0x1c4>)
 800069e:	7bfb      	ldrb	r3, [r7, #15]
 80006a0:	3302      	adds	r3, #2
 80006a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006a6:	7bbb      	ldrb	r3, [r7, #14]
 80006a8:	210f      	movs	r1, #15
 80006aa:	fa01 f303 	lsl.w	r3, r1, r3
 80006ae:	43db      	mvns	r3, r3
 80006b0:	4618      	mov	r0, r3
 80006b2:	495d      	ldr	r1, [pc, #372]	; (8000828 <Updata+0x1c4>)
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	4002      	ands	r2, r0
 80006b8:	3302      	adds	r3, #2
 80006ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		AAFIO->EXTICR[index] |= ((AFIO_MAPPING(P_EXTI_Confige->exti_conf.PORT_NUM  )& 0xf)<<position);
 80006be:	4a5a      	ldr	r2, [pc, #360]	; (8000828 <Updata+0x1c4>)
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	3302      	adds	r3, #2
 80006c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	4957      	ldr	r1, [pc, #348]	; (800082c <Updata+0x1c8>)
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d016      	beq.n	8000700 <Updata+0x9c>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	4956      	ldr	r1, [pc, #344]	; (8000830 <Updata+0x1cc>)
 80006d8:	428b      	cmp	r3, r1
 80006da:	d00f      	beq.n	80006fc <Updata+0x98>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	4954      	ldr	r1, [pc, #336]	; (8000834 <Updata+0x1d0>)
 80006e2:	428b      	cmp	r3, r1
 80006e4:	d008      	beq.n	80006f8 <Updata+0x94>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	4953      	ldr	r1, [pc, #332]	; (8000838 <Updata+0x1d4>)
 80006ec:	428b      	cmp	r3, r1
 80006ee:	d101      	bne.n	80006f4 <Updata+0x90>
 80006f0:	2303      	movs	r3, #3
 80006f2:	e006      	b.n	8000702 <Updata+0x9e>
 80006f4:	2300      	movs	r3, #0
 80006f6:	e004      	b.n	8000702 <Updata+0x9e>
 80006f8:	2302      	movs	r3, #2
 80006fa:	e002      	b.n	8000702 <Updata+0x9e>
 80006fc:	2301      	movs	r3, #1
 80006fe:	e000      	b.n	8000702 <Updata+0x9e>
 8000700:	2300      	movs	r3, #0
 8000702:	7bb9      	ldrb	r1, [r7, #14]
 8000704:	408b      	lsls	r3, r1
 8000706:	4618      	mov	r0, r3
 8000708:	4947      	ldr	r1, [pc, #284]	; (8000828 <Updata+0x1c4>)
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	4302      	orrs	r2, r0
 800070e:	3302      	adds	r3, #2
 8000710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	////==============================================
		//3- enable trigger case
		//clear bit of rising
		EXTI->RTSR &= ~(1<<P_EXTI_Confige->exti_conf.EXTI_NUM);
 8000714:	4b49      	ldr	r3, [pc, #292]	; (800083c <Updata+0x1d8>)
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	7812      	ldrb	r2, [r2, #0]
 800071c:	4611      	mov	r1, r2
 800071e:	2201      	movs	r2, #1
 8000720:	408a      	lsls	r2, r1
 8000722:	43d2      	mvns	r2, r2
 8000724:	4611      	mov	r1, r2
 8000726:	4a45      	ldr	r2, [pc, #276]	; (800083c <Updata+0x1d8>)
 8000728:	400b      	ands	r3, r1
 800072a:	6093      	str	r3, [r2, #8]

		//clear bit of Falling
		EXTI->FTSR &= ~(1<<P_EXTI_Confige->exti_conf.EXTI_NUM);
 800072c:	4b43      	ldr	r3, [pc, #268]	; (800083c <Updata+0x1d8>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	7812      	ldrb	r2, [r2, #0]
 8000734:	4611      	mov	r1, r2
 8000736:	2201      	movs	r2, #1
 8000738:	408a      	lsls	r2, r1
 800073a:	43d2      	mvns	r2, r2
 800073c:	4611      	mov	r1, r2
 800073e:	4a3f      	ldr	r2, [pc, #252]	; (800083c <Updata+0x1d8>)
 8000740:	400b      	ands	r3, r1
 8000742:	60d3      	str	r3, [r2, #12]

		if(P_EXTI_Confige->trigger_case==EXTI_Trigger_Raising){
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	7b1b      	ldrb	r3, [r3, #12]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d10b      	bne.n	8000764 <Updata+0x100>
			EXTI->RTSR|=(1<<P_EXTI_Confige->exti_conf.EXTI_NUM);
 800074c:	4b3b      	ldr	r3, [pc, #236]	; (800083c <Updata+0x1d8>)
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	7812      	ldrb	r2, [r2, #0]
 8000754:	4611      	mov	r1, r2
 8000756:	2201      	movs	r2, #1
 8000758:	408a      	lsls	r2, r1
 800075a:	4611      	mov	r1, r2
 800075c:	4a37      	ldr	r2, [pc, #220]	; (800083c <Updata+0x1d8>)
 800075e:	430b      	orrs	r3, r1
 8000760:	6093      	str	r3, [r2, #8]
 8000762:	e029      	b.n	80007b8 <Updata+0x154>

		}else if(P_EXTI_Confige->trigger_case==EXTI_Trigger_Falling){
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	7b1b      	ldrb	r3, [r3, #12]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d10b      	bne.n	8000784 <Updata+0x120>
			EXTI->FTSR |=(1<<P_EXTI_Confige->exti_conf.EXTI_NUM);
 800076c:	4b33      	ldr	r3, [pc, #204]	; (800083c <Updata+0x1d8>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	7812      	ldrb	r2, [r2, #0]
 8000774:	4611      	mov	r1, r2
 8000776:	2201      	movs	r2, #1
 8000778:	408a      	lsls	r2, r1
 800077a:	4611      	mov	r1, r2
 800077c:	4a2f      	ldr	r2, [pc, #188]	; (800083c <Updata+0x1d8>)
 800077e:	430b      	orrs	r3, r1
 8000780:	60d3      	str	r3, [r2, #12]
 8000782:	e019      	b.n	80007b8 <Updata+0x154>

		}else if(P_EXTI_Confige->trigger_case==EXTI_Trigger_Poth_Raising_falling){
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	7b1b      	ldrb	r3, [r3, #12]
 8000788:	2b02      	cmp	r3, #2
 800078a:	d115      	bne.n	80007b8 <Updata+0x154>
			EXTI->RTSR|=(1<<P_EXTI_Confige->exti_conf.EXTI_NUM);
 800078c:	4b2b      	ldr	r3, [pc, #172]	; (800083c <Updata+0x1d8>)
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	7812      	ldrb	r2, [r2, #0]
 8000794:	4611      	mov	r1, r2
 8000796:	2201      	movs	r2, #1
 8000798:	408a      	lsls	r2, r1
 800079a:	4611      	mov	r1, r2
 800079c:	4a27      	ldr	r2, [pc, #156]	; (800083c <Updata+0x1d8>)
 800079e:	430b      	orrs	r3, r1
 80007a0:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |=(1<<P_EXTI_Confige->exti_conf.EXTI_NUM);
 80007a2:	4b26      	ldr	r3, [pc, #152]	; (800083c <Updata+0x1d8>)
 80007a4:	68db      	ldr	r3, [r3, #12]
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	7812      	ldrb	r2, [r2, #0]
 80007aa:	4611      	mov	r1, r2
 80007ac:	2201      	movs	r2, #1
 80007ae:	408a      	lsls	r2, r1
 80007b0:	4611      	mov	r1, r2
 80007b2:	4a22      	ldr	r2, [pc, #136]	; (800083c <Updata+0x1d8>)
 80007b4:	430b      	orrs	r3, r1
 80007b6:	60d3      	str	r3, [r2, #12]
		}
		//4-handel function call back
		Gp_call_back_func[P_EXTI_Confige->exti_conf.EXTI_NUM]=P_EXTI_Confige->P_IRQ_call_back;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	691b      	ldr	r3, [r3, #16]
 80007c2:	4a1f      	ldr	r2, [pc, #124]	; (8000840 <Updata+0x1dc>)
 80007c4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//5-//enable MASK & NVIC
		if(P_EXTI_Confige->IRQ_EN==EXTI_IRQ_Enable)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	7b5b      	ldrb	r3, [r3, #13]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d111      	bne.n	80007f4 <Updata+0x190>
			{
				 //enable mask
			EXTI->IMR |= (1<<P_EXTI_Confige->exti_conf.EXTI_NUM);
 80007d0:	4b1a      	ldr	r3, [pc, #104]	; (800083c <Updata+0x1d8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	7812      	ldrb	r2, [r2, #0]
 80007d8:	4611      	mov	r1, r2
 80007da:	2201      	movs	r2, #1
 80007dc:	408a      	lsls	r2, r1
 80007de:	4611      	mov	r1, r2
 80007e0:	4a16      	ldr	r2, [pc, #88]	; (800083c <Updata+0x1d8>)
 80007e2:	430b      	orrs	r3, r1
 80007e4:	6013      	str	r3, [r2, #0]
			    //enable NVIC
			 NVIC_ENABLE(P_EXTI_Confige->exti_conf.EXTI_NUM);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fe6d 	bl	80004cc <NVIC_ENABLE>
				 //diable mask
			EXTI->IMR &= ~(1<<P_EXTI_Confige->exti_conf.EXTI_NUM);
			    //disable NVIC
			 NVIC_DISABLE(P_EXTI_Confige->exti_conf.EXTI_NUM);
			}
}
 80007f2:	e015      	b.n	8000820 <Updata+0x1bc>
			else if(P_EXTI_Confige->IRQ_EN==EXTI_IRQ_Disable)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	7b5b      	ldrb	r3, [r3, #13]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d111      	bne.n	8000820 <Updata+0x1bc>
			EXTI->IMR &= ~(1<<P_EXTI_Confige->exti_conf.EXTI_NUM);
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <Updata+0x1d8>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	7812      	ldrb	r2, [r2, #0]
 8000804:	4611      	mov	r1, r2
 8000806:	2201      	movs	r2, #1
 8000808:	408a      	lsls	r2, r1
 800080a:	43d2      	mvns	r2, r2
 800080c:	4611      	mov	r1, r2
 800080e:	4a0b      	ldr	r2, [pc, #44]	; (800083c <Updata+0x1d8>)
 8000810:	400b      	ands	r3, r1
 8000812:	6013      	str	r3, [r2, #0]
			 NVIC_DISABLE(P_EXTI_Confige->exti_conf.EXTI_NUM);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	b29b      	uxth	r3, r3
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff febc 	bl	8000598 <NVIC_DISABLE>
}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40010000 	.word	0x40010000
 800082c:	40010800 	.word	0x40010800
 8000830:	40010c00 	.word	0x40010c00
 8000834:	40011000 	.word	0x40011000
 8000838:	40011400 	.word	0x40011400
 800083c:	40010400 	.word	0x40010400
 8000840:	20000040 	.word	0x20000040

08000844 <MCAL_EXTI_GPIO_INIT>:
* @brief         -Initializes the EXTI PINy according to the specified parameters in the PinConfig
* @param [in]    -P_EXTI_Confige
* @retval        -non
* Note           -non
* */
void MCAL_EXTI_GPIO_INIT(EXTI_Configer_t* P_EXTI_Confige){
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
    Updata(P_EXTI_Confige);
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff ff09 	bl	8000664 <Updata>

}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <EXTI0_IRQHandler>:

	Updata(P_EXTI_Confige);
}
//=========================================ISR==============================================
void EXTI0_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	//write 1 to clear pending bit,to stop sending interrupt again
	EXTI->PR = 1<<0;
 8000860:	4b03      	ldr	r3, [pc, #12]	; (8000870 <EXTI0_IRQHandler+0x14>)
 8000862:	2201      	movs	r2, #1
 8000864:	615a      	str	r2, [r3, #20]
	//callback
	Gp_call_back_func[0]();
 8000866:	4b03      	ldr	r3, [pc, #12]	; (8000874 <EXTI0_IRQHandler+0x18>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4798      	blx	r3
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40010400 	.word	0x40010400
 8000874:	20000040 	.word	0x20000040

08000878 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<1;
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <EXTI1_IRQHandler+0x14>)
 800087e:	2202      	movs	r2, #2
 8000880:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[1]();
 8000882:	4b03      	ldr	r3, [pc, #12]	; (8000890 <EXTI1_IRQHandler+0x18>)
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	4798      	blx	r3
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40010400 	.word	0x40010400
 8000890:	20000040 	.word	0x20000040

08000894 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<2;
 8000898:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <EXTI2_IRQHandler+0x14>)
 800089a:	2204      	movs	r2, #4
 800089c:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[2]();
 800089e:	4b03      	ldr	r3, [pc, #12]	; (80008ac <EXTI2_IRQHandler+0x18>)
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	4798      	blx	r3
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40010400 	.word	0x40010400
 80008ac:	20000040 	.word	0x20000040

080008b0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<3;
 80008b4:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <EXTI3_IRQHandler+0x14>)
 80008b6:	2208      	movs	r2, #8
 80008b8:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[3]();
 80008ba:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <EXTI3_IRQHandler+0x18>)
 80008bc:	68db      	ldr	r3, [r3, #12]
 80008be:	4798      	blx	r3
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40010400 	.word	0x40010400
 80008c8:	20000040 	.word	0x20000040

080008cc <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<4;
 80008d0:	4b03      	ldr	r3, [pc, #12]	; (80008e0 <EXTI4_IRQHandler+0x14>)
 80008d2:	2210      	movs	r2, #16
 80008d4:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[4]();
 80008d6:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <EXTI4_IRQHandler+0x18>)
 80008d8:	691b      	ldr	r3, [r3, #16]
 80008da:	4798      	blx	r3
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40010400 	.word	0x40010400
 80008e4:	20000040 	.word	0x20000040

080008e8 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
    /* here i check which interrupt is that, cause all interrupts from
	 5---9  arrived on same pin at NVIC
	so we will know which interrupt for ,by checking PR register if its one so its
	and then we write 1 on PR reg to disable interrupt  */
	if(EXTI->PR & 1<<5) { EXTI->PR  = 1<<5;   Gp_call_back_func[5](); }
 80008ec:	4b1f      	ldr	r3, [pc, #124]	; (800096c <EXTI9_5_IRQHandler+0x84>)
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	f003 0320 	and.w	r3, r3, #32
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d005      	beq.n	8000904 <EXTI9_5_IRQHandler+0x1c>
 80008f8:	4b1c      	ldr	r3, [pc, #112]	; (800096c <EXTI9_5_IRQHandler+0x84>)
 80008fa:	2220      	movs	r2, #32
 80008fc:	615a      	str	r2, [r3, #20]
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <EXTI9_5_IRQHandler+0x88>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR  = 1<<6;   Gp_call_back_func[6](); }
 8000904:	4b19      	ldr	r3, [pc, #100]	; (800096c <EXTI9_5_IRQHandler+0x84>)
 8000906:	695b      	ldr	r3, [r3, #20]
 8000908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800090c:	2b00      	cmp	r3, #0
 800090e:	d005      	beq.n	800091c <EXTI9_5_IRQHandler+0x34>
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <EXTI9_5_IRQHandler+0x84>)
 8000912:	2240      	movs	r2, #64	; 0x40
 8000914:	615a      	str	r2, [r3, #20]
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <EXTI9_5_IRQHandler+0x88>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR  = 1<<7;   Gp_call_back_func[7](); }
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <EXTI9_5_IRQHandler+0x84>)
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000924:	2b00      	cmp	r3, #0
 8000926:	d005      	beq.n	8000934 <EXTI9_5_IRQHandler+0x4c>
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <EXTI9_5_IRQHandler+0x84>)
 800092a:	2280      	movs	r2, #128	; 0x80
 800092c:	615a      	str	r2, [r3, #20]
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <EXTI9_5_IRQHandler+0x88>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR  = 1<<8;   Gp_call_back_func[8](); }
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <EXTI9_5_IRQHandler+0x84>)
 8000936:	695b      	ldr	r3, [r3, #20]
 8000938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800093c:	2b00      	cmp	r3, #0
 800093e:	d006      	beq.n	800094e <EXTI9_5_IRQHandler+0x66>
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <EXTI9_5_IRQHandler+0x84>)
 8000942:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000946:	615a      	str	r2, [r3, #20]
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <EXTI9_5_IRQHandler+0x88>)
 800094a:	6a1b      	ldr	r3, [r3, #32]
 800094c:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR  = 1<<9;   Gp_call_back_func[9](); }
 800094e:	4b07      	ldr	r3, [pc, #28]	; (800096c <EXTI9_5_IRQHandler+0x84>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000956:	2b00      	cmp	r3, #0
 8000958:	d006      	beq.n	8000968 <EXTI9_5_IRQHandler+0x80>
 800095a:	4b04      	ldr	r3, [pc, #16]	; (800096c <EXTI9_5_IRQHandler+0x84>)
 800095c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000960:	615a      	str	r2, [r3, #20]
 8000962:	4b03      	ldr	r3, [pc, #12]	; (8000970 <EXTI9_5_IRQHandler+0x88>)
 8000964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000966:	4798      	blx	r3
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40010400 	.word	0x40010400
 8000970:	20000040 	.word	0x20000040

08000974 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void){
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0

	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10; Gp_call_back_func[10](); }
 8000978:	4b2d      	ldr	r3, [pc, #180]	; (8000a30 <EXTI15_10_IRQHandler+0xbc>)
 800097a:	695b      	ldr	r3, [r3, #20]
 800097c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000980:	2b00      	cmp	r3, #0
 8000982:	d008      	beq.n	8000996 <EXTI15_10_IRQHandler+0x22>
 8000984:	4b2a      	ldr	r3, [pc, #168]	; (8000a30 <EXTI15_10_IRQHandler+0xbc>)
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	4a29      	ldr	r2, [pc, #164]	; (8000a30 <EXTI15_10_IRQHandler+0xbc>)
 800098a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800098e:	6153      	str	r3, [r2, #20]
 8000990:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <EXTI15_10_IRQHandler+0xc0>)
 8000992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000994:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11; Gp_call_back_func[11](); }
 8000996:	4b26      	ldr	r3, [pc, #152]	; (8000a30 <EXTI15_10_IRQHandler+0xbc>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d008      	beq.n	80009b4 <EXTI15_10_IRQHandler+0x40>
 80009a2:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <EXTI15_10_IRQHandler+0xbc>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	4a22      	ldr	r2, [pc, #136]	; (8000a30 <EXTI15_10_IRQHandler+0xbc>)
 80009a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009ac:	6153      	str	r3, [r2, #20]
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <EXTI15_10_IRQHandler+0xc0>)
 80009b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b2:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12; Gp_call_back_func[12](); }
 80009b4:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <EXTI15_10_IRQHandler+0xbc>)
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d008      	beq.n	80009d2 <EXTI15_10_IRQHandler+0x5e>
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <EXTI15_10_IRQHandler+0xbc>)
 80009c2:	695b      	ldr	r3, [r3, #20]
 80009c4:	4a1a      	ldr	r2, [pc, #104]	; (8000a30 <EXTI15_10_IRQHandler+0xbc>)
 80009c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009ca:	6153      	str	r3, [r2, #20]
 80009cc:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <EXTI15_10_IRQHandler+0xc0>)
 80009ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d0:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13; Gp_call_back_func[13](); }
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <EXTI15_10_IRQHandler+0xbc>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d008      	beq.n	80009f0 <EXTI15_10_IRQHandler+0x7c>
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <EXTI15_10_IRQHandler+0xbc>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <EXTI15_10_IRQHandler+0xbc>)
 80009e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009e8:	6153      	str	r3, [r2, #20]
 80009ea:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <EXTI15_10_IRQHandler+0xc0>)
 80009ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ee:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14; Gp_call_back_func[14](); }
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <EXTI15_10_IRQHandler+0xbc>)
 80009f2:	695b      	ldr	r3, [r3, #20]
 80009f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d008      	beq.n	8000a0e <EXTI15_10_IRQHandler+0x9a>
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <EXTI15_10_IRQHandler+0xbc>)
 80009fe:	695b      	ldr	r3, [r3, #20]
 8000a00:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <EXTI15_10_IRQHandler+0xbc>)
 8000a02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a06:	6153      	str	r3, [r2, #20]
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <EXTI15_10_IRQHandler+0xc0>)
 8000a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a0c:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<15; Gp_call_back_func[15](); }
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <EXTI15_10_IRQHandler+0xbc>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d008      	beq.n	8000a2c <EXTI15_10_IRQHandler+0xb8>
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <EXTI15_10_IRQHandler+0xbc>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <EXTI15_10_IRQHandler+0xbc>)
 8000a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a24:	6153      	str	r3, [r2, #20]
 8000a26:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <EXTI15_10_IRQHandler+0xc0>)
 8000a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a2a:	4798      	blx	r3
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40010400 	.word	0x40010400
 8000a34:	20000040 	.word	0x20000040

08000a38 <get_pin>:
//----------------------------
//include
//-----------------------------
#include "Stm32f103x8_gpio_drivers.h"
//-----------------------------
uint8_t get_pin(uint16_t Pin_Number){
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	80fb      	strh	r3, [r7, #6]
	switch (Pin_Number)
 8000a42:	88fb      	ldrh	r3, [r7, #6]
 8000a44:	2b80      	cmp	r3, #128	; 0x80
 8000a46:	d042      	beq.n	8000ace <get_pin+0x96>
 8000a48:	2b80      	cmp	r3, #128	; 0x80
 8000a4a:	dc11      	bgt.n	8000a70 <get_pin+0x38>
 8000a4c:	2b08      	cmp	r3, #8
 8000a4e:	d036      	beq.n	8000abe <get_pin+0x86>
 8000a50:	2b08      	cmp	r3, #8
 8000a52:	dc06      	bgt.n	8000a62 <get_pin+0x2a>
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	d02e      	beq.n	8000ab6 <get_pin+0x7e>
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	d02e      	beq.n	8000aba <get_pin+0x82>
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d028      	beq.n	8000ab2 <get_pin+0x7a>
 8000a60:	e047      	b.n	8000af2 <get_pin+0xba>
 8000a62:	2b20      	cmp	r3, #32
 8000a64:	d02f      	beq.n	8000ac6 <get_pin+0x8e>
 8000a66:	2b40      	cmp	r3, #64	; 0x40
 8000a68:	d02f      	beq.n	8000aca <get_pin+0x92>
 8000a6a:	2b10      	cmp	r3, #16
 8000a6c:	d029      	beq.n	8000ac2 <get_pin+0x8a>
 8000a6e:	e040      	b.n	8000af2 <get_pin+0xba>
 8000a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a74:	d033      	beq.n	8000ade <get_pin+0xa6>
 8000a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a7a:	dc09      	bgt.n	8000a90 <get_pin+0x58>
 8000a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a80:	d029      	beq.n	8000ad6 <get_pin+0x9e>
 8000a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a86:	d028      	beq.n	8000ada <get_pin+0xa2>
 8000a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a8c:	d021      	beq.n	8000ad2 <get_pin+0x9a>
 8000a8e:	e030      	b.n	8000af2 <get_pin+0xba>
 8000a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a94:	d027      	beq.n	8000ae6 <get_pin+0xae>
 8000a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a9a:	dc03      	bgt.n	8000aa4 <get_pin+0x6c>
 8000a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000aa0:	d01f      	beq.n	8000ae2 <get_pin+0xaa>
 8000aa2:	e026      	b.n	8000af2 <get_pin+0xba>
 8000aa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000aa8:	d01f      	beq.n	8000aea <get_pin+0xb2>
 8000aaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000aae:	d01e      	beq.n	8000aee <get_pin+0xb6>
 8000ab0:	e01f      	b.n	8000af2 <get_pin+0xba>
		{
		//from pin 0 t0 7 CRL
		case GPIO_PIN_0:
			return 0 ;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e01d      	b.n	8000af2 <get_pin+0xba>
			break ;
		case GPIO_PIN_1:
			return 4 ;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	e01b      	b.n	8000af2 <get_pin+0xba>
			break ;
		case GPIO_PIN_2:
			return 8 ;
 8000aba:	2308      	movs	r3, #8
 8000abc:	e019      	b.n	8000af2 <get_pin+0xba>
			break ;
		case GPIO_PIN_3:
			return 12 ;
 8000abe:	230c      	movs	r3, #12
 8000ac0:	e017      	b.n	8000af2 <get_pin+0xba>
			break ;

		case GPIO_PIN_4:
			return 16 ;
 8000ac2:	2310      	movs	r3, #16
 8000ac4:	e015      	b.n	8000af2 <get_pin+0xba>
			break ;

		case GPIO_PIN_5:
			return 20 ;
 8000ac6:	2314      	movs	r3, #20
 8000ac8:	e013      	b.n	8000af2 <get_pin+0xba>
			break ;

		case GPIO_PIN_6:
			return 24 ;
 8000aca:	2318      	movs	r3, #24
 8000acc:	e011      	b.n	8000af2 <get_pin+0xba>
			break ;

		case GPIO_PIN_7:
			return 28 ;
 8000ace:	231c      	movs	r3, #28
 8000ad0:	e00f      	b.n	8000af2 <get_pin+0xba>
			break ;

			//from pin 8 t0 15 CRH
		case GPIO_PIN_8:
			return 0 ;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e00d      	b.n	8000af2 <get_pin+0xba>
			break ;
		case GPIO_PIN_9:
			return 4 ;
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	e00b      	b.n	8000af2 <get_pin+0xba>
			break ;

		case GPIO_PIN_10:
			return 8 ;
 8000ada:	2308      	movs	r3, #8
 8000adc:	e009      	b.n	8000af2 <get_pin+0xba>
			break ;

		case GPIO_PIN_11:
			return 12 ;
 8000ade:	230c      	movs	r3, #12
 8000ae0:	e007      	b.n	8000af2 <get_pin+0xba>
			break ;

		case GPIO_PIN_12:
			return 16 ;
 8000ae2:	2310      	movs	r3, #16
 8000ae4:	e005      	b.n	8000af2 <get_pin+0xba>
			break ;


		case GPIO_PIN_13:
			return 20 ;
 8000ae6:	2314      	movs	r3, #20
 8000ae8:	e003      	b.n	8000af2 <get_pin+0xba>
			break ;

		case GPIO_PIN_14:
			return 24 ;
 8000aea:	2318      	movs	r3, #24
 8000aec:	e001      	b.n	8000af2 <get_pin+0xba>
			break ;

		case GPIO_PIN_15:
			return 28 ;
 8000aee:	231c      	movs	r3, #28
 8000af0:	e7ff      	b.n	8000af2 <get_pin+0xba>



		}

}
 8000af2:	4618      	mov	r0, r3
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <GPIOx_init>:
* @param [in]    -GPIOx: where x can be (A..E depending on device used) to select the GPIO peripheral
* @param [out]   -GPIO_conf pointer to a GPIO PinConfig t structure that contains the configuration information for the specified GPIO PIN
* @retval        -non
* Note           -Stm32F103C6 MCU has GPIO A, B, C,D, E Modules But LQFP48 Package has only GPIO A, B, PART of C/D exported as external PINS from MCU
*/
void GPIOx_init (typedef_GPIO* GPIOx,GPIO_Pinconfige_t* GPIO_conf){
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
	uint32_t* config=NULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60bb      	str	r3, [r7, #8]
	config=(GPIO_conf->Pin_Number)>GPIO_PIN_8?&GPIOx->CRH:&GPIOx->CRL;
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b12:	d902      	bls.n	8000b1a <GPIOx_init+0x1e>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3304      	adds	r3, #4
 8000b18:	e000      	b.n	8000b1c <GPIOx_init+0x20>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	60bb      	str	r3, [r7, #8]
	uint8_t pinVal =0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	73fb      	strb	r3, [r7, #15]
	*(config) &= (~(0xf <<get_pin(GPIO_conf->Pin_Number)));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ff86 	bl	8000a38 <get_pin>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	461a      	mov	r2, r3
 8000b30:	230f      	movs	r3, #15
 8000b32:	4093      	lsls	r3, r2
 8000b34:	43da      	mvns	r2, r3
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	601a      	str	r2, [r3, #0]



	if(GPIO_conf->Mode==GPIO_MODE_OUTPUT_PP||GPIO_conf->Mode==GPIO_MODE_OUTPUT_OD||GPIO_conf->Mode==GPIO_MODE_OUTPUT_AF_PP||GPIO_conf->Mode==GPIO_MODE_OUTPUT_AF_OD){
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	789b      	ldrb	r3, [r3, #2]
 8000b44:	2b04      	cmp	r3, #4
 8000b46:	d00b      	beq.n	8000b60 <GPIOx_init+0x64>
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	789b      	ldrb	r3, [r3, #2]
 8000b4c:	2b05      	cmp	r3, #5
 8000b4e:	d007      	beq.n	8000b60 <GPIOx_init+0x64>
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	789b      	ldrb	r3, [r3, #2]
 8000b54:	2b06      	cmp	r3, #6
 8000b56:	d003      	beq.n	8000b60 <GPIOx_init+0x64>
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	789b      	ldrb	r3, [r3, #2]
 8000b5c:	2b07      	cmp	r3, #7
 8000b5e:	d10e      	bne.n	8000b7e <GPIOx_init+0x82>
		pinVal= (((GPIO_conf->Mode -4)<<2) | (GPIO_conf->Speed) & 0x0f);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	789b      	ldrb	r3, [r3, #2]
 8000b64:	3b04      	subs	r3, #4
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	b25a      	sxtb	r2, r3
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	78db      	ldrb	r3, [r3, #3]
 8000b6e:	b25b      	sxtb	r3, r3
 8000b70:	f003 030f 	and.w	r3, r3, #15
 8000b74:	b25b      	sxtb	r3, r3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	73fb      	strb	r3, [r7, #15]
 8000b7c:	e02a      	b.n	8000bd4 <GPIOx_init+0xd8>


	}else{


		if(GPIO_conf->Mode==GPIO_MODE_ANALOG||GPIO_conf->Mode==GPIO_MODE_INPUT_FLO){
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	789b      	ldrb	r3, [r3, #2]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d003      	beq.n	8000b8e <GPIOx_init+0x92>
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	789b      	ldrb	r3, [r3, #2]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d107      	bne.n	8000b9e <GPIOx_init+0xa2>
			pinVal=(((GPIO_conf->Mode<<2)|0x00)& 0x0f);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	789b      	ldrb	r3, [r3, #2]
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	f003 030f 	and.w	r3, r3, #15
 8000b9a:	73fb      	strb	r3, [r7, #15]
 8000b9c:	e01a      	b.n	8000bd4 <GPIOx_init+0xd8>



		}
		else if (GPIO_conf->Mode == GPIO_MODE_AF_INPUT) // consider it floating input
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	789b      	ldrb	r3, [r3, #2]
 8000ba2:	2b08      	cmp	r3, #8
 8000ba4:	d102      	bne.n	8000bac <GPIOx_init+0xb0>
		{
			pinVal = ((((GPIO_MODE_INPUT_FLO)<<2) | 0x0) & 0xf );
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	73fb      	strb	r3, [r7, #15]
 8000baa:	e013      	b.n	8000bd4 <GPIOx_init+0xd8>
		}

		//in case of PULL UP & PULL DOWN
		else
		{
			pinVal = ((((GPIO_MODE_INPUT_PU)<<2) | 0x0) & 0xf );
 8000bac:	2308      	movs	r3, #8
 8000bae:	73fb      	strb	r3, [r7, #15]
			if(GPIO_conf->Mode == GPIO_MODE_INPUT_PU)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	789b      	ldrb	r3, [r3, #2]
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d105      	bne.n	8000bc4 <GPIOx_init+0xc8>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR = GPIO_conf->Pin_Number;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	e007      	b.n	8000bd4 <GPIOx_init+0xd8>

			}
			else
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR &= ~(GPIO_conf->Pin_Number);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	683a      	ldr	r2, [r7, #0]
 8000bca:	8812      	ldrh	r2, [r2, #0]
 8000bcc:	43d2      	mvns	r2, r2
 8000bce:	401a      	ands	r2, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	60da      	str	r2, [r3, #12]
			}

		}
	}
	(*config) |= ((pinVal)<< get_pin(GPIO_conf->Pin_Number));
 8000bd4:	7bfc      	ldrb	r4, [r7, #15]
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff2c 	bl	8000a38 <get_pin>
 8000be0:	4603      	mov	r3, r0
 8000be2:	fa04 f203 	lsl.w	r2, r4, r3
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	431a      	orrs	r2, r3
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	601a      	str	r2, [r3, #0]

}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd90      	pop	{r4, r7, pc}

08000bf8 <GPIOx_WRITE_PIN>:
 *@param [in] 			-Value: Pin Value
 * @retval 			    -none
 * Note				    -none
 */
//WRITE
void GPIOx_WRITE_PIN (typedef_GPIO* GPIOx,uint16_t PIN_NUM,uint8_t Value){
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	807b      	strh	r3, [r7, #2]
 8000c04:	4613      	mov	r3, r2
 8000c06:	707b      	strb	r3, [r7, #1]
	if (Value !=GPIO_PIN_RESET)
 8000c08:	787b      	ldrb	r3, [r7, #1]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d003      	beq.n	8000c16 <GPIOx_WRITE_PIN+0x1e>
			//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
			//		These bits are write-only and can be accessed in Word mode only.
			//		0: No action on the corresponding ODRx bit
			//		1: Set the corresponding ODRx bit

			GPIOx->BSRR = (uint32_t)PIN_NUM;
 8000c0e:	887a      	ldrh	r2, [r7, #2]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	611a      	str	r2, [r3, #16]
			//		0: No action on the corresponding ODRx bit
			//		1: Reset the corresponding ODRx bit
			GPIOx->BRR =(uint32_t) PIN_NUM;
		}

}
 8000c14:	e002      	b.n	8000c1c <GPIOx_WRITE_PIN+0x24>
			GPIOx->BRR =(uint32_t) PIN_NUM;
 8000c16:	887a      	ldrh	r2, [r7, #2]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	615a      	str	r2, [r3, #20]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
	...

08000c28 <SPI1_IRQHandler>:
	*DATA=SPIx->SPI_DR;
}


/* SPI1 global interrupt                          */
void SPI1_IRQHandler (void){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	/*struct S_IRQ_Source irq_src;
	irq_src.TXE = ((SPI1->SR >> 1) & 1);
	irq_src.RXNE = ((SPI1->SR >> 2) & 1);
	irq_src.ERRI = ((SPI1->SR >> 5) & 1);*/
	SPI_confige->SPI_IRQ_FUNCTION();
 8000c2c:	4b02      	ldr	r3, [pc, #8]	; (8000c38 <SPI1_IRQHandler+0x10>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	4798      	blx	r3

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000024 	.word	0x20000024

08000c3c <SPI2_IRQHandler>:
/* SPI2 global interrupt                          */
void SPI2_IRQHandler (void){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	/*struct S_IRQ_Source irq_src;
	irq_src.TXE = ((SPI1->SR >> 1) & 1);
	irq_src.RXNE = ((SPI1->SR >> 2) & 1);
	irq_src.ERRI = ((SPI1->SR >> 5) & 1);*/
	SPI_confige->SPI_IRQ_FUNCTION();
 8000c40:	4b02      	ldr	r3, [pc, #8]	; (8000c4c <SPI2_IRQHandler+0x10>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	4798      	blx	r3

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000024 	.word	0x20000024

08000c50 <SPI3_IRQHandler>:
/* SPI3 global interrupt                          */
void SPI3_IRQHandler(void){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	/*struct S_IRQ_Source irq_src;
	irq_src.TXE = ((SPI1->SR >> 1) & 1);
	irq_src.RXNE = ((SPI1->SR >> 2) & 1);
	irq_src.ERRI = ((SPI1->SR >> 5) & 1);*/
	SPI_confige->SPI_IRQ_FUNCTION();
 8000c54:	4b02      	ldr	r3, [pc, #8]	; (8000c60 <SPI3_IRQHandler+0x10>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	4798      	blx	r3

}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000024 	.word	0x20000024

08000c64 <USART1_IRQHandler>:
}



/* USART1 global interrupt                          */
void USART1_IRQHandler (void){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	USART_confige->IRQ_FUNCTION();
 8000c68:	4b02      	ldr	r3, [pc, #8]	; (8000c74 <USART1_IRQHandler+0x10>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	691b      	ldr	r3, [r3, #16]
 8000c6e:	4798      	blx	r3

}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000028 	.word	0x20000028

08000c78 <USART2_IRQHandler>:
/* USART2 global interrupt                          */
void USART2_IRQHandler (void){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	USART_confige->IRQ_FUNCTION();
 8000c7c:	4b02      	ldr	r3, [pc, #8]	; (8000c88 <USART2_IRQHandler+0x10>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	691b      	ldr	r3, [r3, #16]
 8000c82:	4798      	blx	r3

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000028 	.word	0x20000028

08000c8c <USART3_IRQHandler>:
/* USART3 global interrupt                          */
void USART3_IRQHandler(void){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
	USART_confige->IRQ_FUNCTION();
 8000c90:	4b02      	ldr	r3, [pc, #8]	; (8000c9c <USART3_IRQHandler+0x10>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	691b      	ldr	r3, [r3, #16]
 8000c96:	4798      	blx	r3

}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000028 	.word	0x20000028

08000ca0 <__libc_init_array>:
 8000ca0:	b570      	push	{r4, r5, r6, lr}
 8000ca2:	2500      	movs	r5, #0
 8000ca4:	4e0c      	ldr	r6, [pc, #48]	; (8000cd8 <__libc_init_array+0x38>)
 8000ca6:	4c0d      	ldr	r4, [pc, #52]	; (8000cdc <__libc_init_array+0x3c>)
 8000ca8:	1ba4      	subs	r4, r4, r6
 8000caa:	10a4      	asrs	r4, r4, #2
 8000cac:	42a5      	cmp	r5, r4
 8000cae:	d109      	bne.n	8000cc4 <__libc_init_array+0x24>
 8000cb0:	f000 f81a 	bl	8000ce8 <_init>
 8000cb4:	2500      	movs	r5, #0
 8000cb6:	4e0a      	ldr	r6, [pc, #40]	; (8000ce0 <__libc_init_array+0x40>)
 8000cb8:	4c0a      	ldr	r4, [pc, #40]	; (8000ce4 <__libc_init_array+0x44>)
 8000cba:	1ba4      	subs	r4, r4, r6
 8000cbc:	10a4      	asrs	r4, r4, #2
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	d105      	bne.n	8000cce <__libc_init_array+0x2e>
 8000cc2:	bd70      	pop	{r4, r5, r6, pc}
 8000cc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cc8:	4798      	blx	r3
 8000cca:	3501      	adds	r5, #1
 8000ccc:	e7ee      	b.n	8000cac <__libc_init_array+0xc>
 8000cce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cd2:	4798      	blx	r3
 8000cd4:	3501      	adds	r5, #1
 8000cd6:	e7f2      	b.n	8000cbe <__libc_init_array+0x1e>
 8000cd8:	08000d0c 	.word	0x08000d0c
 8000cdc:	08000d0c 	.word	0x08000d0c
 8000ce0:	08000d0c 	.word	0x08000d0c
 8000ce4:	08000d10 	.word	0x08000d10

08000ce8 <_init>:
 8000ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cea:	bf00      	nop
 8000cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cee:	bc08      	pop	{r3}
 8000cf0:	469e      	mov	lr, r3
 8000cf2:	4770      	bx	lr

08000cf4 <_fini>:
 8000cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf6:	bf00      	nop
 8000cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cfa:	bc08      	pop	{r3}
 8000cfc:	469e      	mov	lr, r3
 8000cfe:	4770      	bx	lr
