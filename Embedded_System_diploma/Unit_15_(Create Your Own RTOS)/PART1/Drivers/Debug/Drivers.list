
Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005cc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080006fc  080006fc  000106fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000708  08000708  00010710  2**0
                  CONTENTS
  4 .ARM          00000000  08000708  08000708  00010710  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000708  08000710  00010710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000708  08000708  00010708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800070c  0800070c  0001070c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  20000000  08000710  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08000710  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010710  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000528c  00000000  00000000  00010739  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000dd3  00000000  00000000  000159c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000e30  00000000  00000000  00016798  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000278  00000000  00000000  000175c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000200  00000000  00000000  00017840  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00003240  00000000  00000000  00017a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000034b9  00000000  00000000  0001ac80  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000128a3  00000000  00000000  0001e139  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000309dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000784  00000000  00000000  00030a58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080006e4 	.word	0x080006e4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080006e4 	.word	0x080006e4

08000170 <NMI_Handler>:
 */




void NMI_Handler(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
  while(1);
 8000174:	e7fe      	b.n	8000174 <NMI_Handler+0x4>

08000176 <HardFault_Handler>:
}
void HardFault_Handler(){
 8000176:	b480      	push	{r7}
 8000178:	af00      	add	r7, sp, #0
	while(1);
 800017a:	e7fe      	b.n	800017a <HardFault_Handler+0x4>

0800017c <MemManage_Handler>:
}
void MemManage_Handler(){
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
	while(1);
 8000180:	e7fe      	b.n	8000180 <MemManage_Handler+0x4>

08000182 <BusFault_Handler>:
}
void BusFault_Handler(){
 8000182:	b480      	push	{r7}
 8000184:	af00      	add	r7, sp, #0
	while(1);
 8000186:	e7fe      	b.n	8000186 <BusFault_Handler+0x4>

08000188 <SVC_Handler>:
		 	 anything more in the stack to know to get SVC ID
 */
__attribute((naked)) void SVC_Handler(void)
{
	// Check which stack we use before stacking MSP or PSP
	__asm("TST LR, #0x4 \n\t"
 8000188:	f01e 0f04 	tst.w	lr, #4
 800018c:	bf0c      	ite	eq
 800018e:	f3ef 8008 	mrseq	r0, MSP
 8000192:	f3ef 8009 	mrsne	r0, PSP
 8000196:	f000 b834 	b.w	8000202 <OS_SVC_Services>
			"ITE EQ \n\t"
			"MRSEQ R0, MSP \n\t"
			"MRSNE R0, PSP \n\t"
			"B OS_SVC_Services");
}
 800019a:	bf00      	nop

0800019c <PendSV_Handler>:



void PendSV_Handler(void)
{
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0

}
 80001a0:	bf00      	nop
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <HW_init>:
	 * --------------------------------------------------------
	 * | CPU clock & SysTick Timer clock are 8 MHz by default |
	 * --------------------------------------------------------
	 */

MYRTOS_errorID HW_init(void){
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
	MYRTOS_errorID HW_init_ERROR=ES_NoError;
 80001ae:	2300      	movs	r3, #0
 80001b0:	71fb      	strb	r3, [r7, #7]





	return HW_init_ERROR;
 80001b2:	79fb      	ldrb	r3, [r7, #7]



}
 80001b4:	4618      	mov	r0, r3
 80001b6:	370c      	adds	r7, #12
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr

080001be <FIFO_init>:
 * @arguments		: pointer to LIFO, pointer to Buffer, length of buffer
 * @brief			: it's used to initialize the FIFO to be ready to use it.
 **********************************************************************************
 **/
FIFO_Buf_Status FIFO_init (FIFO_Buf_t *P_fifo, FIFO_element_type *buf, uint32_t length)
{
 80001be:	b480      	push	{r7}
 80001c0:	b085      	sub	sp, #20
 80001c2:	af00      	add	r7, sp, #0
 80001c4:	60f8      	str	r0, [r7, #12]
 80001c6:	60b9      	str	r1, [r7, #8]
 80001c8:	607a      	str	r2, [r7, #4]
	//check if buffer is reserved at memory or not
	if(buf == NULL)
 80001ca:	68bb      	ldr	r3, [r7, #8]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d101      	bne.n	80001d4 <FIFO_init+0x16>
		return FIFO_null;
 80001d0:	2303      	movs	r3, #3
 80001d2:	e011      	b.n	80001f8 <FIFO_init+0x3a>

	//initialize fifo
	P_fifo->base = buf;
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	68ba      	ldr	r2, [r7, #8]
 80001d8:	601a      	str	r2, [r3, #0]
	P_fifo->tail = P_fifo->base;
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	681a      	ldr	r2, [r3, #0]
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	605a      	str	r2, [r3, #4]
	P_fifo->head = P_fifo->base;
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	681a      	ldr	r2, [r3, #0]
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	609a      	str	r2, [r3, #8]
	P_fifo->length = length;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	687a      	ldr	r2, [r7, #4]
 80001ee:	60da      	str	r2, [r3, #12]
	P_fifo->count = 0;
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	2200      	movs	r2, #0
 80001f4:	611a      	str	r2, [r3, #16]

	return FIFO_no_error;
 80001f6:	2300      	movs	r3, #0
}
 80001f8:	4618      	mov	r0, r3
 80001fa:	3714      	adds	r7, #20
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bc80      	pop	{r7}
 8000200:	4770      	bx	lr

08000202 <OS_SVC_Services>:
}OS_Control_t;



void OS_SVC_Services(unsigned int *Stack_Pointer)
{
 8000202:	b480      	push	{r7}
 8000204:	b085      	sub	sp, #20
 8000206:	af00      	add	r7, sp, #0
 8000208:	6078      	str	r0, [r7, #4]
	unsigned char SVC_ID;

	SVC_ID = *((unsigned char *)(((unsigned char *)Stack_Pointer[6])-2));
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	3318      	adds	r3, #24
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	3b02      	subs	r3, #2
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	73fb      	strb	r3, [r7, #15]



	switch(SVC_ID)
 8000216:	7bfb      	ldrb	r3, [r7, #15]
 8000218:	2b02      	cmp	r3, #2
 800021a:	d003      	beq.n	8000224 <OS_SVC_Services+0x22>
 800021c:	2b03      	cmp	r3, #3
 800021e:	d003      	beq.n	8000228 <OS_SVC_Services+0x26>
 8000220:	2b01      	cmp	r3, #1
	{
	case 1:	//ACtive task

		break;
 8000222:	e002      	b.n	800022a <OS_SVC_Services+0x28>

	case 2:	//END task

		break;
 8000224:	bf00      	nop
 8000226:	e000      	b.n	800022a <OS_SVC_Services+0x28>

	case 3:	//

		break;
 8000228:	bf00      	nop
	}
}
 800022a:	bf00      	nop
 800022c:	3714      	adds	r7, #20
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr

08000234 <MyRTOS_Create_MainStack>:


}


void MyRTOS_Create_MainStack(){
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0

	OS_Control_t._S_MSP_OS=(unsigned int)&(_estack);
 8000238:	4a0b      	ldr	r2, [pc, #44]	; (8000268 <MyRTOS_Create_MainStack+0x34>)
 800023a:	4b0c      	ldr	r3, [pc, #48]	; (800026c <MyRTOS_Create_MainStack+0x38>)
 800023c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control_t._E_MSP_OS= OS_Control_t._S_MSP_OS-Main_Stack_Size;
 8000240:	4b0a      	ldr	r3, [pc, #40]	; (800026c <MyRTOS_Create_MainStack+0x38>)
 8000242:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000246:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800024a:	4a08      	ldr	r2, [pc, #32]	; (800026c <MyRTOS_Create_MainStack+0x38>)
 800024c:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194

	OS_Control_t.PSP_Task_Locator=OS_Control_t._E_MSP_OS-8;
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <MyRTOS_Create_MainStack+0x38>)
 8000252:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000256:	3b08      	subs	r3, #8
 8000258:	4a04      	ldr	r2, [pc, #16]	; (800026c <MyRTOS_Create_MainStack+0x38>)
 800025a:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

}
 800025e:	bf00      	nop
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	20002800 	.word	0x20002800
 800026c:	20000038 	.word	0x20000038

08000270 <IDLE_TASK_FUNC>:

void IDLE_TASK_FUNC(void){
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0


	while(1)
		{
			__asm("NOP");
 8000274:	bf00      	nop
 8000276:	e7fd      	b.n	8000274 <IDLE_TASK_FUNC+0x4>

08000278 <MYRTOS_Create_STack_Task>:
		}
}



void MYRTOS_Create_STack_Task(Task_Ref_t* Task_Ref_CFG){
 8000278:	b480      	push	{r7}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
		 * |  R10  |
		 * |  R11  |
		 * |-------|
		 */

	Task_Ref_CFG->Current_PSP_Task = (unsigned int *)(Task_Ref_CFG->_S_PSP_Task);
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	691b      	ldr	r3, [r3, #16]
 8000284:	461a      	mov	r2, r3
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	619a      	str	r2, [r3, #24]

	Task_Ref_CFG->Current_PSP_Task--;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	699b      	ldr	r3, [r3, #24]
 800028e:	1f1a      	subs	r2, r3, #4
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	619a      	str	r2, [r3, #24]
	*(Task_Ref_CFG->Current_PSP_Task) = 0x01000000;	//DUMMY xPSR --> you must put T = 1 to avoid Bus Fault (Thumb2 Technology)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800029c:	601a      	str	r2, [r3, #0]

	Task_Ref_CFG->Current_PSP_Task--;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	699b      	ldr	r3, [r3, #24]
 80002a2:	1f1a      	subs	r2, r3, #4
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	619a      	str	r2, [r3, #24]
	*(Task_Ref_CFG->Current_PSP_Task) = (unsigned int)(Task_Ref_CFG->PF_Task_Entry);	//DUMMY PC
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	689a      	ldr	r2, [r3, #8]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	601a      	str	r2, [r3, #0]

	Task_Ref_CFG->Current_PSP_Task--;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	1f1a      	subs	r2, r3, #4
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	619a      	str	r2, [r3, #24]
	*(Task_Ref_CFG->Current_PSP_Task) = 0xFFFFFFFD;	//DUMMY LR --> (EXECUTION RETURN CODE --> Thread Mode, PSP)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f06f 0202 	mvn.w	r2, #2
 80002c4:	601a      	str	r2, [r3, #0]

	//Still 13 General Purpose Register --> We dummy them to 0
	for(int i = 0; i < 13; i++)
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	e00b      	b.n	80002e4 <MYRTOS_Create_STack_Task+0x6c>
	{
		Task_Ref_CFG->Current_PSP_Task--;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	1f1a      	subs	r2, r3, #4
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	619a      	str	r2, [r3, #24]
		*(Task_Ref_CFG->Current_PSP_Task) = 0;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	699b      	ldr	r3, [r3, #24]
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 13; i++)
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	3301      	adds	r3, #1
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	2b0c      	cmp	r3, #12
 80002e8:	ddf0      	ble.n	80002cc <MYRTOS_Create_STack_Task+0x54>
	}



}
 80002ea:	bf00      	nop
 80002ec:	3714      	adds	r7, #20
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr

080002f4 <MYRTOS_Create_Task>:


MYRTOS_errorID MYRTOS_Create_Task(Task_Ref_t* Task_Ref_Config){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]

	MYRTOS_errorID Local_enuErrorState = ES_NoError;
 80002fc:	2300      	movs	r3, #0
 80002fe:	73fb      	strb	r3, [r7, #15]
		 * | _eheap    |
		 * -------------
		 */

	// Check if task stack size exceeded the PSP stack size
		if((OS_Control_t.PSP_Task_Locator - Task_Ref_Config->Task_Stack_Size) < (unsigned int)(&(_eheap)))
 8000300:	4b15      	ldr	r3, [pc, #84]	; (8000358 <MYRTOS_Create_Task+0x64>)
 8000302:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	1ad3      	subs	r3, r2, r3
 800030c:	4a13      	ldr	r2, [pc, #76]	; (800035c <MYRTOS_Create_Task+0x68>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d201      	bcs.n	8000316 <MYRTOS_Create_Task+0x22>
		{

		     Local_enuErrorState = ES_Error_Task_Exceeded_Stack_Size;
 8000312:	2302      	movs	r3, #2
 8000314:	73fb      	strb	r3, [r7, #15]
		}

		if(Local_enuErrorState == ES_NoError)
 8000316:	7bfb      	ldrb	r3, [r7, #15]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d111      	bne.n	8000340 <MYRTOS_Create_Task+0x4c>
		{
			//Create Its Own PSP Stack
			Task_Ref_Config->_S_PSP_Task = OS_Control_t.PSP_Task_Locator;
 800031c:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <MYRTOS_Create_Task+0x64>)
 800031e:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	611a      	str	r2, [r3, #16]
			Task_Ref_Config->_E_PSP_Task = (Task_Ref_Config->_S_PSP_Task - Task_Ref_Config->Task_Stack_Size);
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	691a      	ldr	r2, [r3, #16]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	1ad2      	subs	r2, r2, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	615a      	str	r2, [r3, #20]

			//Aligned 8 bytes spaces between PSP (Task) and PSP (Other Task)
			OS_Control_t.PSP_Task_Locator = (Task_Ref_Config->_E_PSP_Task - 8);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	3b08      	subs	r3, #8
 800033a:	4a07      	ldr	r2, [pc, #28]	; (8000358 <MYRTOS_Create_Task+0x64>)
 800033c:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
		}

		//Initialize PSP Task Stack
		MYRTOS_Create_STack_Task(Task_Ref_Config);
 8000340:	6878      	ldr	r0, [r7, #4]
 8000342:	f7ff ff99 	bl	8000278 <MYRTOS_Create_STack_Task>

		//Task State Update --> Suspend State
		Task_Ref_Config->Task_State = Suspend_State;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2200      	movs	r2, #0
 800034a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a



		return Local_enuErrorState;
 800034e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000350:	4618      	mov	r0, r3
 8000352:	3710      	adds	r7, #16
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000038 	.word	0x20000038
 800035c:	200009f8 	.word	0x200009f8

08000360 <MYRTOS_init>:




MYRTOS_errorID MYRTOS_init(void){
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0


	MYRTOS_errorID MYRTOS_init_Error=ES_NoError;
 8000366:	2300      	movs	r3, #0
 8000368:	71fb      	strb	r3, [r7, #7]


	//Updata OS Mode --> OS_Suspend
	OS_Control_t.OS_State = OS_Suspend;
 800036a:	4b14      	ldr	r3, [pc, #80]	; (80003bc <MYRTOS_init+0x5c>)
 800036c:	2200      	movs	r2, #0
 800036e:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//Specify the Main Stack for OS
	MyRTOS_Create_MainStack();
 8000372:	f7ff ff5f 	bl	8000234 <MyRTOS_Create_MainStack>


	if(FIFO_init(&Ready_Queue, Ready_Queue_FIFO, Max_Num_of_Tasks) != FIFO_no_error)
 8000376:	2264      	movs	r2, #100	; 0x64
 8000378:	4911      	ldr	r1, [pc, #68]	; (80003c0 <MYRTOS_init+0x60>)
 800037a:	4812      	ldr	r0, [pc, #72]	; (80003c4 <MYRTOS_init+0x64>)
 800037c:	f7ff ff1f 	bl	80001be <FIFO_init>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MYRTOS_init+0x2a>
	{
		MYRTOS_init_Error = ES_Ready_Queue_Init_Error;
 8000386:	2301      	movs	r3, #1
 8000388:	71fb      	strb	r3, [r7, #7]
	}

	//Configure IDLE Task
	strcpy(MYRTOS_IDLE_TASK.Task_Name,"IDEL TASK");
 800038a:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <MYRTOS_init+0x68>)
 800038c:	4a0f      	ldr	r2, [pc, #60]	; (80003cc <MYRTOS_init+0x6c>)
 800038e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000390:	c303      	stmia	r3!, {r0, r1}
 8000392:	801a      	strh	r2, [r3, #0]
	MYRTOS_IDLE_TASK.Task_Priority=255;
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <MYRTOS_init+0x70>)
 8000396:	22ff      	movs	r2, #255	; 0xff
 8000398:	711a      	strb	r2, [r3, #4]
	MYRTOS_IDLE_TASK.PF_Task_Entry=IDLE_TASK_FUNC;
 800039a:	4b0d      	ldr	r3, [pc, #52]	; (80003d0 <MYRTOS_init+0x70>)
 800039c:	4a0d      	ldr	r2, [pc, #52]	; (80003d4 <MYRTOS_init+0x74>)
 800039e:	609a      	str	r2, [r3, #8]
	MYRTOS_IDLE_TASK.Task_Stack_Size=300;
 80003a0:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <MYRTOS_init+0x70>)
 80003a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80003a6:	601a      	str	r2, [r3, #0]

	MYRTOS_init_Error=MYRTOS_Create_Task(&MYRTOS_IDLE_TASK);
 80003a8:	4809      	ldr	r0, [pc, #36]	; (80003d0 <MYRTOS_init+0x70>)
 80003aa:	f7ff ffa3 	bl	80002f4 <MYRTOS_Create_Task>
 80003ae:	4603      	mov	r3, r0
 80003b0:	71fb      	strb	r3, [r7, #7]





   return MYRTOS_init_Error;
 80003b2:	79fb      	ldrb	r3, [r7, #7]
}
 80003b4:	4618      	mov	r0, r3
 80003b6:	3708      	adds	r7, #8
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000038 	.word	0x20000038
 80003c0:	20000228 	.word	0x20000228
 80003c4:	20000024 	.word	0x20000024
 80003c8:	20000200 	.word	0x20000200
 80003cc:	080006fc 	.word	0x080006fc
 80003d0:	200001e4 	.word	0x200001e4
 80003d4:	08000271 	.word	0x08000271

080003d8 <main>:
	}
}


int main(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	MYRTOS_errorID OS_ERROR;
	HW_init();
 80003dc:	f7ff fee4 	bl	80001a8 <HW_init>


	if(MYRTOS_init()!=ES_NoError){
 80003e0:	f7ff ffbe 	bl	8000360 <MYRTOS_init>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d000      	beq.n	80003ec <main+0x14>
		while(1);
 80003ea:	e7fe      	b.n	80003ea <main+0x12>
 80003ec:	2300      	movs	r3, #0
	}


}
 80003ee:	4618      	mov	r0, r3
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f4:	480d      	ldr	r0, [pc, #52]	; (800042c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003f6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003fc:	480c      	ldr	r0, [pc, #48]	; (8000430 <LoopForever+0x6>)
  ldr r1, =_edata
 80003fe:	490d      	ldr	r1, [pc, #52]	; (8000434 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000400:	4a0d      	ldr	r2, [pc, #52]	; (8000438 <LoopForever+0xe>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000404:	e002      	b.n	800040c <LoopCopyDataInit>

08000406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040a:	3304      	adds	r3, #4

0800040c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800040c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800040e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000410:	d3f9      	bcc.n	8000406 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000412:	4a0a      	ldr	r2, [pc, #40]	; (800043c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000414:	4c0a      	ldr	r4, [pc, #40]	; (8000440 <LoopForever+0x16>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000418:	e001      	b.n	800041e <LoopFillZerobss>

0800041a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800041c:	3204      	adds	r2, #4

0800041e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800041e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000420:	d3fb      	bcc.n	800041a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000422:	f000 f93b 	bl	800069c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000426:	f7ff ffd7 	bl	80003d8 <main>

0800042a <LoopForever>:

LoopForever:
    b LoopForever
 800042a:	e7fe      	b.n	800042a <LoopForever>
  ldr   r0, =_estack
 800042c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000434:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000438:	08000710 	.word	0x08000710
  ldr r2, =_sbss
 800043c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000440:	200003f4 	.word	0x200003f4

08000444 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000444:	e7fe      	b.n	8000444 <ADC1_2_IRQHandler>
	...

08000448 <EXTI0_IRQHandler>:

	Updata(P_EXTI_Confige);
}
//=========================================ISR==============================================
void EXTI0_IRQHandler(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	//write 1 to clear pending bit,to stop sending interrupt again
	EXTI->PR = 1<<0;
 800044c:	4b03      	ldr	r3, [pc, #12]	; (800045c <EXTI0_IRQHandler+0x14>)
 800044e:	2201      	movs	r2, #1
 8000450:	615a      	str	r2, [r3, #20]
	//callback
	Gp_call_back_func[0]();
 8000452:	4b03      	ldr	r3, [pc, #12]	; (8000460 <EXTI0_IRQHandler+0x18>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4798      	blx	r3
}
 8000458:	bf00      	nop
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40010400 	.word	0x40010400
 8000460:	200003b8 	.word	0x200003b8

08000464 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<1;
 8000468:	4b03      	ldr	r3, [pc, #12]	; (8000478 <EXTI1_IRQHandler+0x14>)
 800046a:	2202      	movs	r2, #2
 800046c:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[1]();
 800046e:	4b03      	ldr	r3, [pc, #12]	; (800047c <EXTI1_IRQHandler+0x18>)
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	4798      	blx	r3
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40010400 	.word	0x40010400
 800047c:	200003b8 	.word	0x200003b8

08000480 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<2;
 8000484:	4b03      	ldr	r3, [pc, #12]	; (8000494 <EXTI2_IRQHandler+0x14>)
 8000486:	2204      	movs	r2, #4
 8000488:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[2]();
 800048a:	4b03      	ldr	r3, [pc, #12]	; (8000498 <EXTI2_IRQHandler+0x18>)
 800048c:	689b      	ldr	r3, [r3, #8]
 800048e:	4798      	blx	r3
}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	40010400 	.word	0x40010400
 8000498:	200003b8 	.word	0x200003b8

0800049c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<3;
 80004a0:	4b03      	ldr	r3, [pc, #12]	; (80004b0 <EXTI3_IRQHandler+0x14>)
 80004a2:	2208      	movs	r2, #8
 80004a4:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[3]();
 80004a6:	4b03      	ldr	r3, [pc, #12]	; (80004b4 <EXTI3_IRQHandler+0x18>)
 80004a8:	68db      	ldr	r3, [r3, #12]
 80004aa:	4798      	blx	r3
}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40010400 	.word	0x40010400
 80004b4:	200003b8 	.word	0x200003b8

080004b8 <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<4;
 80004bc:	4b03      	ldr	r3, [pc, #12]	; (80004cc <EXTI4_IRQHandler+0x14>)
 80004be:	2210      	movs	r2, #16
 80004c0:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[4]();
 80004c2:	4b03      	ldr	r3, [pc, #12]	; (80004d0 <EXTI4_IRQHandler+0x18>)
 80004c4:	691b      	ldr	r3, [r3, #16]
 80004c6:	4798      	blx	r3
}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40010400 	.word	0x40010400
 80004d0:	200003b8 	.word	0x200003b8

080004d4 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
    /* here i check which interrupt is that, cause all interrupts from
	 5---9  arrived on same pin at NVIC
	so we will know which interrupt for ,by checking PR register if its one so its
	and then we write 1 on PR reg to disable interrupt  */
	if(EXTI->PR & 1<<5) { EXTI->PR  = 1<<5;   Gp_call_back_func[5](); }
 80004d8:	4b1f      	ldr	r3, [pc, #124]	; (8000558 <EXTI9_5_IRQHandler+0x84>)
 80004da:	695b      	ldr	r3, [r3, #20]
 80004dc:	f003 0320 	and.w	r3, r3, #32
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d005      	beq.n	80004f0 <EXTI9_5_IRQHandler+0x1c>
 80004e4:	4b1c      	ldr	r3, [pc, #112]	; (8000558 <EXTI9_5_IRQHandler+0x84>)
 80004e6:	2220      	movs	r2, #32
 80004e8:	615a      	str	r2, [r3, #20]
 80004ea:	4b1c      	ldr	r3, [pc, #112]	; (800055c <EXTI9_5_IRQHandler+0x88>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR  = 1<<6;   Gp_call_back_func[6](); }
 80004f0:	4b19      	ldr	r3, [pc, #100]	; (8000558 <EXTI9_5_IRQHandler+0x84>)
 80004f2:	695b      	ldr	r3, [r3, #20]
 80004f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d005      	beq.n	8000508 <EXTI9_5_IRQHandler+0x34>
 80004fc:	4b16      	ldr	r3, [pc, #88]	; (8000558 <EXTI9_5_IRQHandler+0x84>)
 80004fe:	2240      	movs	r2, #64	; 0x40
 8000500:	615a      	str	r2, [r3, #20]
 8000502:	4b16      	ldr	r3, [pc, #88]	; (800055c <EXTI9_5_IRQHandler+0x88>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR  = 1<<7;   Gp_call_back_func[7](); }
 8000508:	4b13      	ldr	r3, [pc, #76]	; (8000558 <EXTI9_5_IRQHandler+0x84>)
 800050a:	695b      	ldr	r3, [r3, #20]
 800050c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000510:	2b00      	cmp	r3, #0
 8000512:	d005      	beq.n	8000520 <EXTI9_5_IRQHandler+0x4c>
 8000514:	4b10      	ldr	r3, [pc, #64]	; (8000558 <EXTI9_5_IRQHandler+0x84>)
 8000516:	2280      	movs	r2, #128	; 0x80
 8000518:	615a      	str	r2, [r3, #20]
 800051a:	4b10      	ldr	r3, [pc, #64]	; (800055c <EXTI9_5_IRQHandler+0x88>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR  = 1<<8;   Gp_call_back_func[8](); }
 8000520:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <EXTI9_5_IRQHandler+0x84>)
 8000522:	695b      	ldr	r3, [r3, #20]
 8000524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000528:	2b00      	cmp	r3, #0
 800052a:	d006      	beq.n	800053a <EXTI9_5_IRQHandler+0x66>
 800052c:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <EXTI9_5_IRQHandler+0x84>)
 800052e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000532:	615a      	str	r2, [r3, #20]
 8000534:	4b09      	ldr	r3, [pc, #36]	; (800055c <EXTI9_5_IRQHandler+0x88>)
 8000536:	6a1b      	ldr	r3, [r3, #32]
 8000538:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR  = 1<<9;   Gp_call_back_func[9](); }
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <EXTI9_5_IRQHandler+0x84>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000542:	2b00      	cmp	r3, #0
 8000544:	d006      	beq.n	8000554 <EXTI9_5_IRQHandler+0x80>
 8000546:	4b04      	ldr	r3, [pc, #16]	; (8000558 <EXTI9_5_IRQHandler+0x84>)
 8000548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800054c:	615a      	str	r2, [r3, #20]
 800054e:	4b03      	ldr	r3, [pc, #12]	; (800055c <EXTI9_5_IRQHandler+0x88>)
 8000550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000552:	4798      	blx	r3
}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40010400 	.word	0x40010400
 800055c:	200003b8 	.word	0x200003b8

08000560 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void){
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0

	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10; Gp_call_back_func[10](); }
 8000564:	4b2d      	ldr	r3, [pc, #180]	; (800061c <EXTI15_10_IRQHandler+0xbc>)
 8000566:	695b      	ldr	r3, [r3, #20]
 8000568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800056c:	2b00      	cmp	r3, #0
 800056e:	d008      	beq.n	8000582 <EXTI15_10_IRQHandler+0x22>
 8000570:	4b2a      	ldr	r3, [pc, #168]	; (800061c <EXTI15_10_IRQHandler+0xbc>)
 8000572:	695b      	ldr	r3, [r3, #20]
 8000574:	4a29      	ldr	r2, [pc, #164]	; (800061c <EXTI15_10_IRQHandler+0xbc>)
 8000576:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800057a:	6153      	str	r3, [r2, #20]
 800057c:	4b28      	ldr	r3, [pc, #160]	; (8000620 <EXTI15_10_IRQHandler+0xc0>)
 800057e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000580:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11; Gp_call_back_func[11](); }
 8000582:	4b26      	ldr	r3, [pc, #152]	; (800061c <EXTI15_10_IRQHandler+0xbc>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800058a:	2b00      	cmp	r3, #0
 800058c:	d008      	beq.n	80005a0 <EXTI15_10_IRQHandler+0x40>
 800058e:	4b23      	ldr	r3, [pc, #140]	; (800061c <EXTI15_10_IRQHandler+0xbc>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a22      	ldr	r2, [pc, #136]	; (800061c <EXTI15_10_IRQHandler+0xbc>)
 8000594:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b21      	ldr	r3, [pc, #132]	; (8000620 <EXTI15_10_IRQHandler+0xc0>)
 800059c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800059e:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12; Gp_call_back_func[12](); }
 80005a0:	4b1e      	ldr	r3, [pc, #120]	; (800061c <EXTI15_10_IRQHandler+0xbc>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d008      	beq.n	80005be <EXTI15_10_IRQHandler+0x5e>
 80005ac:	4b1b      	ldr	r3, [pc, #108]	; (800061c <EXTI15_10_IRQHandler+0xbc>)
 80005ae:	695b      	ldr	r3, [r3, #20]
 80005b0:	4a1a      	ldr	r2, [pc, #104]	; (800061c <EXTI15_10_IRQHandler+0xbc>)
 80005b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005b6:	6153      	str	r3, [r2, #20]
 80005b8:	4b19      	ldr	r3, [pc, #100]	; (8000620 <EXTI15_10_IRQHandler+0xc0>)
 80005ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005bc:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13; Gp_call_back_func[13](); }
 80005be:	4b17      	ldr	r3, [pc, #92]	; (800061c <EXTI15_10_IRQHandler+0xbc>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d008      	beq.n	80005dc <EXTI15_10_IRQHandler+0x7c>
 80005ca:	4b14      	ldr	r3, [pc, #80]	; (800061c <EXTI15_10_IRQHandler+0xbc>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	4a13      	ldr	r2, [pc, #76]	; (800061c <EXTI15_10_IRQHandler+0xbc>)
 80005d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005d4:	6153      	str	r3, [r2, #20]
 80005d6:	4b12      	ldr	r3, [pc, #72]	; (8000620 <EXTI15_10_IRQHandler+0xc0>)
 80005d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005da:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14; Gp_call_back_func[14](); }
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <EXTI15_10_IRQHandler+0xbc>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d008      	beq.n	80005fa <EXTI15_10_IRQHandler+0x9a>
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <EXTI15_10_IRQHandler+0xbc>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a0b      	ldr	r2, [pc, #44]	; (800061c <EXTI15_10_IRQHandler+0xbc>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f2:	6153      	str	r3, [r2, #20]
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <EXTI15_10_IRQHandler+0xc0>)
 80005f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005f8:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<15; Gp_call_back_func[15](); }
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <EXTI15_10_IRQHandler+0xbc>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000602:	2b00      	cmp	r3, #0
 8000604:	d008      	beq.n	8000618 <EXTI15_10_IRQHandler+0xb8>
 8000606:	4b05      	ldr	r3, [pc, #20]	; (800061c <EXTI15_10_IRQHandler+0xbc>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	4a04      	ldr	r2, [pc, #16]	; (800061c <EXTI15_10_IRQHandler+0xbc>)
 800060c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000610:	6153      	str	r3, [r2, #20]
 8000612:	4b03      	ldr	r3, [pc, #12]	; (8000620 <EXTI15_10_IRQHandler+0xc0>)
 8000614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000616:	4798      	blx	r3
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40010400 	.word	0x40010400
 8000620:	200003b8 	.word	0x200003b8

08000624 <SPI1_IRQHandler>:
	*DATA=SPIx->SPI_DR;
}


/* SPI1 global interrupt                          */
void SPI1_IRQHandler (void){
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	/*struct S_IRQ_Source irq_src;
	irq_src.TXE = ((SPI1->SR >> 1) & 1);
	irq_src.RXNE = ((SPI1->SR >> 2) & 1);
	irq_src.ERRI = ((SPI1->SR >> 5) & 1);*/
	SPI_confige->SPI_IRQ_FUNCTION();
 8000628:	4b02      	ldr	r3, [pc, #8]	; (8000634 <SPI1_IRQHandler+0x10>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	4798      	blx	r3

}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	2000001c 	.word	0x2000001c

08000638 <SPI2_IRQHandler>:
/* SPI2 global interrupt                          */
void SPI2_IRQHandler (void){
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	/*struct S_IRQ_Source irq_src;
	irq_src.TXE = ((SPI1->SR >> 1) & 1);
	irq_src.RXNE = ((SPI1->SR >> 2) & 1);
	irq_src.ERRI = ((SPI1->SR >> 5) & 1);*/
	SPI_confige->SPI_IRQ_FUNCTION();
 800063c:	4b02      	ldr	r3, [pc, #8]	; (8000648 <SPI2_IRQHandler+0x10>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	68db      	ldr	r3, [r3, #12]
 8000642:	4798      	blx	r3

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	2000001c 	.word	0x2000001c

0800064c <SPI3_IRQHandler>:
/* SPI3 global interrupt                          */
void SPI3_IRQHandler(void){
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	/*struct S_IRQ_Source irq_src;
	irq_src.TXE = ((SPI1->SR >> 1) & 1);
	irq_src.RXNE = ((SPI1->SR >> 2) & 1);
	irq_src.ERRI = ((SPI1->SR >> 5) & 1);*/
	SPI_confige->SPI_IRQ_FUNCTION();
 8000650:	4b02      	ldr	r3, [pc, #8]	; (800065c <SPI3_IRQHandler+0x10>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	68db      	ldr	r3, [r3, #12]
 8000656:	4798      	blx	r3

}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	2000001c 	.word	0x2000001c

08000660 <USART1_IRQHandler>:
}



/* USART1 global interrupt                          */
void USART1_IRQHandler (void){
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	USART_confige->IRQ_FUNCTION();
 8000664:	4b02      	ldr	r3, [pc, #8]	; (8000670 <USART1_IRQHandler+0x10>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	691b      	ldr	r3, [r3, #16]
 800066a:	4798      	blx	r3

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000020 	.word	0x20000020

08000674 <USART2_IRQHandler>:
/* USART2 global interrupt                          */
void USART2_IRQHandler (void){
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	USART_confige->IRQ_FUNCTION();
 8000678:	4b02      	ldr	r3, [pc, #8]	; (8000684 <USART2_IRQHandler+0x10>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	691b      	ldr	r3, [r3, #16]
 800067e:	4798      	blx	r3

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000020 	.word	0x20000020

08000688 <USART3_IRQHandler>:
/* USART3 global interrupt                          */
void USART3_IRQHandler(void){
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	USART_confige->IRQ_FUNCTION();
 800068c:	4b02      	ldr	r3, [pc, #8]	; (8000698 <USART3_IRQHandler+0x10>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	691b      	ldr	r3, [r3, #16]
 8000692:	4798      	blx	r3

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000020 	.word	0x20000020

0800069c <__libc_init_array>:
 800069c:	b570      	push	{r4, r5, r6, lr}
 800069e:	2500      	movs	r5, #0
 80006a0:	4e0c      	ldr	r6, [pc, #48]	; (80006d4 <__libc_init_array+0x38>)
 80006a2:	4c0d      	ldr	r4, [pc, #52]	; (80006d8 <__libc_init_array+0x3c>)
 80006a4:	1ba4      	subs	r4, r4, r6
 80006a6:	10a4      	asrs	r4, r4, #2
 80006a8:	42a5      	cmp	r5, r4
 80006aa:	d109      	bne.n	80006c0 <__libc_init_array+0x24>
 80006ac:	f000 f81a 	bl	80006e4 <_init>
 80006b0:	2500      	movs	r5, #0
 80006b2:	4e0a      	ldr	r6, [pc, #40]	; (80006dc <__libc_init_array+0x40>)
 80006b4:	4c0a      	ldr	r4, [pc, #40]	; (80006e0 <__libc_init_array+0x44>)
 80006b6:	1ba4      	subs	r4, r4, r6
 80006b8:	10a4      	asrs	r4, r4, #2
 80006ba:	42a5      	cmp	r5, r4
 80006bc:	d105      	bne.n	80006ca <__libc_init_array+0x2e>
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006c4:	4798      	blx	r3
 80006c6:	3501      	adds	r5, #1
 80006c8:	e7ee      	b.n	80006a8 <__libc_init_array+0xc>
 80006ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006ce:	4798      	blx	r3
 80006d0:	3501      	adds	r5, #1
 80006d2:	e7f2      	b.n	80006ba <__libc_init_array+0x1e>
 80006d4:	08000708 	.word	0x08000708
 80006d8:	08000708 	.word	0x08000708
 80006dc:	08000708 	.word	0x08000708
 80006e0:	0800070c 	.word	0x0800070c

080006e4 <_init>:
 80006e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006e6:	bf00      	nop
 80006e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ea:	bc08      	pop	{r3}
 80006ec:	469e      	mov	lr, r3
 80006ee:	4770      	bx	lr

080006f0 <_fini>:
 80006f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006f2:	bf00      	nop
 80006f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006f6:	bc08      	pop	{r3}
 80006f8:	469e      	mov	lr, r3
 80006fa:	4770      	bx	lr
