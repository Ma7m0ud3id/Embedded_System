
RTOS_Driver.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001180  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080012b0  080012b0  000112b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012ec  080012ec  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080012ec  080012ec  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012ec  080012ec  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012ec  080012ec  000112ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012f0  080012f0  000112f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080012f4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  20000004  080012f8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  080012f8  0002057c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005de1  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f6c  00000000  00000000  00025e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001354  00000000  00000000  00026d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000318  00000000  00000000  000280d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002a0  00000000  00000000  000283e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000310e  00000000  00000000  00028688  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000379d  00000000  00000000  0002b796  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00012c8e  00000000  00000000  0002ef33  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00041bc1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a3c  00000000  00000000  00041c3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08001298 	.word	0x08001298

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08001298 	.word	0x08001298

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000194:	2b00      	cmp	r3, #0
 8000196:	db0a      	blt.n	80001ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2da      	uxtb	r2, r3
 800019c:	490c      	ldr	r1, [pc, #48]	; (80001d0 <__NVIC_SetPriority+0x4c>)
 800019e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a2:	0152      	lsls	r2, r2, #5
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	440b      	add	r3, r1
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ac:	e00a      	b.n	80001c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <__NVIC_SetPriority+0x50>)
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	3b04      	subs	r3, #4
 80001bc:	0152      	lsls	r2, r2, #5
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	440b      	add	r3, r1
 80001c2:	761a      	strb	r2, [r3, #24]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3b01      	subs	r3, #1
 80001e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001e8:	d301      	bcc.n	80001ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001ea:	2301      	movs	r3, #1
 80001ec:	e00f      	b.n	800020e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <SysTick_Config+0x40>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001f6:	2107      	movs	r1, #7
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f7ff ffc2 	bl	8000184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SysTick_Config+0x40>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <SysTick_Config+0x40>)
 8000208:	2207      	movs	r2, #7
 800020a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010

0800021c <NMI_Handler>:


unsigned char SysTick_Led=0;

void NMI_Handler(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
  while(1);
 8000220:	e7fe      	b.n	8000220 <NMI_Handler+0x4>

08000222 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0
	while(1);
 8000226:	e7fe      	b.n	8000226 <HardFault_Handler+0x4>

08000228 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	while(1);
 800022c:	e7fe      	b.n	800022c <MemManage_Handler+0x4>

0800022e <BusFault_Handler>:
}
void BusFault_Handler(void)
{
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0
	while(1);
 8000232:	e7fe      	b.n	8000232 <BusFault_Handler+0x4>

08000234 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
	while(1);
 8000238:	e7fe      	b.n	8000238 <UsageFault_Handler+0x4>

0800023a <SVC_Handler>:
		 	 anything more in the stack to know to get SVC ID
 */
__attribute((naked)) void SVC_Handler(void)
{
	// Check which stack we use before stacking MSP or PSP
	__asm("TST LR, #0x4 \n\t"
 800023a:	f01e 0f04 	tst.w	lr, #4
 800023e:	bf0c      	ite	eq
 8000240:	f3ef 8008 	mrseq	r0, MSP
 8000244:	f3ef 8009 	mrsne	r0, PSP
 8000248:	f000 bbb4 	b.w	80009b4 <OS_SVC_Services>
			"ITE EQ \n\t"
			"MRSEQ R0, MSP \n\t"
			"MRSNE R0, PSP \n\t"
			"B OS_SVC_Services");
}
 800024c:	bf00      	nop

0800024e <HW_init>:
	 * --------------------------------------------------------
	 * | CPU clock & SysTick Timer clock are 8 MHz by default |
	 * --------------------------------------------------------
	 */

void HW_init(void){
 800024e:	b580      	push	{r7, lr}
 8000250:	af00      	add	r7, sp, #0
		 * | PendSV_IRQn = -2 --> 14          | SysTick_IRQn = -1 --> 15                            |
		 * ------------------------------------------------------------------------------------------
		 */
		/*IRQn_Type PendSV_Priority = PendSV_IRQn;
		IRQn_Type SysTick_Priority = SysTick_IRQn;*/
		__NVIC_SetPriority(PendSV_IRQn, 15);
 8000252:	210f      	movs	r1, #15
 8000254:	f06f 0001 	mvn.w	r0, #1
 8000258:	f7ff ff94 	bl	8000184 <__NVIC_SetPriority>





}
 800025c:	bf00      	nop
 800025e:	bd80      	pop	{r7, pc}

08000260 <Trigger_OS_PendSV>:


void Trigger_OS_PendSV(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000264:	4b04      	ldr	r3, [pc, #16]	; (8000278 <Trigger_OS_PendSV+0x18>)
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	4a03      	ldr	r2, [pc, #12]	; (8000278 <Trigger_OS_PendSV+0x18>)
 800026a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800026e:	6053      	str	r3, [r2, #4]
}
 8000270:	bf00      	nop
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr
 8000278:	e000ed00 	.word	0xe000ed00

0800027c <OS_Start_Ticker>:

unsigned int OS_Start_Ticker(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	 * ------------------------------------
	 * | num_counts	-----> 	1 Millisecond |
	 * | num_counts = 8000 count		  |
	 * ------------------------------------
	 */
	return SysTick_Config(8000);
 8000280:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000284:	f7ff ffa8 	bl	80001d8 <SysTick_Config>
 8000288:	4603      	mov	r3, r0
}
 800028a:	4618      	mov	r0, r3
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	SysTick_Led ^= 1;
 8000294:	4b07      	ldr	r3, [pc, #28]	; (80002b4 <SysTick_Handler+0x24>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	f083 0301 	eor.w	r3, r3, #1
 800029c:	b2da      	uxtb	r2, r3
 800029e:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <SysTick_Handler+0x24>)
 80002a0:	701a      	strb	r2, [r3, #0]
	/*
	 * -----------------------------------
	 * |Decide What task should run Next |
	 * -----------------------------------
	 */
	MYRTOS_Update_TasksWaitingTime();
 80002a2:	f000 fc27 	bl	8000af4 <MYRTOS_Update_TasksWaitingTime>
	OS_Decide_What_Next();
 80002a6:	f000 fb33 	bl	8000910 <OS_Decide_What_Next>
	/*
	 * -----------------------------------------------------------
	 * |Trigger OS_PendSV (Switch Context/Restore for our Tasks) |
	 * -----------------------------------------------------------
	 */
	Trigger_OS_PendSV();
 80002aa:	f7ff ffd9 	bl	8000260 <Trigger_OS_PendSV>
}
 80002ae:	bf00      	nop
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	20000020 	.word	0x20000020

080002b8 <FIFO_init>:
 */


#include"MYRTOS_FIFO.h"
/* *********************************** */
Buffer_status FIFO_init (FIFO_Buf_t* fifo,element_type* buff , unsigned int length){
 80002b8:	b480      	push	{r7}
 80002ba:	b085      	sub	sp, #20
 80002bc:	af00      	add	r7, sp, #0
 80002be:	60f8      	str	r0, [r7, #12]
 80002c0:	60b9      	str	r1, [r7, #8]
 80002c2:	607a      	str	r2, [r7, #4]

	if(!buff )
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d101      	bne.n	80002ce <FIFO_init+0x16>
		return FIFO_NULL;
 80002ca:	2303      	movs	r3, #3
 80002cc:	e011      	b.n	80002f2 <FIFO_init+0x3a>

	fifo->base = buff ;
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	68ba      	ldr	r2, [r7, #8]
 80002d2:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base ;
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	68da      	ldr	r2, [r3, #12]
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base ;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	68da      	ldr	r2, [r3, #12]
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	687a      	ldr	r2, [r7, #4]
 80002e8:	611a      	str	r2, [r3, #16]
	fifo->counter=0;
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 80002f0:	2300      	movs	r3, #0

}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3714      	adds	r7, #20
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr

080002fc <FIFO_enqueue>:

/* *********************************** */

Buffer_status FIFO_enqueue (FIFO_Buf_t* fifo,element_type item){
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->length)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	68db      	ldr	r3, [r3, #12]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d003      	beq.n	8000316 <FIFO_enqueue+0x1a>
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	691b      	ldr	r3, [r3, #16]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d101      	bne.n	800031a <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 8000316:	2303      	movs	r3, #3
 8000318:	e02d      	b.n	8000376 <FIFO_enqueue+0x7a>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	685a      	ldr	r2, [r3, #4]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	689b      	ldr	r3, [r3, #8]
 8000322:	429a      	cmp	r2, r3
 8000324:	d107      	bne.n	8000336 <FIFO_enqueue+0x3a>
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	691b      	ldr	r3, [r3, #16]
 800032e:	429a      	cmp	r2, r3
 8000330:	d101      	bne.n	8000336 <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 8000332:	2301      	movs	r3, #1
 8000334:	e01f      	b.n	8000376 <FIFO_enqueue+0x7a>

	*(fifo->tail)=item;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	689b      	ldr	r3, [r3, #8]
 800033a:	683a      	ldr	r2, [r7, #0]
 800033c:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	1c5a      	adds	r2, r3, #1
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	601a      	str	r2, [r3, #0]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	689b      	ldr	r3, [r3, #8]
 800034c:	687a      	ldr	r2, [r7, #4]
 800034e:	68d2      	ldr	r2, [r2, #12]
 8000350:	4611      	mov	r1, r2
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	6912      	ldr	r2, [r2, #16]
 8000356:	0092      	lsls	r2, r2, #2
 8000358:	440a      	add	r2, r1
 800035a:	3a04      	subs	r2, #4
 800035c:	4293      	cmp	r3, r2
 800035e:	d104      	bne.n	800036a <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	68da      	ldr	r2, [r3, #12]
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	609a      	str	r2, [r3, #8]
 8000368:	e004      	b.n	8000374 <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	1d1a      	adds	r2, r3, #4
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 8000374:	2300      	movs	r3, #0


}
 8000376:	4618      	mov	r0, r3
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr

08000380 <FIFO_dequeue>:

/* *********************************** */

Buffer_status FIFO_dequeue (FIFO_Buf_t* fifo, element_type* item){
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->length)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	68db      	ldr	r3, [r3, #12]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d003      	beq.n	800039a <FIFO_dequeue+0x1a>
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	691b      	ldr	r3, [r3, #16]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d101      	bne.n	800039e <FIFO_dequeue+0x1e>
		return FIFO_NULL;
 800039a:	2303      	movs	r3, #3
 800039c:	e028      	b.n	80003f0 <FIFO_dequeue+0x70>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	685a      	ldr	r2, [r3, #4]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	689b      	ldr	r3, [r3, #8]
 80003a6:	429a      	cmp	r2, r3
 80003a8:	d101      	bne.n	80003ae <FIFO_dequeue+0x2e>
		return FIFO_EMPTY;
 80003aa:	2302      	movs	r3, #2
 80003ac:	e020      	b.n	80003f0 <FIFO_dequeue+0x70>



	*item = *(fifo->head);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	1e5a      	subs	r2, r3, #1
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	601a      	str	r2, [r3, #0]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	68d2      	ldr	r2, [r2, #12]
 80003ca:	4611      	mov	r1, r2
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	6912      	ldr	r2, [r2, #16]
 80003d0:	0092      	lsls	r2, r2, #2
 80003d2:	440a      	add	r2, r1
 80003d4:	3a04      	subs	r2, #4
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d104      	bne.n	80003e4 <FIFO_dequeue+0x64>
		fifo->head = fifo->base;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	68da      	ldr	r2, [r3, #12]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	e004      	b.n	80003ee <FIFO_dequeue+0x6e>
	else
		fifo->head++;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	1d1a      	adds	r2, r3, #4
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 80003ee:	2300      	movs	r3, #0
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bc80      	pop	{r7}
 80003f8:	4770      	bx	lr
	...

080003fc <PendSV_Handler>:
	 * |  R2   |
	 * |  R1   |
	 * |  R0   |	<-- Current PSP
	 * |-------|
	 */
	OS_Get_PSP_Val(OS_Control_t.Current_Task->Current_PSP_Task);
 80003fc:	4b6f      	ldr	r3, [pc, #444]	; (80005bc <PendSV_Handler+0x1c0>)
 80003fe:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000402:	f3ef 8009 	mrs	r0, PSP
 8000406:	4602      	mov	r2, r0
 8000408:	619a      	str	r2, [r3, #24]
	 * |  R10  |
	 * |  R11  |
	 * |-------|
	 */
	//using this Current_PSP (Pointer) tp store (R4 to R11)
	OS_Control_t.Current_Task->Current_PSP_Task-- ;
 800040a:	4b6c      	ldr	r3, [pc, #432]	; (80005bc <PendSV_Handler+0x1c0>)
 800040c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000410:	699a      	ldr	r2, [r3, #24]
 8000412:	3a04      	subs	r2, #4
 8000414:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r4 " : "=r" (*(OS_Control_t.Current_Task->Current_PSP_Task))  );
 8000416:	4b69      	ldr	r3, [pc, #420]	; (80005bc <PendSV_Handler+0x1c0>)
 8000418:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	4622      	mov	r2, r4
 8000420:	601a      	str	r2, [r3, #0]
	OS_Control_t.Current_Task->Current_PSP_Task-- ;
 8000422:	4b66      	ldr	r3, [pc, #408]	; (80005bc <PendSV_Handler+0x1c0>)
 8000424:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000428:	699a      	ldr	r2, [r3, #24]
 800042a:	3a04      	subs	r2, #4
 800042c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r5 " : "=r" (*(OS_Control_t.Current_Task->Current_PSP_Task))  );
 800042e:	4b63      	ldr	r3, [pc, #396]	; (80005bc <PendSV_Handler+0x1c0>)
 8000430:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	462a      	mov	r2, r5
 8000438:	601a      	str	r2, [r3, #0]
	OS_Control_t.Current_Task->Current_PSP_Task-- ;
 800043a:	4b60      	ldr	r3, [pc, #384]	; (80005bc <PendSV_Handler+0x1c0>)
 800043c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000440:	699a      	ldr	r2, [r3, #24]
 8000442:	3a04      	subs	r2, #4
 8000444:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r6 " : "=r" (*(OS_Control_t.Current_Task->Current_PSP_Task))  );
 8000446:	4b5d      	ldr	r3, [pc, #372]	; (80005bc <PendSV_Handler+0x1c0>)
 8000448:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	4632      	mov	r2, r6
 8000450:	601a      	str	r2, [r3, #0]
	OS_Control_t.Current_Task->Current_PSP_Task-- ;
 8000452:	4b5a      	ldr	r3, [pc, #360]	; (80005bc <PendSV_Handler+0x1c0>)
 8000454:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000458:	699a      	ldr	r2, [r3, #24]
 800045a:	3a04      	subs	r2, #4
 800045c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r7 " : "=r" (*(OS_Control_t.Current_Task->Current_PSP_Task))  );
 800045e:	4b57      	ldr	r3, [pc, #348]	; (80005bc <PendSV_Handler+0x1c0>)
 8000460:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	463a      	mov	r2, r7
 8000468:	601a      	str	r2, [r3, #0]
	OS_Control_t.Current_Task->Current_PSP_Task-- ;
 800046a:	4b54      	ldr	r3, [pc, #336]	; (80005bc <PendSV_Handler+0x1c0>)
 800046c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000470:	699a      	ldr	r2, [r3, #24]
 8000472:	3a04      	subs	r2, #4
 8000474:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r8 " : "=r" (*(OS_Control_t.Current_Task->Current_PSP_Task))  );
 8000476:	4b51      	ldr	r3, [pc, #324]	; (80005bc <PendSV_Handler+0x1c0>)
 8000478:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	4642      	mov	r2, r8
 8000480:	601a      	str	r2, [r3, #0]
	OS_Control_t.Current_Task->Current_PSP_Task-- ;
 8000482:	4b4e      	ldr	r3, [pc, #312]	; (80005bc <PendSV_Handler+0x1c0>)
 8000484:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000488:	699a      	ldr	r2, [r3, #24]
 800048a:	3a04      	subs	r2, #4
 800048c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r9 " : "=r" (*(OS_Control_t.Current_Task->Current_PSP_Task))  );
 800048e:	4b4b      	ldr	r3, [pc, #300]	; (80005bc <PendSV_Handler+0x1c0>)
 8000490:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	464a      	mov	r2, r9
 8000498:	601a      	str	r2, [r3, #0]
	OS_Control_t.Current_Task->Current_PSP_Task-- ;
 800049a:	4b48      	ldr	r3, [pc, #288]	; (80005bc <PendSV_Handler+0x1c0>)
 800049c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004a0:	699a      	ldr	r2, [r3, #24]
 80004a2:	3a04      	subs	r2, #4
 80004a4:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r10 " : "=r" (*(OS_Control_t.Current_Task->Current_PSP_Task))  );
 80004a6:	4b45      	ldr	r3, [pc, #276]	; (80005bc <PendSV_Handler+0x1c0>)
 80004a8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	4652      	mov	r2, sl
 80004b0:	601a      	str	r2, [r3, #0]
	OS_Control_t.Current_Task->Current_PSP_Task-- ;
 80004b2:	4b42      	ldr	r3, [pc, #264]	; (80005bc <PendSV_Handler+0x1c0>)
 80004b4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004b8:	699a      	ldr	r2, [r3, #24]
 80004ba:	3a04      	subs	r2, #4
 80004bc:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r11 " : "=r" (*(OS_Control_t.Current_Task->Current_PSP_Task))  );
 80004be:	4b3f      	ldr	r3, [pc, #252]	; (80005bc <PendSV_Handler+0x1c0>)
 80004c0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	465a      	mov	r2, fp
 80004c8:	601a      	str	r2, [r3, #0]
	/*
	 * ----------------------------------------
	 * | Restore The Context of the Next task |
	 * ----------------------------------------
	 */
	if (OS_Control_t.Next_Task != NULL){
 80004ca:	4b3c      	ldr	r3, [pc, #240]	; (80005bc <PendSV_Handler+0x1c0>)
 80004cc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d009      	beq.n	80004e8 <PendSV_Handler+0xec>
	   OS_Control_t.Current_Task = OS_Control_t.Next_Task;
 80004d4:	4b39      	ldr	r3, [pc, #228]	; (80005bc <PendSV_Handler+0x1c0>)
 80004d6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80004da:	4a38      	ldr	r2, [pc, #224]	; (80005bc <PendSV_Handler+0x1c0>)
 80004dc:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	   OS_Control_t.Next_Task = NULL;
 80004e0:	4b36      	ldr	r3, [pc, #216]	; (80005bc <PendSV_Handler+0x1c0>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	 * |  R9   |
	 * |  R10  |
	 * |  R11  |		<-- Current_PSP_Task
	 * |-------|
	 */
	__asm volatile("mov r11,%0 " : : "r" (*(OS_Control_t.Current_Task->Current_PSP_Task))  );
 80004e8:	4b34      	ldr	r3, [pc, #208]	; (80005bc <PendSV_Handler+0x1c0>)
 80004ea:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	469b      	mov	fp, r3
	OS_Control_t.Current_Task->Current_PSP_Task++ ;
 80004f4:	4b31      	ldr	r3, [pc, #196]	; (80005bc <PendSV_Handler+0x1c0>)
 80004f6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004fa:	699a      	ldr	r2, [r3, #24]
 80004fc:	3204      	adds	r2, #4
 80004fe:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r10,%0 " : : "r" (*(OS_Control_t.Current_Task->Current_PSP_Task))  );
 8000500:	4b2e      	ldr	r3, [pc, #184]	; (80005bc <PendSV_Handler+0x1c0>)
 8000502:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	469a      	mov	sl, r3
	OS_Control_t.Current_Task->Current_PSP_Task++ ;
 800050c:	4b2b      	ldr	r3, [pc, #172]	; (80005bc <PendSV_Handler+0x1c0>)
 800050e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000512:	699a      	ldr	r2, [r3, #24]
 8000514:	3204      	adds	r2, #4
 8000516:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r9,%0 " : : "r" (*(OS_Control_t.Current_Task->Current_PSP_Task))  );
 8000518:	4b28      	ldr	r3, [pc, #160]	; (80005bc <PendSV_Handler+0x1c0>)
 800051a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4699      	mov	r9, r3
	OS_Control_t.Current_Task->Current_PSP_Task++ ;
 8000524:	4b25      	ldr	r3, [pc, #148]	; (80005bc <PendSV_Handler+0x1c0>)
 8000526:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800052a:	699a      	ldr	r2, [r3, #24]
 800052c:	3204      	adds	r2, #4
 800052e:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r8,%0 " : : "r" (*(OS_Control_t.Current_Task->Current_PSP_Task))  );
 8000530:	4b22      	ldr	r3, [pc, #136]	; (80005bc <PendSV_Handler+0x1c0>)
 8000532:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4698      	mov	r8, r3
	OS_Control_t.Current_Task->Current_PSP_Task++ ;
 800053c:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <PendSV_Handler+0x1c0>)
 800053e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000542:	699a      	ldr	r2, [r3, #24]
 8000544:	3204      	adds	r2, #4
 8000546:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r7,%0 " : : "r" (*(OS_Control_t.Current_Task->Current_PSP_Task))  );
 8000548:	4b1c      	ldr	r3, [pc, #112]	; (80005bc <PendSV_Handler+0x1c0>)
 800054a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	461f      	mov	r7, r3
	OS_Control_t.Current_Task->Current_PSP_Task++ ;
 8000554:	4b19      	ldr	r3, [pc, #100]	; (80005bc <PendSV_Handler+0x1c0>)
 8000556:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800055a:	699a      	ldr	r2, [r3, #24]
 800055c:	3204      	adds	r2, #4
 800055e:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r6,%0 " : : "r" (*(OS_Control_t.Current_Task->Current_PSP_Task))  );
 8000560:	4b16      	ldr	r3, [pc, #88]	; (80005bc <PendSV_Handler+0x1c0>)
 8000562:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	461e      	mov	r6, r3
	OS_Control_t.Current_Task->Current_PSP_Task++ ;
 800056c:	4b13      	ldr	r3, [pc, #76]	; (80005bc <PendSV_Handler+0x1c0>)
 800056e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000572:	699a      	ldr	r2, [r3, #24]
 8000574:	3204      	adds	r2, #4
 8000576:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r5,%0 " : : "r" (*(OS_Control_t.Current_Task->Current_PSP_Task))  );
 8000578:	4b10      	ldr	r3, [pc, #64]	; (80005bc <PendSV_Handler+0x1c0>)
 800057a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	461d      	mov	r5, r3
	OS_Control_t.Current_Task->Current_PSP_Task++ ;
 8000584:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <PendSV_Handler+0x1c0>)
 8000586:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800058a:	699a      	ldr	r2, [r3, #24]
 800058c:	3204      	adds	r2, #4
 800058e:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r4,%0 " : : "r" (*(OS_Control_t.Current_Task->Current_PSP_Task))  );
 8000590:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <PendSV_Handler+0x1c0>)
 8000592:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	461c      	mov	r4, r3
	OS_Control_t.Current_Task->Current_PSP_Task++ ;
 800059c:	4b07      	ldr	r3, [pc, #28]	; (80005bc <PendSV_Handler+0x1c0>)
 800059e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005a2:	699a      	ldr	r2, [r3, #24]
 80005a4:	3204      	adds	r2, #4
 80005a6:	619a      	str	r2, [r3, #24]

	/*
	 * 2.Set PSP with Current_PSP_Task
	 */
	OS_Set_PSP_Val(OS_Control_t.Current_Task->Current_PSP_Task);
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <PendSV_Handler+0x1c0>)
 80005aa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f380 8809 	msr	PSP, r0

	/*
	 * 4. Branch to LR to return from Interrupt handler
	 * LR --> contain EXC_RETURN Code
	 */
	__asm volatile("BX LR");
 80005b6:	4770      	bx	lr
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	20000040 	.word	0x20000040

080005c0 <IDLE_TASK_FUNC>:


unsigned char IdleTaskLed ;
void IDLE_TASK_FUNC(void){
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0


	while(1)
		{
		    IdleTaskLed ^= 1 ;
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <IDLE_TASK_FUNC+0x18>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	f083 0301 	eor.w	r3, r3, #1
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4b02      	ldr	r3, [pc, #8]	; (80005d8 <IDLE_TASK_FUNC+0x18>)
 80005d0:	701a      	strb	r2, [r3, #0]
			__asm("NOP");
 80005d2:	bf00      	nop
		    IdleTaskLed ^= 1 ;
 80005d4:	e7f6      	b.n	80005c4 <IDLE_TASK_FUNC+0x4>
 80005d6:	bf00      	nop
 80005d8:	20000230 	.word	0x20000230

080005dc <MyRTOS_Create_MainStack>:
		}
}



void MyRTOS_Create_MainStack(){
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

	OS_Control_t._S_MSP_OS=(unsigned int)&(_estack);
 80005e0:	4a0b      	ldr	r2, [pc, #44]	; (8000610 <MyRTOS_Create_MainStack+0x34>)
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <MyRTOS_Create_MainStack+0x38>)
 80005e4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control_t._E_MSP_OS= OS_Control_t._S_MSP_OS-Main_Stack_Size;
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <MyRTOS_Create_MainStack+0x38>)
 80005ea:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80005ee:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 80005f2:	4a08      	ldr	r2, [pc, #32]	; (8000614 <MyRTOS_Create_MainStack+0x38>)
 80005f4:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194

	OS_Control_t.PSP_Task_Locator=OS_Control_t._E_MSP_OS-8;
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <MyRTOS_Create_MainStack+0x38>)
 80005fa:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80005fe:	3b08      	subs	r3, #8
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <MyRTOS_Create_MainStack+0x38>)
 8000602:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20005000 	.word	0x20005000
 8000614:	20000040 	.word	0x20000040

08000618 <MYRTOS_init>:


MYRTOS_errorID MYRTOS_init(void){
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0


	MYRTOS_errorID MYRTOS_init_Error=ES_NoError;
 800061e:	2300      	movs	r3, #0
 8000620:	71fb      	strb	r3, [r7, #7]


	//Updata OS Mode --> OS_Suspend
	OS_Control_t.OS_State = OS_Suspend;
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MYRTOS_init+0x5c>)
 8000624:	2200      	movs	r2, #0
 8000626:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//Specify the Main Stack for OS
	MyRTOS_Create_MainStack();
 800062a:	f7ff ffd7 	bl	80005dc <MyRTOS_Create_MainStack>


	if(FIFO_init(&Ready_Queue, Ready_Queue_FIFO, 100) != FIFO_NO_ERROR)
 800062e:	2264      	movs	r2, #100	; 0x64
 8000630:	4911      	ldr	r1, [pc, #68]	; (8000678 <MYRTOS_init+0x60>)
 8000632:	4812      	ldr	r0, [pc, #72]	; (800067c <MYRTOS_init+0x64>)
 8000634:	f7ff fe40 	bl	80002b8 <FIFO_init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MYRTOS_init+0x2a>
	{
		MYRTOS_init_Error = ES_Ready_Queue_Init_Error;
 800063e:	2301      	movs	r3, #1
 8000640:	71fb      	strb	r3, [r7, #7]
	}

	//Configure IDLE Task
	strcpy(MYRTOS_IDLE_TASK.Task_Name,"IDEL TASK");
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MYRTOS_init+0x68>)
 8000644:	4a0f      	ldr	r2, [pc, #60]	; (8000684 <MYRTOS_init+0x6c>)
 8000646:	ca07      	ldmia	r2, {r0, r1, r2}
 8000648:	c303      	stmia	r3!, {r0, r1}
 800064a:	801a      	strh	r2, [r3, #0]
	MYRTOS_IDLE_TASK.Task_Priority=255;
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MYRTOS_init+0x70>)
 800064e:	22ff      	movs	r2, #255	; 0xff
 8000650:	711a      	strb	r2, [r3, #4]
	MYRTOS_IDLE_TASK.PF_Task_Entry=IDLE_TASK_FUNC;
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <MYRTOS_init+0x70>)
 8000654:	4a0d      	ldr	r2, [pc, #52]	; (800068c <MYRTOS_init+0x74>)
 8000656:	609a      	str	r2, [r3, #8]
	MYRTOS_IDLE_TASK.Task_Stack_Size=300;
 8000658:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <MYRTOS_init+0x70>)
 800065a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800065e:	601a      	str	r2, [r3, #0]

	MYRTOS_init_Error=MYRTOS_Create_Task(&MYRTOS_IDLE_TASK);
 8000660:	4809      	ldr	r0, [pc, #36]	; (8000688 <MYRTOS_init+0x70>)
 8000662:	f000 f853 	bl	800070c <MYRTOS_Create_Task>
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]





	return MYRTOS_init_Error;
 800066a:	79fb      	ldrb	r3, [r7, #7]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000040 	.word	0x20000040
 8000678:	20000234 	.word	0x20000234
 800067c:	2000002c 	.word	0x2000002c
 8000680:	20000208 	.word	0x20000208
 8000684:	080012b0 	.word	0x080012b0
 8000688:	200001ec 	.word	0x200001ec
 800068c:	080005c1 	.word	0x080005c1

08000690 <MYRTOS_Create_STack_Task>:



void MYRTOS_Create_STack_Task(Task_Ref_t* Task_Ref_CFG){
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
		 * |  R10  |
		 * |  R11  |
		 * |-------|
		 */

	Task_Ref_CFG->Current_PSP_Task = (unsigned int *)(Task_Ref_CFG->_S_PSP_Task);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	461a      	mov	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	619a      	str	r2, [r3, #24]

	Task_Ref_CFG->Current_PSP_Task--;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	1f1a      	subs	r2, r3, #4
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	619a      	str	r2, [r3, #24]
	*(Task_Ref_CFG->Current_PSP_Task) = 0x01000000;	//DUMMY xPSR --> you must put T = 1 to avoid Bus Fault (Thumb2 Technology)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006b4:	601a      	str	r2, [r3, #0]

	Task_Ref_CFG->Current_PSP_Task--;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	1f1a      	subs	r2, r3, #4
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	619a      	str	r2, [r3, #24]
	*(Task_Ref_CFG->Current_PSP_Task) = (unsigned int)(Task_Ref_CFG->PF_Task_Entry);	//DUMMY PC
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	689a      	ldr	r2, [r3, #8]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	601a      	str	r2, [r3, #0]

	Task_Ref_CFG->Current_PSP_Task--;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	1f1a      	subs	r2, r3, #4
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	619a      	str	r2, [r3, #24]
	*(Task_Ref_CFG->Current_PSP_Task) = 0xFFFFFFFD;	//DUMMY LR --> (EXECUTION RETURN CODE --> Thread Mode, PSP)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f06f 0202 	mvn.w	r2, #2
 80006dc:	601a      	str	r2, [r3, #0]

	//Still 13 General Purpose Register --> We dummy them to 0
	for(int i = 0; i < 13; i++)
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	e00b      	b.n	80006fc <MYRTOS_Create_STack_Task+0x6c>
	{
		Task_Ref_CFG->Current_PSP_Task--;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	1f1a      	subs	r2, r3, #4
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	619a      	str	r2, [r3, #24]
		*(Task_Ref_CFG->Current_PSP_Task) = 0;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 13; i++)
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	3301      	adds	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	2b0c      	cmp	r3, #12
 8000700:	ddf0      	ble.n	80006e4 <MYRTOS_Create_STack_Task+0x54>





}
 8000702:	bf00      	nop
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr

0800070c <MYRTOS_Create_Task>:


MYRTOS_errorID MYRTOS_Create_Task(Task_Ref_t* Task_Ref_Config){
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]

	MYRTOS_errorID Local_enuErrorState = ES_NoError;
 8000714:	2300      	movs	r3, #0
 8000716:	73fb      	strb	r3, [r7, #15]
		 * | _eheap    |
		 * -------------
		 */

	// Check if task stack size exceeded the PSP stack size
		if((OS_Control_t.PSP_Task_Locator - Task_Ref_Config->Task_Stack_Size) < (unsigned int)(&(_eheap)))
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MYRTOS_Create_Task+0x7c>)
 800071a:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	4a19      	ldr	r2, [pc, #100]	; (800078c <MYRTOS_Create_Task+0x80>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d201      	bcs.n	800072e <MYRTOS_Create_Task+0x22>
		{

		     Local_enuErrorState = ES_Error_Task_Exceeded_Stack_Size;
 800072a:	2302      	movs	r3, #2
 800072c:	73fb      	strb	r3, [r7, #15]
		}

		if(Local_enuErrorState == ES_NoError)
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d111      	bne.n	8000758 <MYRTOS_Create_Task+0x4c>
		{
			//Create Its Own PSP Stack
			Task_Ref_Config->_S_PSP_Task = OS_Control_t.PSP_Task_Locator;
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MYRTOS_Create_Task+0x7c>)
 8000736:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	611a      	str	r2, [r3, #16]
			Task_Ref_Config->_E_PSP_Task = (Task_Ref_Config->_S_PSP_Task - Task_Ref_Config->Task_Stack_Size);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	691a      	ldr	r2, [r3, #16]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	1ad2      	subs	r2, r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	615a      	str	r2, [r3, #20]

			//Aligned 8 bytes spaces between PSP (Task) and PSP (Other Task)
			OS_Control_t.PSP_Task_Locator = (Task_Ref_Config->_E_PSP_Task - 8);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	695b      	ldr	r3, [r3, #20]
 8000750:	3b08      	subs	r3, #8
 8000752:	4a0d      	ldr	r2, [pc, #52]	; (8000788 <MYRTOS_Create_Task+0x7c>)
 8000754:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
		}

		//Initialize PSP Task Stack
		MYRTOS_Create_STack_Task(Task_Ref_Config);
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff ff99 	bl	8000690 <MYRTOS_Create_STack_Task>

		//update sch Table
		OS_Control_t.OS_Tasks[OS_Control_t.No_of_Active_Tasks++] = Task_Ref_Config;
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <MYRTOS_Create_Task+0x7c>)
 8000760:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000764:	1c5a      	adds	r2, r3, #1
 8000766:	4908      	ldr	r1, [pc, #32]	; (8000788 <MYRTOS_Create_Task+0x7c>)
 8000768:	f8c1 219c 	str.w	r2, [r1, #412]	; 0x19c
 800076c:	4906      	ldr	r1, [pc, #24]	; (8000788 <MYRTOS_Create_Task+0x7c>)
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//Task State Update --> Suspend State
		Task_Ref_Config->Task_State = Suspend_State;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2200      	movs	r2, #0
 8000778:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a



		return Local_enuErrorState;
 800077c:	7bfb      	ldrb	r3, [r7, #15]
}
 800077e:	4618      	mov	r0, r3
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000040 	.word	0x20000040
 800078c:	20000b80 	.word	0x20000b80

08000790 <Bubble_Sort_Tasks>:



void Bubble_Sort_Tasks(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
	unsigned int i, j, Num_Tasks;
	Task_Ref_t *Temp;

	Num_Tasks = OS_Control_t.No_of_Active_Tasks;
 8000796:	4b20      	ldr	r3, [pc, #128]	; (8000818 <Bubble_Sort_Tasks+0x88>)
 8000798:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800079c:	607b      	str	r3, [r7, #4]

	for(i = 0; i < Num_Tasks; i++)
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	e030      	b.n	8000806 <Bubble_Sort_Tasks+0x76>
	{
		for(j = 0; j < Num_Tasks - i - 1; j++)
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	e023      	b.n	80007f2 <Bubble_Sort_Tasks+0x62>
		{
			if(OS_Control_t.OS_Tasks[j]->Task_Priority > OS_Control_t.OS_Tasks[j+1]->Task_Priority)
 80007aa:	4a1b      	ldr	r2, [pc, #108]	; (8000818 <Bubble_Sort_Tasks+0x88>)
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b2:	791a      	ldrb	r2, [r3, #4]
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	3301      	adds	r3, #1
 80007b8:	4917      	ldr	r1, [pc, #92]	; (8000818 <Bubble_Sort_Tasks+0x88>)
 80007ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007be:	791b      	ldrb	r3, [r3, #4]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d913      	bls.n	80007ec <Bubble_Sort_Tasks+0x5c>
			{
				Temp = OS_Control_t.OS_Tasks[j];
 80007c4:	4a14      	ldr	r2, [pc, #80]	; (8000818 <Bubble_Sort_Tasks+0x88>)
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007cc:	603b      	str	r3, [r7, #0]
				OS_Control_t.OS_Tasks[j] = OS_Control_t.OS_Tasks[j+1];
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	3301      	adds	r3, #1
 80007d2:	4a11      	ldr	r2, [pc, #68]	; (8000818 <Bubble_Sort_Tasks+0x88>)
 80007d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007d8:	490f      	ldr	r1, [pc, #60]	; (8000818 <Bubble_Sort_Tasks+0x88>)
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control_t.OS_Tasks[j+1] = Temp;
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	3301      	adds	r3, #1
 80007e4:	490c      	ldr	r1, [pc, #48]	; (8000818 <Bubble_Sort_Tasks+0x88>)
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(j = 0; j < Num_Tasks - i - 1; j++)
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	3301      	adds	r3, #1
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	1ad3      	subs	r3, r2, r3
 80007f8:	3b01      	subs	r3, #1
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d3d4      	bcc.n	80007aa <Bubble_Sort_Tasks+0x1a>
	for(i = 0; i < Num_Tasks; i++)
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	3301      	adds	r3, #1
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fa      	ldr	r2, [r7, #12]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	429a      	cmp	r2, r3
 800080c:	d3ca      	bcc.n	80007a4 <Bubble_Sort_Tasks+0x14>
			}
		}
	}
}
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	20000040 	.word	0x20000040

0800081c <MyRTOS_Reorder_Scheduler_Tabel>:



MYRTOS_errorID MyRTOS_Reorder_Scheduler_Tabel(void){
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
	MYRTOS_errorID Local_enuErrorState = ES_NoError;
 8000822:	2300      	movs	r3, #0
 8000824:	71fb      	strb	r3, [r7, #7]

	//Sort Scheduler Table (OS_Control --> Tasks[100]) --> with Bubble Sort
		//Base on Priority --> (high priority(low number) then low priority(high number))
		Bubble_Sort_Tasks();
 8000826:	f7ff ffb3 	bl	8000790 <Bubble_Sort_Tasks>

	return Local_enuErrorState;
 800082a:	79fb      	ldrb	r3, [r7, #7]
}
 800082c:	4618      	mov	r0, r3
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <MyRTOS_Update_Ready_Queue>:


MYRTOS_errorID MyRTOS_Update_Ready_Queue(void){
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
	MYRTOS_errorID Local_enuErrorState = ES_NoError;
 800083a:	2300      	movs	r3, #0
 800083c:	75fb      	strb	r3, [r7, #23]

	Task_Ref_t *Top_Ready_Queue = NULL;
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
		unsigned int i = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]

		Task_Ref_t *P_Curr_Task = NULL;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
		Task_Ref_t *P_Next_Task = NULL;
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]

		//Free Ready Queue
		while(FIFO_dequeue(&Ready_Queue, &Top_Ready_Queue) != FIFO_EMPTY);
 800084e:	bf00      	nop
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	4619      	mov	r1, r3
 8000854:	482c      	ldr	r0, [pc, #176]	; (8000908 <MyRTOS_Update_Ready_Queue+0xd4>)
 8000856:	f7ff fd93 	bl	8000380 <FIFO_dequeue>
 800085a:	4603      	mov	r3, r0
 800085c:	2b02      	cmp	r3, #2
 800085e:	d1f7      	bne.n	8000850 <MyRTOS_Update_Ready_Queue+0x1c>

		//Update Ready Queue
		while(i < OS_Control_t.No_of_Active_Tasks)
 8000860:	e047      	b.n	80008f2 <MyRTOS_Update_Ready_Queue+0xbe>
		{
			P_Curr_Task = OS_Control_t.OS_Tasks[i];
 8000862:	4a2a      	ldr	r2, [pc, #168]	; (800090c <MyRTOS_Update_Ready_Queue+0xd8>)
 8000864:	693b      	ldr	r3, [r7, #16]
 8000866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800086a:	60fb      	str	r3, [r7, #12]
			P_Next_Task = OS_Control_t.OS_Tasks[i+1];
 800086c:	693b      	ldr	r3, [r7, #16]
 800086e:	3301      	adds	r3, #1
 8000870:	4a26      	ldr	r2, [pc, #152]	; (800090c <MyRTOS_Update_Ready_Queue+0xd8>)
 8000872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000876:	60bb      	str	r3, [r7, #8]
			 * |----------|----------|
			 * |    0     |    0     |
			 * |----------|----------|
			 */

			if(P_Curr_Task->Task_State !=Suspend_State){
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800087e:	2b00      	cmp	r3, #0
 8000880:	d034      	beq.n	80008ec <MyRTOS_Update_Ready_Queue+0xb8>



				//This if we reach to the end of the scheduler table
				if(P_Next_Task->Task_State==Suspend_State){
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000888:	2b00      	cmp	r3, #0
 800088a:	d108      	bne.n	800089e <MyRTOS_Update_Ready_Queue+0x6a>
					FIFO_enqueue(&Ready_Queue, P_Curr_Task);
 800088c:	68f9      	ldr	r1, [r7, #12]
 800088e:	481e      	ldr	r0, [pc, #120]	; (8000908 <MyRTOS_Update_Ready_Queue+0xd4>)
 8000890:	f7ff fd34 	bl	80002fc <FIFO_enqueue>
					P_Curr_Task->Task_State = Ready_State;
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	2202      	movs	r2, #2
 8000898:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
					break;
 800089c:	e02f      	b.n	80008fe <MyRTOS_Update_Ready_Queue+0xca>
				}
				if(P_Curr_Task->Task_Priority < P_Next_Task->Task_Priority)
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	791a      	ldrb	r2, [r3, #4]
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	791b      	ldrb	r3, [r3, #4]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d208      	bcs.n	80008bc <MyRTOS_Update_Ready_Queue+0x88>
				{
					//This if the next task is low priority from the current then we push current to ready queue
					FIFO_enqueue(&Ready_Queue, P_Curr_Task);
 80008aa:	68f9      	ldr	r1, [r7, #12]
 80008ac:	4816      	ldr	r0, [pc, #88]	; (8000908 <MyRTOS_Update_Ready_Queue+0xd4>)
 80008ae:	f7ff fd25 	bl	80002fc <FIFO_enqueue>
					P_Curr_Task->Task_State = Ready_State;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	2202      	movs	r2, #2
 80008b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
					break;
 80008ba:	e020      	b.n	80008fe <MyRTOS_Update_Ready_Queue+0xca>
				}
				else if(P_Curr_Task->Task_Priority == P_Next_Task->Task_Priority)
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	791a      	ldrb	r2, [r3, #4]
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	791b      	ldrb	r3, [r3, #4]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d108      	bne.n	80008da <MyRTOS_Update_Ready_Queue+0xa6>
				{
					//This if the next task is equal the current task in priority then we push current to ready queue
					//and we will continue to the relation of next task with its next
					FIFO_enqueue(&Ready_Queue, P_Curr_Task);
 80008c8:	68f9      	ldr	r1, [r7, #12]
 80008ca:	480f      	ldr	r0, [pc, #60]	; (8000908 <MyRTOS_Update_Ready_Queue+0xd4>)
 80008cc:	f7ff fd16 	bl	80002fc <FIFO_enqueue>
					P_Curr_Task->Task_State = Ready_State;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	2202      	movs	r2, #2
 80008d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80008d8:	e008      	b.n	80008ec <MyRTOS_Update_Ready_Queue+0xb8>
				}
				else if(P_Curr_Task->Task_Priority > P_Next_Task->Task_Priority)
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	791a      	ldrb	r2, [r3, #4]
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	791b      	ldrb	r3, [r3, #4]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d902      	bls.n	80008ec <MyRTOS_Update_Ready_Queue+0xb8>
				{
					//This can't happen because we sort the scheduler table with bubble sort
					Local_enuErrorState = ES_Error_Bubble_Sort;
 80008e6:	2303      	movs	r3, #3
 80008e8:	75fb      	strb	r3, [r7, #23]
					break ;
 80008ea:	e008      	b.n	80008fe <MyRTOS_Update_Ready_Queue+0xca>
				}
			}

			i++;
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	3301      	adds	r3, #1
 80008f0:	613b      	str	r3, [r7, #16]
		while(i < OS_Control_t.No_of_Active_Tasks)
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <MyRTOS_Update_Ready_Queue+0xd8>)
 80008f4:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d3b1      	bcc.n	8000862 <MyRTOS_Update_Ready_Queue+0x2e>
		}



	return Local_enuErrorState;
 80008fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000900:	4618      	mov	r0, r3
 8000902:	3718      	adds	r7, #24
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	2000002c 	.word	0x2000002c
 800090c:	20000040 	.word	0x20000040

08000910 <OS_Decide_What_Next>:


void OS_Decide_What_Next(void){
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0

	//This in case The Queue is empty and OS_Control_t.Current_Task->Task_State != Suspend_State
	//This happen when we have only one task and this task is interrupting by svc
	//we need to continue in running it
	if(Ready_Queue.counter == 0 && OS_Control_t.Current_Task->Task_State != Suspend_State)
 8000914:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <OS_Decide_What_Next+0x98>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d11a      	bne.n	8000952 <OS_Decide_What_Next+0x42>
 800091c:	4b23      	ldr	r3, [pc, #140]	; (80009ac <OS_Decide_What_Next+0x9c>)
 800091e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000922:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000926:	2b00      	cmp	r3, #0
 8000928:	d013      	beq.n	8000952 <OS_Decide_What_Next+0x42>
	{
		OS_Control_t.Current_Task->Task_State = Running_State;
 800092a:	4b20      	ldr	r3, [pc, #128]	; (80009ac <OS_Decide_What_Next+0x9c>)
 800092c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000930:	2203      	movs	r2, #3
 8000932:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a




		//add Task to Ready Queue to run it till the task is terminate
		FIFO_enqueue(&Ready_Queue, OS_Control_t.Current_Task);
 8000936:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <OS_Decide_What_Next+0x9c>)
 8000938:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800093c:	4619      	mov	r1, r3
 800093e:	481a      	ldr	r0, [pc, #104]	; (80009a8 <OS_Decide_What_Next+0x98>)
 8000940:	f7ff fcdc 	bl	80002fc <FIFO_enqueue>
		OS_Control_t.Next_Task = OS_Control_t.Current_Task;
 8000944:	4b19      	ldr	r3, [pc, #100]	; (80009ac <OS_Decide_What_Next+0x9c>)
 8000946:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800094a:	4a18      	ldr	r2, [pc, #96]	; (80009ac <OS_Decide_What_Next+0x9c>)
 800094c:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
	}




}
 8000950:	e027      	b.n	80009a2 <OS_Decide_What_Next+0x92>
		FIFO_dequeue(&Ready_Queue, &OS_Control_t.Next_Task);
 8000952:	4917      	ldr	r1, [pc, #92]	; (80009b0 <OS_Decide_What_Next+0xa0>)
 8000954:	4814      	ldr	r0, [pc, #80]	; (80009a8 <OS_Decide_What_Next+0x98>)
 8000956:	f7ff fd13 	bl	8000380 <FIFO_dequeue>
		OS_Control_t.Next_Task->Task_State = Running_State;
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <OS_Decide_What_Next+0x9c>)
 800095c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000960:	2203      	movs	r2, #3
 8000962:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		if((OS_Control_t.Current_Task->Task_Priority == OS_Control_t.Next_Task->Task_Priority) && (OS_Control_t.Current_Task->Task_State != Suspend_State))
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <OS_Decide_What_Next+0x9c>)
 8000968:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800096c:	791a      	ldrb	r2, [r3, #4]
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <OS_Decide_What_Next+0x9c>)
 8000970:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000974:	791b      	ldrb	r3, [r3, #4]
 8000976:	429a      	cmp	r2, r3
 8000978:	d113      	bne.n	80009a2 <OS_Decide_What_Next+0x92>
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <OS_Decide_What_Next+0x9c>)
 800097c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000980:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000984:	2b00      	cmp	r3, #0
 8000986:	d00c      	beq.n	80009a2 <OS_Decide_What_Next+0x92>
			FIFO_enqueue(&Ready_Queue, OS_Control_t.Current_Task);
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <OS_Decide_What_Next+0x9c>)
 800098a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	; (80009a8 <OS_Decide_What_Next+0x98>)
 8000992:	f7ff fcb3 	bl	80002fc <FIFO_enqueue>
			OS_Control_t.Current_Task->Task_State = Ready_State;
 8000996:	4b05      	ldr	r3, [pc, #20]	; (80009ac <OS_Decide_What_Next+0x9c>)
 8000998:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800099c:	2202      	movs	r2, #2
 800099e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	2000002c 	.word	0x2000002c
 80009ac:	20000040 	.word	0x20000040
 80009b0:	200001e4 	.word	0x200001e4

080009b4 <OS_SVC_Services>:



MYRTOS_errorID OS_SVC_Services(unsigned int *Stack_Pointer)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	MYRTOS_errorID Local_enuErrorState = ES_NoError;
 80009bc:	2300      	movs	r3, #0
 80009be:	73fb      	strb	r3, [r7, #15]
	unsigned char SVC_ID;

	SVC_ID = *((unsigned char *)(((unsigned char *)Stack_Pointer[6])-2));
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3318      	adds	r3, #24
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	3b02      	subs	r3, #2
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	73bb      	strb	r3, [r7, #14]



	if(SVC_ID==SVC_Activate_Task || SVC_ID==SVC_Terminate_Task ){
 80009cc:	7bbb      	ldrb	r3, [r7, #14]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d002      	beq.n	80009d8 <OS_SVC_Services+0x24>
 80009d2:	7bbb      	ldrb	r3, [r7, #14]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d124      	bne.n	8000a22 <OS_SVC_Services+0x6e>
		Local_enuErrorState = MyRTOS_Reorder_Scheduler_Tabel();
 80009d8:	f7ff ff20 	bl	800081c <MyRTOS_Reorder_Scheduler_Tabel>
 80009dc:	4603      	mov	r3, r0
 80009de:	73fb      	strb	r3, [r7, #15]
		if(Local_enuErrorState !=ES_NoError){
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d000      	beq.n	80009e8 <OS_SVC_Services+0x34>
			while(1);
 80009e6:	e7fe      	b.n	80009e6 <OS_SVC_Services+0x32>
		}

		Local_enuErrorState = MyRTOS_Update_Ready_Queue();
 80009e8:	f7ff ff24 	bl	8000834 <MyRTOS_Update_Ready_Queue>
 80009ec:	4603      	mov	r3, r0
 80009ee:	73fb      	strb	r3, [r7, #15]
		if(Local_enuErrorState !=ES_NoError){
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d000      	beq.n	80009f8 <OS_SVC_Services+0x44>
			while(1);
 80009f6:	e7fe      	b.n	80009f6 <OS_SVC_Services+0x42>
		}
		if(OS_Control_t.OS_State == OS_Running)
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <OS_SVC_Services+0xa0>)
 80009fa:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d122      	bne.n	8000a48 <OS_SVC_Services+0x94>
		{
			if(strcmp(OS_Control_t.Current_Task->Task_Name, "IDEL TASK") != 0)
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <OS_SVC_Services+0xa0>)
 8000a04:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a08:	331c      	adds	r3, #28
 8000a0a:	4913      	ldr	r1, [pc, #76]	; (8000a58 <OS_SVC_Services+0xa4>)
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fbaf 	bl	8000170 <strcmp>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d017      	beq.n	8000a48 <OS_SVC_Services+0x94>
			{
				//Decide What task should run Next
				OS_Decide_What_Next();
 8000a18:	f7ff ff7a 	bl	8000910 <OS_Decide_What_Next>

				//Trigger OS_PendSV (Switch Context/Restore for our Tasks)
				Trigger_OS_PendSV();
 8000a1c:	f7ff fc20 	bl	8000260 <Trigger_OS_PendSV>
		if(OS_Control_t.OS_State == OS_Running)
 8000a20:	e012      	b.n	8000a48 <OS_SVC_Services+0x94>
			}
		}


	}else if(SVC_ID==SVC_Task_Waiting_Time){
 8000a22:	7bbb      	ldrb	r3, [r7, #14]
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	d110      	bne.n	8000a4a <OS_SVC_Services+0x96>

		Local_enuErrorState = MyRTOS_Reorder_Scheduler_Tabel();
 8000a28:	f7ff fef8 	bl	800081c <MyRTOS_Reorder_Scheduler_Tabel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	73fb      	strb	r3, [r7, #15]
		if(Local_enuErrorState !=ES_NoError){
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d000      	beq.n	8000a38 <OS_SVC_Services+0x84>
			while(1);
 8000a36:	e7fe      	b.n	8000a36 <OS_SVC_Services+0x82>
		}

		Local_enuErrorState = MyRTOS_Update_Ready_Queue();
 8000a38:	f7ff fefc 	bl	8000834 <MyRTOS_Update_Ready_Queue>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	73fb      	strb	r3, [r7, #15]
		if(Local_enuErrorState !=ES_NoError){
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <OS_SVC_Services+0x96>
			while(1);
 8000a46:	e7fe      	b.n	8000a46 <OS_SVC_Services+0x92>
		if(OS_Control_t.OS_State == OS_Running)
 8000a48:	bf00      	nop
	case SVC_Task_Waiting_Time:

		break;*/


	return Local_enuErrorState;
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000040 	.word	0x20000040
 8000a58:	080012b0 	.word	0x080012b0

08000a5c <MYRTOS_OS_SVC_Set>:




MYRTOS_errorID MYRTOS_OS_SVC_Set(SVC_ID_t svc_id)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
	MYRTOS_errorID Local_enuErrorState = ES_NoError;
 8000a66:	2300      	movs	r3, #0
 8000a68:	73fb      	strb	r3, [r7, #15]

	//we will use svc to reorder Task_Scheduler and update Ready_Queue
	switch(svc_id)
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b04      	cmp	r3, #4
 8000a6e:	d817      	bhi.n	8000aa0 <MYRTOS_OS_SVC_Set+0x44>
 8000a70:	a201      	add	r2, pc, #4	; (adr r2, 8000a78 <MYRTOS_OS_SVC_Set+0x1c>)
 8000a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a76:	bf00      	nop
 8000a78:	08000a8d 	.word	0x08000a8d
 8000a7c:	08000a91 	.word	0x08000a91
 8000a80:	08000a95 	.word	0x08000a95
 8000a84:	08000a99 	.word	0x08000a99
 8000a88:	08000a9d 	.word	0x08000a9d
	{
	case SVC_Activate_Task:
		__asm("SVC #0x00");
 8000a8c:	df00      	svc	0
		break;
 8000a8e:	e007      	b.n	8000aa0 <MYRTOS_OS_SVC_Set+0x44>

	case SVC_Terminate_Task:
		__asm("SVC #0x01");
 8000a90:	df01      	svc	1
		break;
 8000a92:	e005      	b.n	8000aa0 <MYRTOS_OS_SVC_Set+0x44>

	case SVC_Task_Waiting_Time:
		__asm("SVC #0x02");
 8000a94:	df02      	svc	2
		break;
 8000a96:	e003      	b.n	8000aa0 <MYRTOS_OS_SVC_Set+0x44>

	case SVC_AquireMutex:
		__asm("SVC #0x03");  //Assignment Task
 8000a98:	df03      	svc	3
		break;
 8000a9a:	e001      	b.n	8000aa0 <MYRTOS_OS_SVC_Set+0x44>

	case SVC_ReleaseMutex:
		__asm("SVC #0x04"); //Assignment Task
 8000a9c:	df04      	svc	4
		break;
 8000a9e:	bf00      	nop
	}

	return Local_enuErrorState;
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <MYRTOS_Active_Task>:




MYRTOS_errorID MYRTOS_Active_Task(Task_Ref_t* Task_Ref_Config){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]

	MYRTOS_errorID Local_enuErrorState = ES_NoError;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	73fb      	strb	r3, [r7, #15]
	Task_Ref_Config->Task_State=Waiting_State;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2201      	movs	r2, #1
 8000abc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	MYRTOS_OS_SVC_Set(SVC_Activate_Task);
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f7ff ffcb 	bl	8000a5c <MYRTOS_OS_SVC_Set>





	return Local_enuErrorState;
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]

}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <MYRTOS_Terminat_Task>:
MYRTOS_errorID MYRTOS_Terminat_Task(Task_Ref_t* Task_Ref_Config){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	MYRTOS_errorID Local_enuErrorState = ES_NoError;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	73fb      	strb	r3, [r7, #15]

	Task_Ref_Config->Task_State=Suspend_State;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	MYRTOS_OS_SVC_Set(SVC_Terminate_Task);
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff ffb9 	bl	8000a5c <MYRTOS_OS_SVC_Set>





	return Local_enuErrorState;
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <MYRTOS_Update_TasksWaitingTime>:
	return Local_enuErrorState;
}


void MYRTOS_Update_TasksWaitingTime()
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
	for (int i =0; i < OS_Control_t.No_of_Active_Tasks ; i++  )
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	e031      	b.n	8000b64 <MYRTOS_Update_TasksWaitingTime+0x70>
	{
		if (OS_Control_t.OS_Tasks[i]->Task_State == Suspend_State) //it is blocking until meet the time line
 8000b00:	4a1d      	ldr	r2, [pc, #116]	; (8000b78 <MYRTOS_Update_TasksWaitingTime+0x84>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b08:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d126      	bne.n	8000b5e <MYRTOS_Update_TasksWaitingTime+0x6a>
		{
			if (OS_Control_t.OS_Tasks[i]->Task_Timing_Waiting.Task_Blocking == Blocking_Enable)
 8000b10:	4a19      	ldr	r2, [pc, #100]	; (8000b78 <MYRTOS_Update_TasksWaitingTime+0x84>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d11e      	bne.n	8000b5e <MYRTOS_Update_TasksWaitingTime+0x6a>
			{
				OS_Control_t.OS_Tasks[i]->Task_Timing_Waiting.Ticks_Count-- ;
 8000b20:	4a15      	ldr	r2, [pc, #84]	; (8000b78 <MYRTOS_Update_TasksWaitingTime+0x84>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b2a:	3a01      	subs	r2, #1
 8000b2c:	641a      	str	r2, [r3, #64]	; 0x40
				if (OS_Control_t.OS_Tasks[i]->Task_Timing_Waiting.Ticks_Count == 1)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <MYRTOS_Update_TasksWaitingTime+0x84>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d110      	bne.n	8000b5e <MYRTOS_Update_TasksWaitingTime+0x6a>
				{
					OS_Control_t.OS_Tasks[i]->Task_Timing_Waiting.Task_Blocking = Blocking_Disable ;
 8000b3c:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <MYRTOS_Update_TasksWaitingTime+0x84>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b44:	2200      	movs	r2, #0
 8000b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					OS_Control_t.OS_Tasks[i]->Task_State = Waiting_State ;
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <MYRTOS_Update_TasksWaitingTime+0x84>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b52:	2201      	movs	r2, #1
 8000b54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
					MYRTOS_OS_SVC_Set(SVC_Task_Waiting_Time);
 8000b58:	2002      	movs	r0, #2
 8000b5a:	f7ff ff7f 	bl	8000a5c <MYRTOS_OS_SVC_Set>
	for (int i =0; i < OS_Control_t.No_of_Active_Tasks ; i++  )
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3301      	adds	r3, #1
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <MYRTOS_Update_TasksWaitingTime+0x84>)
 8000b66:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d8c7      	bhi.n	8000b00 <MYRTOS_Update_TasksWaitingTime+0xc>
				}
			}
		}
	}
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000040 	.word	0x20000040

08000b7c <MYRTOS_AcquireMutex>:

MYRTOS_errorID MYRTOS_AcquireMutex(Mutex_ref* Mref , Task_Ref_t* Tref){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]

	MYRTOS_errorID Local_enuErrorState = ES_NoError;
 8000b86:	2300      	movs	r3, #0
 8000b88:	73fb      	strb	r3, [r7, #15]

	if(Mref->CurrentTUser==NULL){
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d103      	bne.n	8000b9a <MYRTOS_AcquireMutex+0x1e>

		Mref->CurrentTUser=Tref;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	e012      	b.n	8000bc0 <MYRTOS_AcquireMutex+0x44>
	}else{

		if(Mref->NextTUser==NULL){
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d10c      	bne.n	8000bbc <MYRTOS_AcquireMutex+0x40>
			Mref->NextTUser=Tref;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	60da      	str	r2, [r3, #12]
			Tref->Task_State=Suspend_State;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	2200      	movs	r2, #0
 8000bac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			Local_enuErrorState=MYRTOS_OS_SVC_Set(SVC_Terminate_Task);
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f7ff ff53 	bl	8000a5c <MYRTOS_OS_SVC_Set>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	73fb      	strb	r3, [r7, #15]
 8000bba:	e001      	b.n	8000bc0 <MYRTOS_AcquireMutex+0x44>

		}else{
			return MutexisReacedToMaxNumberOfUsers ;
 8000bbc:	2306      	movs	r3, #6
 8000bbe:	e000      	b.n	8000bc2 <MYRTOS_AcquireMutex+0x46>
		}
	}

	return Local_enuErrorState;
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]

}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <MYRTOS_ReleaseMutex>:
MYRTOS_errorID MYRTOS_ReleaseMutex(Mutex_ref* Mref){
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b084      	sub	sp, #16
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
	MYRTOS_errorID Local_enuErrorState = ES_NoError;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	73fb      	strb	r3, [r7, #15]
	if(Mref->CurrentTUser!=NULL){
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d010      	beq.n	8000c00 <MYRTOS_ReleaseMutex+0x36>
		Mref->CurrentTUser=Mref->NextTUser;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	68da      	ldr	r2, [r3, #12]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	609a      	str	r2, [r3, #8]
		Mref->NextTUser=NULL;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	60da      	str	r2, [r3, #12]
		Mref->CurrentTUser->Task_State=Waiting_State;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		Local_enuErrorState = MYRTOS_OS_SVC_Set(SVC_Activate_Task);
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f7ff ff30 	bl	8000a5c <MYRTOS_OS_SVC_Set>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	73fb      	strb	r3, [r7, #15]
	}


	return Local_enuErrorState;
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <MYRTOS_Start_OS>:



MYRTOS_errorID MYRTOS_Start_OS(void){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0


	MYRTOS_errorID Local_enuErrorState=ES_NoError;
 8000c12:	2300      	movs	r3, #0
 8000c14:	71fb      	strb	r3, [r7, #7]
	unsigned int Function_State = 1;
 8000c16:	2301      	movs	r3, #1
 8000c18:	603b      	str	r3, [r7, #0]

	//Enter the OS in Running Mode instead of Suspend Mode
	OS_Control_t.OS_State = OS_Running;
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <MYRTOS_Start_OS+0x7c>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//Set Default Task --> IDLE Task
	OS_Control_t.Current_Task = &MYRTOS_IDLE_TASK;
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MYRTOS_Start_OS+0x7c>)
 8000c24:	4a19      	ldr	r2, [pc, #100]	; (8000c8c <MYRTOS_Start_OS+0x80>)
 8000c26:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0

	//Activate IDLE Task --> Run IDLE Task
	Local_enuErrorState = MYRTOS_Active_Task(&MYRTOS_IDLE_TASK);
 8000c2a:	4818      	ldr	r0, [pc, #96]	; (8000c8c <MYRTOS_Start_OS+0x80>)
 8000c2c:	f7ff ff3e 	bl	8000aac <MYRTOS_Active_Task>
 8000c30:	4603      	mov	r3, r0
 8000c32:	71fb      	strb	r3, [r7, #7]

	//Start Ticker --> 1ms
	Function_State = OS_Start_Ticker();
 8000c34:	f7ff fb22 	bl	800027c <OS_Start_Ticker>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	603b      	str	r3, [r7, #0]
	if(Function_State)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MYRTOS_Start_OS+0x3a>
		Local_enuErrorState = ES_Error_SysTick_coounting;
 8000c42:	2304      	movs	r3, #4
 8000c44:	71fb      	strb	r3, [r7, #7]

	//Set PSP with PSP of Current Task
	OS_Set_PSP_Val(OS_Control_t.Current_Task->Current_PSP_Task);
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <MYRTOS_Start_OS+0x7c>)
 8000c48:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f380 8809 	msr	PSP, r0

	//Set SP shadow to PSP instead of MSP
	OS_Set_SP_shadowto_PSP;
 8000c54:	f3ef 8014 	mrs	r0, CONTROL
 8000c58:	f04f 0102 	mov.w	r1, #2
 8000c5c:	ea40 0001 	orr.w	r0, r0, r1
 8000c60:	f380 8814 	msr	CONTROL, r0

	//Switch from Privileged to Unprivileged
	OS_Switch_Privileged_to_Unprivileged;
 8000c64:	f3ef 8014 	mrs	r0, CONTROL
 8000c68:	f04f 0101 	mov.w	r1, #1
 8000c6c:	ea40 0001 	orr.w	r0, r0, r1
 8000c70:	f380 8814 	msr	CONTROL, r0

	//Run Current Task
	OS_Control_t.Current_Task->PF_Task_Entry();
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <MYRTOS_Start_OS+0x7c>)
 8000c76:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	4798      	blx	r3

	return Local_enuErrorState;
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000040 	.word	0x20000040
 8000c8c:	200001ec 	.word	0x200001ec

08000c90 <Task1_Func>:




void Task1_Func(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0

	unsigned char counter=0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		Task1_Led ^= 1;
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <Task1_Func+0x48>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	f083 0301 	eor.w	r3, r3, #1
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <Task1_Func+0x48>)
 8000ca6:	701a      	strb	r2, [r3, #0]

		counter++;
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	3301      	adds	r3, #1
 8000cac:	71fb      	strb	r3, [r7, #7]
		if(counter==100){
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	2b64      	cmp	r3, #100	; 0x64
 8000cb2:	d107      	bne.n	8000cc4 <Task1_Func+0x34>

			MYRTOS_AcquireMutex(&Mref1,&Task1);
 8000cb4:	4909      	ldr	r1, [pc, #36]	; (8000cdc <Task1_Func+0x4c>)
 8000cb6:	480a      	ldr	r0, [pc, #40]	; (8000ce0 <Task1_Func+0x50>)
 8000cb8:	f7ff ff60 	bl	8000b7c <MYRTOS_AcquireMutex>
			MYRTOS_Active_Task(&Task2);
 8000cbc:	4809      	ldr	r0, [pc, #36]	; (8000ce4 <Task1_Func+0x54>)
 8000cbe:	f7ff fef5 	bl	8000aac <MYRTOS_Active_Task>
 8000cc2:	e7ea      	b.n	8000c9a <Task1_Func+0xa>


		}else if(counter==200){
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	2bc8      	cmp	r3, #200	; 0xc8
 8000cc8:	d1e7      	bne.n	8000c9a <Task1_Func+0xa>
			counter=0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	71fb      	strb	r3, [r7, #7]
			MYRTOS_ReleaseMutex(&Mref1);
 8000cce:	4804      	ldr	r0, [pc, #16]	; (8000ce0 <Task1_Func+0x50>)
 8000cd0:	f7ff ff7b 	bl	8000bca <MYRTOS_ReleaseMutex>
		Task1_Led ^= 1;
 8000cd4:	e7e1      	b.n	8000c9a <Task1_Func+0xa>
 8000cd6:	bf00      	nop
 8000cd8:	2000047c 	.word	0x2000047c
 8000cdc:	20000438 	.word	0x20000438
 8000ce0:	200003c4 	.word	0x200003c4
 8000ce4:	200004f8 	.word	0x200004f8

08000ce8 <Task2_Func>:

	}
}

void Task2_Func(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0


	unsigned char counter=0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		Task2_Led ^= 1;
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <Task2_Func+0x40>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	f083 0301 	eor.w	r3, r3, #1
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <Task2_Func+0x40>)
 8000cfe:	701a      	strb	r2, [r3, #0]

		counter++;
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	3301      	adds	r3, #1
 8000d04:	71fb      	strb	r3, [r7, #7]
		if(counter==100){
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2b64      	cmp	r3, #100	; 0x64
 8000d0a:	d103      	bne.n	8000d14 <Task2_Func+0x2c>
			MYRTOS_Active_Task(&Task3);
 8000d0c:	4807      	ldr	r0, [pc, #28]	; (8000d2c <Task2_Func+0x44>)
 8000d0e:	f7ff fecd 	bl	8000aac <MYRTOS_Active_Task>
 8000d12:	e7ee      	b.n	8000cf2 <Task2_Func+0xa>

		}else if(counter==200){
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	2bc8      	cmp	r3, #200	; 0xc8
 8000d18:	d1eb      	bne.n	8000cf2 <Task2_Func+0xa>
			counter=0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	71fb      	strb	r3, [r7, #7]
			MYRTOS_Terminat_Task(&Task2);
 8000d1e:	4804      	ldr	r0, [pc, #16]	; (8000d30 <Task2_Func+0x48>)
 8000d20:	f7ff fed6 	bl	8000ad0 <MYRTOS_Terminat_Task>
		Task2_Led ^= 1;
 8000d24:	e7e5      	b.n	8000cf2 <Task2_Func+0xa>
 8000d26:	bf00      	nop
 8000d28:	2000053c 	.word	0x2000053c
 8000d2c:	200004b0 	.word	0x200004b0
 8000d30:	200004f8 	.word	0x200004f8

08000d34 <Task3_Func>:
	   //MYRTOS_TaskWait(300 , &Task2);
	}
}

void Task3_Func(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0


	unsigned char counter=0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		Task3_Led ^= 1;
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <Task3_Func+0x40>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	f083 0301 	eor.w	r3, r3, #1
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <Task3_Func+0x40>)
 8000d4a:	701a      	strb	r2, [r3, #0]

		counter++;
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	71fb      	strb	r3, [r7, #7]
		if(counter==100){
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	2b64      	cmp	r3, #100	; 0x64
 8000d56:	d103      	bne.n	8000d60 <Task3_Func+0x2c>
			MYRTOS_Active_Task(&Task4);
 8000d58:	4807      	ldr	r0, [pc, #28]	; (8000d78 <Task3_Func+0x44>)
 8000d5a:	f7ff fea7 	bl	8000aac <MYRTOS_Active_Task>
 8000d5e:	e7ee      	b.n	8000d3e <Task3_Func+0xa>

		}else if(counter==200){
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	2bc8      	cmp	r3, #200	; 0xc8
 8000d64:	d1eb      	bne.n	8000d3e <Task3_Func+0xa>
			counter=0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	71fb      	strb	r3, [r7, #7]
			MYRTOS_Terminat_Task(&Task3);
 8000d6a:	4804      	ldr	r0, [pc, #16]	; (8000d7c <Task3_Func+0x48>)
 8000d6c:	f7ff feb0 	bl	8000ad0 <MYRTOS_Terminat_Task>
		Task3_Led ^= 1;
 8000d70:	e7e5      	b.n	8000d3e <Task3_Func+0xa>
 8000d72:	bf00      	nop
 8000d74:	200004f4 	.word	0x200004f4
 8000d78:	200003f4 	.word	0x200003f4
 8000d7c:	200004b0 	.word	0x200004b0

08000d80 <Task4_Func>:
		//MYRTOS_TaskWait(300 , &Task2);
	}
}

void Task4_Func(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0

	unsigned char counter=0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		Task4_Led ^= 1;
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <Task4_Func+0x48>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	f083 0301 	eor.w	r3, r3, #1
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <Task4_Func+0x48>)
 8000d96:	701a      	strb	r2, [r3, #0]
		//MYRTOS_TaskWait(500 , &Task3);
		counter++;
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	71fb      	strb	r3, [r7, #7]
		if(counter==3){
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2b03      	cmp	r3, #3
 8000da2:	d104      	bne.n	8000dae <Task4_Func+0x2e>
			MYRTOS_AcquireMutex(&Mref1,&Task4);
 8000da4:	4909      	ldr	r1, [pc, #36]	; (8000dcc <Task4_Func+0x4c>)
 8000da6:	480a      	ldr	r0, [pc, #40]	; (8000dd0 <Task4_Func+0x50>)
 8000da8:	f7ff fee8 	bl	8000b7c <MYRTOS_AcquireMutex>
 8000dac:	e7ed      	b.n	8000d8a <Task4_Func+0xa>
		}
		else if(counter==200){
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	2bc8      	cmp	r3, #200	; 0xc8
 8000db2:	d1ea      	bne.n	8000d8a <Task4_Func+0xa>
			counter=0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	71fb      	strb	r3, [r7, #7]
			MYRTOS_ReleaseMutex(&Mref1);
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <Task4_Func+0x50>)
 8000dba:	f7ff ff06 	bl	8000bca <MYRTOS_ReleaseMutex>
			MYRTOS_Terminat_Task(&Task4);
 8000dbe:	4803      	ldr	r0, [pc, #12]	; (8000dcc <Task4_Func+0x4c>)
 8000dc0:	f7ff fe86 	bl	8000ad0 <MYRTOS_Terminat_Task>
		Task4_Led ^= 1;
 8000dc4:	e7e1      	b.n	8000d8a <Task4_Func+0xa>
 8000dc6:	bf00      	nop
 8000dc8:	2000053d 	.word	0x2000053d
 8000dcc:	200003f4 	.word	0x200003f4
 8000dd0:	200003c4 	.word	0x200003c4

08000dd4 <main>:




int main(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0

	MYRTOS_errorID Local_enuErrorState = ES_NoError;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	71fb      	strb	r3, [r7, #7]

	//HW_init (Initialize Clock Tree, Rest Controller)


	HW_init();
 8000dde:	f7ff fa36 	bl	800024e <HW_init>


	Local_enuErrorState = MYRTOS_init();
 8000de2:	f7ff fc19 	bl	8000618 <MYRTOS_init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
	if(Local_enuErrorState != ES_NoError)
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d000      	beq.n	8000df2 <main+0x1e>
		while(1);
 8000df0:	e7fe      	b.n	8000df0 <main+0x1c>

	Mref1.PayloadSize=3;
 8000df2:	4b55      	ldr	r3, [pc, #340]	; (8000f48 <main+0x174>)
 8000df4:	2203      	movs	r2, #3
 8000df6:	605a      	str	r2, [r3, #4]
	Mref1.Ppayload=Buffer1;
 8000df8:	4b54      	ldr	r3, [pc, #336]	; (8000f4c <main+0x178>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b52      	ldr	r3, [pc, #328]	; (8000f48 <main+0x174>)
 8000e00:	601a      	str	r2, [r3, #0]
	strcpy(Mref1.MutexName, "MUTEX1");
 8000e02:	4b53      	ldr	r3, [pc, #332]	; (8000f50 <main+0x17c>)
 8000e04:	4a53      	ldr	r2, [pc, #332]	; (8000f54 <main+0x180>)
 8000e06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e0a:	6018      	str	r0, [r3, #0]
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	8019      	strh	r1, [r3, #0]
 8000e10:	3302      	adds	r3, #2
 8000e12:	0c0a      	lsrs	r2, r1, #16
 8000e14:	701a      	strb	r2, [r3, #0]

	Mref2.PayloadSize=3;
 8000e16:	4b50      	ldr	r3, [pc, #320]	; (8000f58 <main+0x184>)
 8000e18:	2203      	movs	r2, #3
 8000e1a:	605a      	str	r2, [r3, #4]
	Mref2.Ppayload=Buffer2;
 8000e1c:	4b4f      	ldr	r3, [pc, #316]	; (8000f5c <main+0x188>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b4d      	ldr	r3, [pc, #308]	; (8000f58 <main+0x184>)
 8000e24:	601a      	str	r2, [r3, #0]
	strcpy(Mref2.MutexName, "MUTEX2");
 8000e26:	4b4e      	ldr	r3, [pc, #312]	; (8000f60 <main+0x18c>)
 8000e28:	4a4e      	ldr	r2, [pc, #312]	; (8000f64 <main+0x190>)
 8000e2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e2e:	6018      	str	r0, [r3, #0]
 8000e30:	3304      	adds	r3, #4
 8000e32:	8019      	strh	r1, [r3, #0]
 8000e34:	3302      	adds	r3, #2
 8000e36:	0c0a      	lsrs	r2, r1, #16
 8000e38:	701a      	strb	r2, [r3, #0]

	//Configuration of task1
	Task1.Task_Stack_Size = 1024;
 8000e3a:	4b4b      	ldr	r3, [pc, #300]	; (8000f68 <main+0x194>)
 8000e3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e40:	601a      	str	r2, [r3, #0]
	Task1.PF_Task_Entry = Task1_Func;
 8000e42:	4b49      	ldr	r3, [pc, #292]	; (8000f68 <main+0x194>)
 8000e44:	4a49      	ldr	r2, [pc, #292]	; (8000f6c <main+0x198>)
 8000e46:	609a      	str	r2, [r3, #8]
	Task1.Task_Priority = 4;
 8000e48:	4b47      	ldr	r3, [pc, #284]	; (8000f68 <main+0x194>)
 8000e4a:	2204      	movs	r2, #4
 8000e4c:	711a      	strb	r2, [r3, #4]
	strcpy(Task1.Task_Name, "Task_1");
 8000e4e:	4b48      	ldr	r3, [pc, #288]	; (8000f70 <main+0x19c>)
 8000e50:	4a48      	ldr	r2, [pc, #288]	; (8000f74 <main+0x1a0>)
 8000e52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e56:	6018      	str	r0, [r3, #0]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	8019      	strh	r1, [r3, #0]
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	0c0a      	lsrs	r2, r1, #16
 8000e60:	701a      	strb	r2, [r3, #0]

	//Configuration of task2
	Task2.Task_Stack_Size = 1024;
 8000e62:	4b45      	ldr	r3, [pc, #276]	; (8000f78 <main+0x1a4>)
 8000e64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e68:	601a      	str	r2, [r3, #0]
	Task2.PF_Task_Entry = Task2_Func;
 8000e6a:	4b43      	ldr	r3, [pc, #268]	; (8000f78 <main+0x1a4>)
 8000e6c:	4a43      	ldr	r2, [pc, #268]	; (8000f7c <main+0x1a8>)
 8000e6e:	609a      	str	r2, [r3, #8]
	Task2.Task_Priority = 3;
 8000e70:	4b41      	ldr	r3, [pc, #260]	; (8000f78 <main+0x1a4>)
 8000e72:	2203      	movs	r2, #3
 8000e74:	711a      	strb	r2, [r3, #4]
	strcpy(Task2.Task_Name, "Task_2");
 8000e76:	4b42      	ldr	r3, [pc, #264]	; (8000f80 <main+0x1ac>)
 8000e78:	4a42      	ldr	r2, [pc, #264]	; (8000f84 <main+0x1b0>)
 8000e7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e7e:	6018      	str	r0, [r3, #0]
 8000e80:	3304      	adds	r3, #4
 8000e82:	8019      	strh	r1, [r3, #0]
 8000e84:	3302      	adds	r3, #2
 8000e86:	0c0a      	lsrs	r2, r1, #16
 8000e88:	701a      	strb	r2, [r3, #0]

	//Configuration of task1
	Task3.Task_Stack_Size = 1024;
 8000e8a:	4b3f      	ldr	r3, [pc, #252]	; (8000f88 <main+0x1b4>)
 8000e8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e90:	601a      	str	r2, [r3, #0]
	Task3.PF_Task_Entry = Task3_Func;
 8000e92:	4b3d      	ldr	r3, [pc, #244]	; (8000f88 <main+0x1b4>)
 8000e94:	4a3d      	ldr	r2, [pc, #244]	; (8000f8c <main+0x1b8>)
 8000e96:	609a      	str	r2, [r3, #8]
	Task3.Task_Priority = 2;
 8000e98:	4b3b      	ldr	r3, [pc, #236]	; (8000f88 <main+0x1b4>)
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	711a      	strb	r2, [r3, #4]
	strcpy(Task3.Task_Name, "Task_3");
 8000e9e:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <main+0x1bc>)
 8000ea0:	4a3c      	ldr	r2, [pc, #240]	; (8000f94 <main+0x1c0>)
 8000ea2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ea6:	6018      	str	r0, [r3, #0]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	8019      	strh	r1, [r3, #0]
 8000eac:	3302      	adds	r3, #2
 8000eae:	0c0a      	lsrs	r2, r1, #16
 8000eb0:	701a      	strb	r2, [r3, #0]

	Task4.Task_Stack_Size = 1024;
 8000eb2:	4b39      	ldr	r3, [pc, #228]	; (8000f98 <main+0x1c4>)
 8000eb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eb8:	601a      	str	r2, [r3, #0]
	Task4.PF_Task_Entry = Task4_Func;
 8000eba:	4b37      	ldr	r3, [pc, #220]	; (8000f98 <main+0x1c4>)
 8000ebc:	4a37      	ldr	r2, [pc, #220]	; (8000f9c <main+0x1c8>)
 8000ebe:	609a      	str	r2, [r3, #8]
	Task4.Task_Priority = 1;
 8000ec0:	4b35      	ldr	r3, [pc, #212]	; (8000f98 <main+0x1c4>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	711a      	strb	r2, [r3, #4]
	strcpy(Task4.Task_Name, "Task_4");
 8000ec6:	4b36      	ldr	r3, [pc, #216]	; (8000fa0 <main+0x1cc>)
 8000ec8:	4a36      	ldr	r2, [pc, #216]	; (8000fa4 <main+0x1d0>)
 8000eca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ece:	6018      	str	r0, [r3, #0]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	8019      	strh	r1, [r3, #0]
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	0c0a      	lsrs	r2, r1, #16
 8000ed8:	701a      	strb	r2, [r3, #0]



	//Create the 1st Task
	Local_enuErrorState = MYRTOS_Create_Task(&Task1);
 8000eda:	4823      	ldr	r0, [pc, #140]	; (8000f68 <main+0x194>)
 8000edc:	f7ff fc16 	bl	800070c <MYRTOS_Create_Task>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	71fb      	strb	r3, [r7, #7]
	if(Local_enuErrorState != ES_NoError)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d000      	beq.n	8000eec <main+0x118>
		while(1);
 8000eea:	e7fe      	b.n	8000eea <main+0x116>


	//Create the 2nd Task
	Local_enuErrorState = MYRTOS_Create_Task(&Task2);
 8000eec:	4822      	ldr	r0, [pc, #136]	; (8000f78 <main+0x1a4>)
 8000eee:	f7ff fc0d 	bl	800070c <MYRTOS_Create_Task>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
	if(Local_enuErrorState != ES_NoError)
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d000      	beq.n	8000efe <main+0x12a>
		while(1);
 8000efc:	e7fe      	b.n	8000efc <main+0x128>

	//Create the 3rd Task
	Local_enuErrorState = MYRTOS_Create_Task(&Task3);
 8000efe:	4822      	ldr	r0, [pc, #136]	; (8000f88 <main+0x1b4>)
 8000f00:	f7ff fc04 	bl	800070c <MYRTOS_Create_Task>
 8000f04:	4603      	mov	r3, r0
 8000f06:	71fb      	strb	r3, [r7, #7]
	if(Local_enuErrorState != ES_NoError)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d000      	beq.n	8000f10 <main+0x13c>
		while(1);
 8000f0e:	e7fe      	b.n	8000f0e <main+0x13a>

	//Create the 4th Task
	Local_enuErrorState = MYRTOS_Create_Task(&Task4);
 8000f10:	4821      	ldr	r0, [pc, #132]	; (8000f98 <main+0x1c4>)
 8000f12:	f7ff fbfb 	bl	800070c <MYRTOS_Create_Task>
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
	if(Local_enuErrorState != ES_NoError)
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d000      	beq.n	8000f22 <main+0x14e>
		while(1);
 8000f20:	e7fe      	b.n	8000f20 <main+0x14c>



	//Activate the 1st Task
	Local_enuErrorState = MYRTOS_Active_Task(&Task1);
 8000f22:	4811      	ldr	r0, [pc, #68]	; (8000f68 <main+0x194>)
 8000f24:	f7ff fdc2 	bl	8000aac <MYRTOS_Active_Task>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	71fb      	strb	r3, [r7, #7]
	if(Local_enuErrorState != ES_NoError)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d000      	beq.n	8000f34 <main+0x160>
		while(1);
 8000f32:	e7fe      	b.n	8000f32 <main+0x15e>



	Local_enuErrorState = MYRTOS_Start_OS();
 8000f34:	f7ff fe6a 	bl	8000c0c <MYRTOS_Start_OS>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	71fb      	strb	r3, [r7, #7]
	if(Local_enuErrorState != ES_NoError)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d000      	beq.n	8000f44 <main+0x170>
		while(1);
 8000f42:	e7fe      	b.n	8000f42 <main+0x16e>



		while(1)
 8000f44:	e7fe      	b.n	8000f44 <main+0x170>
 8000f46:	bf00      	nop
 8000f48:	200003c4 	.word	0x200003c4
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	200003d4 	.word	0x200003d4
 8000f54:	080012bc 	.word	0x080012bc
 8000f58:	20000480 	.word	0x20000480
 8000f5c:	20000001 	.word	0x20000001
 8000f60:	20000490 	.word	0x20000490
 8000f64:	080012c4 	.word	0x080012c4
 8000f68:	20000438 	.word	0x20000438
 8000f6c:	08000c91 	.word	0x08000c91
 8000f70:	20000454 	.word	0x20000454
 8000f74:	080012cc 	.word	0x080012cc
 8000f78:	200004f8 	.word	0x200004f8
 8000f7c:	08000ce9 	.word	0x08000ce9
 8000f80:	20000514 	.word	0x20000514
 8000f84:	080012d4 	.word	0x080012d4
 8000f88:	200004b0 	.word	0x200004b0
 8000f8c:	08000d35 	.word	0x08000d35
 8000f90:	200004cc 	.word	0x200004cc
 8000f94:	080012dc 	.word	0x080012dc
 8000f98:	200003f4 	.word	0x200003f4
 8000f9c:	08000d81 	.word	0x08000d81
 8000fa0:	20000410 	.word	0x20000410
 8000fa4:	080012e4 	.word	0x080012e4

08000fa8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000faa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000fac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb0:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fb2:	490d      	ldr	r1, [pc, #52]	; (8000fe8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <LoopForever+0xe>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fc8:	4c0a      	ldr	r4, [pc, #40]	; (8000ff4 <LoopForever+0x16>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fd6:	f000 f93b 	bl	8001250 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fda:	f7ff fefb 	bl	8000dd4 <main>

08000fde <LoopForever>:

LoopForever:
    b LoopForever
 8000fde:	e7fe      	b.n	8000fde <LoopForever>
  ldr   r0, =_estack
 8000fe0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000fec:	080012f4 	.word	0x080012f4
  ldr r2, =_sbss
 8000ff0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000ff4:	2000057c 	.word	0x2000057c

08000ff8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC1_2_IRQHandler>
	...

08000ffc <EXTI0_IRQHandler>:

	Updata(P_EXTI_Confige);
}
//=========================================ISR==============================================
void EXTI0_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	//write 1 to clear pending bit,to stop sending interrupt again
	EXTI->PR = 1<<0;
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <EXTI0_IRQHandler+0x14>)
 8001002:	2201      	movs	r2, #1
 8001004:	615a      	str	r2, [r3, #20]
	//callback
	Gp_call_back_func[0]();
 8001006:	4b03      	ldr	r3, [pc, #12]	; (8001014 <EXTI0_IRQHandler+0x18>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4798      	blx	r3
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40010400 	.word	0x40010400
 8001014:	20000540 	.word	0x20000540

08001018 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<1;
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <EXTI1_IRQHandler+0x14>)
 800101e:	2202      	movs	r2, #2
 8001020:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[1]();
 8001022:	4b03      	ldr	r3, [pc, #12]	; (8001030 <EXTI1_IRQHandler+0x18>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	4798      	blx	r3
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40010400 	.word	0x40010400
 8001030:	20000540 	.word	0x20000540

08001034 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<2;
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <EXTI2_IRQHandler+0x14>)
 800103a:	2204      	movs	r2, #4
 800103c:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[2]();
 800103e:	4b03      	ldr	r3, [pc, #12]	; (800104c <EXTI2_IRQHandler+0x18>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	4798      	blx	r3
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40010400 	.word	0x40010400
 800104c:	20000540 	.word	0x20000540

08001050 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<3;
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <EXTI3_IRQHandler+0x14>)
 8001056:	2208      	movs	r2, #8
 8001058:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[3]();
 800105a:	4b03      	ldr	r3, [pc, #12]	; (8001068 <EXTI3_IRQHandler+0x18>)
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	4798      	blx	r3
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40010400 	.word	0x40010400
 8001068:	20000540 	.word	0x20000540

0800106c <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	EXTI->PR = 1<<4;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <EXTI4_IRQHandler+0x14>)
 8001072:	2210      	movs	r2, #16
 8001074:	615a      	str	r2, [r3, #20]
	Gp_call_back_func[4]();
 8001076:	4b03      	ldr	r3, [pc, #12]	; (8001084 <EXTI4_IRQHandler+0x18>)
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	4798      	blx	r3
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40010400 	.word	0x40010400
 8001084:	20000540 	.word	0x20000540

08001088 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
    /* here i check which interrupt is that, cause all interrupts from
	 5---9  arrived on same pin at NVIC
	so we will know which interrupt for ,by checking PR register if its one so its
	and then we write 1 on PR reg to disable interrupt  */
	if(EXTI->PR & 1<<5) { EXTI->PR  = 1<<5;   Gp_call_back_func[5](); }
 800108c:	4b1f      	ldr	r3, [pc, #124]	; (800110c <EXTI9_5_IRQHandler+0x84>)
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	f003 0320 	and.w	r3, r3, #32
 8001094:	2b00      	cmp	r3, #0
 8001096:	d005      	beq.n	80010a4 <EXTI9_5_IRQHandler+0x1c>
 8001098:	4b1c      	ldr	r3, [pc, #112]	; (800110c <EXTI9_5_IRQHandler+0x84>)
 800109a:	2220      	movs	r2, #32
 800109c:	615a      	str	r2, [r3, #20]
 800109e:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <EXTI9_5_IRQHandler+0x88>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR  = 1<<6;   Gp_call_back_func[6](); }
 80010a4:	4b19      	ldr	r3, [pc, #100]	; (800110c <EXTI9_5_IRQHandler+0x84>)
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d005      	beq.n	80010bc <EXTI9_5_IRQHandler+0x34>
 80010b0:	4b16      	ldr	r3, [pc, #88]	; (800110c <EXTI9_5_IRQHandler+0x84>)
 80010b2:	2240      	movs	r2, #64	; 0x40
 80010b4:	615a      	str	r2, [r3, #20]
 80010b6:	4b16      	ldr	r3, [pc, #88]	; (8001110 <EXTI9_5_IRQHandler+0x88>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR  = 1<<7;   Gp_call_back_func[7](); }
 80010bc:	4b13      	ldr	r3, [pc, #76]	; (800110c <EXTI9_5_IRQHandler+0x84>)
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d005      	beq.n	80010d4 <EXTI9_5_IRQHandler+0x4c>
 80010c8:	4b10      	ldr	r3, [pc, #64]	; (800110c <EXTI9_5_IRQHandler+0x84>)
 80010ca:	2280      	movs	r2, #128	; 0x80
 80010cc:	615a      	str	r2, [r3, #20]
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <EXTI9_5_IRQHandler+0x88>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR  = 1<<8;   Gp_call_back_func[8](); }
 80010d4:	4b0d      	ldr	r3, [pc, #52]	; (800110c <EXTI9_5_IRQHandler+0x84>)
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d006      	beq.n	80010ee <EXTI9_5_IRQHandler+0x66>
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <EXTI9_5_IRQHandler+0x84>)
 80010e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e6:	615a      	str	r2, [r3, #20]
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <EXTI9_5_IRQHandler+0x88>)
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR  = 1<<9;   Gp_call_back_func[9](); }
 80010ee:	4b07      	ldr	r3, [pc, #28]	; (800110c <EXTI9_5_IRQHandler+0x84>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d006      	beq.n	8001108 <EXTI9_5_IRQHandler+0x80>
 80010fa:	4b04      	ldr	r3, [pc, #16]	; (800110c <EXTI9_5_IRQHandler+0x84>)
 80010fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001100:	615a      	str	r2, [r3, #20]
 8001102:	4b03      	ldr	r3, [pc, #12]	; (8001110 <EXTI9_5_IRQHandler+0x88>)
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	4798      	blx	r3
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40010400 	.word	0x40010400
 8001110:	20000540 	.word	0x20000540

08001114 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void){
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0

	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10; Gp_call_back_func[10](); }
 8001118:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <EXTI15_10_IRQHandler+0xbc>)
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001120:	2b00      	cmp	r3, #0
 8001122:	d008      	beq.n	8001136 <EXTI15_10_IRQHandler+0x22>
 8001124:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <EXTI15_10_IRQHandler+0xbc>)
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	4a29      	ldr	r2, [pc, #164]	; (80011d0 <EXTI15_10_IRQHandler+0xbc>)
 800112a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800112e:	6153      	str	r3, [r2, #20]
 8001130:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <EXTI15_10_IRQHandler+0xc0>)
 8001132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001134:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11; Gp_call_back_func[11](); }
 8001136:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <EXTI15_10_IRQHandler+0xbc>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800113e:	2b00      	cmp	r3, #0
 8001140:	d008      	beq.n	8001154 <EXTI15_10_IRQHandler+0x40>
 8001142:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <EXTI15_10_IRQHandler+0xbc>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	4a22      	ldr	r2, [pc, #136]	; (80011d0 <EXTI15_10_IRQHandler+0xbc>)
 8001148:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800114c:	6153      	str	r3, [r2, #20]
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <EXTI15_10_IRQHandler+0xc0>)
 8001150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001152:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12; Gp_call_back_func[12](); }
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <EXTI15_10_IRQHandler+0xbc>)
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d008      	beq.n	8001172 <EXTI15_10_IRQHandler+0x5e>
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <EXTI15_10_IRQHandler+0xbc>)
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	4a1a      	ldr	r2, [pc, #104]	; (80011d0 <EXTI15_10_IRQHandler+0xbc>)
 8001166:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800116a:	6153      	str	r3, [r2, #20]
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <EXTI15_10_IRQHandler+0xc0>)
 800116e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001170:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13; Gp_call_back_func[13](); }
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <EXTI15_10_IRQHandler+0xbc>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d008      	beq.n	8001190 <EXTI15_10_IRQHandler+0x7c>
 800117e:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <EXTI15_10_IRQHandler+0xbc>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	4a13      	ldr	r2, [pc, #76]	; (80011d0 <EXTI15_10_IRQHandler+0xbc>)
 8001184:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001188:	6153      	str	r3, [r2, #20]
 800118a:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <EXTI15_10_IRQHandler+0xc0>)
 800118c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800118e:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14; Gp_call_back_func[14](); }
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <EXTI15_10_IRQHandler+0xbc>)
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d008      	beq.n	80011ae <EXTI15_10_IRQHandler+0x9a>
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <EXTI15_10_IRQHandler+0xbc>)
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <EXTI15_10_IRQHandler+0xbc>)
 80011a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a6:	6153      	str	r3, [r2, #20]
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <EXTI15_10_IRQHandler+0xc0>)
 80011aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ac:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<15; Gp_call_back_func[15](); }
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <EXTI15_10_IRQHandler+0xbc>)
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d008      	beq.n	80011cc <EXTI15_10_IRQHandler+0xb8>
 80011ba:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <EXTI15_10_IRQHandler+0xbc>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <EXTI15_10_IRQHandler+0xbc>)
 80011c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011c4:	6153      	str	r3, [r2, #20]
 80011c6:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <EXTI15_10_IRQHandler+0xc0>)
 80011c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ca:	4798      	blx	r3
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40010400 	.word	0x40010400
 80011d4:	20000540 	.word	0x20000540

080011d8 <SPI1_IRQHandler>:
	*DATA=SPIx->SPI_DR;
}


/* SPI1 global interrupt                          */
void SPI1_IRQHandler (void){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	/*struct S_IRQ_Source irq_src;
	irq_src.TXE = ((SPI1->SR >> 1) & 1);
	irq_src.RXNE = ((SPI1->SR >> 2) & 1);
	irq_src.ERRI = ((SPI1->SR >> 5) & 1);*/
	SPI_confige->SPI_IRQ_FUNCTION();
 80011dc:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <SPI1_IRQHandler+0x10>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	4798      	blx	r3

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000024 	.word	0x20000024

080011ec <SPI2_IRQHandler>:
/* SPI2 global interrupt                          */
void SPI2_IRQHandler (void){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	/*struct S_IRQ_Source irq_src;
	irq_src.TXE = ((SPI1->SR >> 1) & 1);
	irq_src.RXNE = ((SPI1->SR >> 2) & 1);
	irq_src.ERRI = ((SPI1->SR >> 5) & 1);*/
	SPI_confige->SPI_IRQ_FUNCTION();
 80011f0:	4b02      	ldr	r3, [pc, #8]	; (80011fc <SPI2_IRQHandler+0x10>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	4798      	blx	r3

}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000024 	.word	0x20000024

08001200 <SPI3_IRQHandler>:
/* SPI3 global interrupt                          */
void SPI3_IRQHandler(void){
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	/*struct S_IRQ_Source irq_src;
	irq_src.TXE = ((SPI1->SR >> 1) & 1);
	irq_src.RXNE = ((SPI1->SR >> 2) & 1);
	irq_src.ERRI = ((SPI1->SR >> 5) & 1);*/
	SPI_confige->SPI_IRQ_FUNCTION();
 8001204:	4b02      	ldr	r3, [pc, #8]	; (8001210 <SPI3_IRQHandler+0x10>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	4798      	blx	r3

}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000024 	.word	0x20000024

08001214 <USART1_IRQHandler>:
}



/* USART1 global interrupt                          */
void USART1_IRQHandler (void){
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	USART_confige->IRQ_FUNCTION();
 8001218:	4b02      	ldr	r3, [pc, #8]	; (8001224 <USART1_IRQHandler+0x10>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	4798      	blx	r3

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000028 	.word	0x20000028

08001228 <USART2_IRQHandler>:
/* USART2 global interrupt                          */
void USART2_IRQHandler (void){
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	USART_confige->IRQ_FUNCTION();
 800122c:	4b02      	ldr	r3, [pc, #8]	; (8001238 <USART2_IRQHandler+0x10>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	4798      	blx	r3

}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000028 	.word	0x20000028

0800123c <USART3_IRQHandler>:
/* USART3 global interrupt                          */
void USART3_IRQHandler(void){
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	USART_confige->IRQ_FUNCTION();
 8001240:	4b02      	ldr	r3, [pc, #8]	; (800124c <USART3_IRQHandler+0x10>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	4798      	blx	r3

}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000028 	.word	0x20000028

08001250 <__libc_init_array>:
 8001250:	b570      	push	{r4, r5, r6, lr}
 8001252:	2500      	movs	r5, #0
 8001254:	4e0c      	ldr	r6, [pc, #48]	; (8001288 <__libc_init_array+0x38>)
 8001256:	4c0d      	ldr	r4, [pc, #52]	; (800128c <__libc_init_array+0x3c>)
 8001258:	1ba4      	subs	r4, r4, r6
 800125a:	10a4      	asrs	r4, r4, #2
 800125c:	42a5      	cmp	r5, r4
 800125e:	d109      	bne.n	8001274 <__libc_init_array+0x24>
 8001260:	f000 f81a 	bl	8001298 <_init>
 8001264:	2500      	movs	r5, #0
 8001266:	4e0a      	ldr	r6, [pc, #40]	; (8001290 <__libc_init_array+0x40>)
 8001268:	4c0a      	ldr	r4, [pc, #40]	; (8001294 <__libc_init_array+0x44>)
 800126a:	1ba4      	subs	r4, r4, r6
 800126c:	10a4      	asrs	r4, r4, #2
 800126e:	42a5      	cmp	r5, r4
 8001270:	d105      	bne.n	800127e <__libc_init_array+0x2e>
 8001272:	bd70      	pop	{r4, r5, r6, pc}
 8001274:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001278:	4798      	blx	r3
 800127a:	3501      	adds	r5, #1
 800127c:	e7ee      	b.n	800125c <__libc_init_array+0xc>
 800127e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001282:	4798      	blx	r3
 8001284:	3501      	adds	r5, #1
 8001286:	e7f2      	b.n	800126e <__libc_init_array+0x1e>
 8001288:	080012ec 	.word	0x080012ec
 800128c:	080012ec 	.word	0x080012ec
 8001290:	080012ec 	.word	0x080012ec
 8001294:	080012f0 	.word	0x080012f0

08001298 <_init>:
 8001298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800129a:	bf00      	nop
 800129c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800129e:	bc08      	pop	{r3}
 80012a0:	469e      	mov	lr, r3
 80012a2:	4770      	bx	lr

080012a4 <_fini>:
 80012a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a6:	bf00      	nop
 80012a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012aa:	bc08      	pop	{r3}
 80012ac:	469e      	mov	lr, r3
 80012ae:	4770      	bx	lr
